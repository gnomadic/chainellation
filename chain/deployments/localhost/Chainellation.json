{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "renderer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Cost",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidQueryRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxSupplyReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintERC2309QuantityExceedsLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughTimePassed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotNight",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTheOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnershipNotInitializedForExtraData",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooCloudy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ConsecutiveTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "customizeCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dnas",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "primaryHue",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "secondaryHue",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "constellation",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "cloudsAt",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "explicitOwnershipOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            },
            {
              "internalType": "uint24",
              "name": "extraData",
              "type": "uint24"
            }
          ],
          "internalType": "struct IERC721A.TokenOwnership",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "explicitOwnershipsOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            },
            {
              "internalType": "uint24",
              "name": "extraData",
              "type": "uint24"
            }
          ],
          "internalType": "struct IERC721A.TokenOwnership[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "timezoneOffset",
          "type": "uint32"
        }
      ],
      "name": "freeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "gazeBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "generateCharacter",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gazed",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_sunUp",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "testConstellation",
          "type": "uint8"
        }
      ],
      "name": "generateSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCloudsAt",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getColors",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getConstellation",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isNight",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "timezoneOffset",
          "type": "uint32"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "timezoneOffset",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "firstH",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "secondH",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "_constellation",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_cloudsAt",
          "type": "uint8"
        }
      ],
      "name": "mintCustom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "reset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newCost",
          "type": "uint256"
        }
      ],
      "name": "setCustomizeCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "decorator",
          "type": "address"
        }
      ],
      "name": "setDecorator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMintCost",
          "type": "uint256"
        }
      ],
      "name": "setMintCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "renderer",
          "type": "address"
        }
      ],
      "name": "setRenderer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "twoMoonsEvent",
          "type": "address"
        }
      ],
      "name": "setTwoMoonsEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "starGaze",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stats",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "constellation",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "cloudsAt",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "gazes",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "timeZoneOffset",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "colors",
          "type": "uint32"
        },
        {
          "internalType": "uint48",
          "name": "lastGaze",
          "type": "uint48"
        },
        {
          "internalType": "uint144",
          "name": "consolidated",
          "type": "uint144"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "systemTimeOffsetWithUser",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "tokensOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stop",
          "type": "uint256"
        }
      ],
      "name": "tokensOfOwnerIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x28d1afb634ffe1172c8011688ddfa29cd60a1d2f136448217332a1f349a140c1",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "3271347",
    "logsBloom": "0x
    "blockHash": "0x4bdc572b0412a0e3c641951ec15e2a80754986c96253b0319fea74e10a73f339",
    "transactionHash": "0x28d1afb634ffe1172c8011688ddfa29cd60a1d2f136448217332a1f349a140c1",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0x28d1afb634ffe1172c8011688ddfa29cd60a1d2f136448217332a1f349a140c1",
        "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x4bdc572b0412a0e3c641951ec15e2a80754986c96253b0319fea74e10a73f339"
      }
    ],
    "blockNumber": 4,
    "cumulativeGasUsed": "3271347",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0"
  ],
  "numDeployments": 1,
  "solcInputHash": "d21f550c60dc4355172fd3573cca8c5c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"renderer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Cost\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQueryRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxSupplyReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughTimePassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotNight\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooCloudy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"customizeCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dnas\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"primaryHue\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"secondaryHue\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"constellation\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cloudsAt\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"explicitOwnershipOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721A.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"explicitOwnershipsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721A.TokenOwnership[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"timezoneOffset\",\"type\":\"uint32\"}],\"name\":\"freeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"gazeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"generateCharacter\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gazed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_sunUp\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"testConstellation\",\"type\":\"uint8\"}],\"name\":\"generateSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCloudsAt\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getColors\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getConstellation\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isNight\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"timezoneOffset\",\"type\":\"uint32\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"timezoneOffset\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"firstH\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"secondH\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_constellation\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_cloudsAt\",\"type\":\"uint8\"}],\"name\":\"mintCustom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCost\",\"type\":\"uint256\"}],\"name\":\"setCustomizeCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"decorator\",\"type\":\"address\"}],\"name\":\"setDecorator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMintCost\",\"type\":\"uint256\"}],\"name\":\"setMintCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"renderer\",\"type\":\"address\"}],\"name\":\"setRenderer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"twoMoonsEvent\",\"type\":\"address\"}],\"name\":\"setTwoMoonsEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"starGaze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stats\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"constellation\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"cloudsAt\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"gazes\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"timeZoneOffset\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"colors\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"lastGaze\",\"type\":\"uint48\"},{\"internalType\":\"uint144\",\"name\":\"consolidated\",\"type\":\"uint144\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"systemTimeOffsetWithUser\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"tokensOfOwnerIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"ConsecutiveTransfer(uint256,uint256,address,address)\":{\"details\":\"Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in `owner`'s account.\"},\"explicitOwnershipOf(uint256)\":{\"details\":\"Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds: - `addr = address(0)` - `startTimestamp = 0` - `burned = false` - `extraData = 0` If the `tokenId` is burned: - `addr = <Address of owner before token was burned>` - `startTimestamp = <Timestamp when token was burned>` - `burned = true` - `extraData = <Extra data when token was burned>` Otherwise: - `addr = <Address of owner>` - `startTimestamp = <Timestamp of start of ownership>` - `burned = false` - `extraData = <Extra data at start of ownership>`\"},\"explicitOwnershipsOf(uint256[])\":{\"details\":\"Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}.\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokensOfOwner(address)\":{\"details\":\"Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(`totalSupply`) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K collections should be fine).\"},\"tokensOfOwnerIn(address,uint256,uint256)\":{\"details\":\"Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start < stop`\"},\"totalSupply()\":{\"details\":\"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"InvalidQueryRange()\":[{\"notice\":\"Invalid query range (`start` >= `stop`).\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/chainellations/Chainellation.sol\":\"Chainellation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Color.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary Color {\\n    using Strings for uint256;\\n\\n    // TODO bytepack this and unpack it - probably want utility, but based on usage\\n    struct DNA {\\n        uint16 primaryHue;\\n        uint16 secondaryHue;\\n        uint16 constellation;\\n        uint16 cloudsAt;\\n    }\\n\\n    struct HSL {\\n        uint16 H;\\n        uint16 S;\\n        uint16 L;\\n    }\\n\\n    function HSLtoString(HSL memory color) public pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"hsl(\\\",\\n                    ((uint256)(color.H)).toString(),\\n                    \\\",\\\",\\n                    ((uint256)(color.S)).toString(),\\n                    \\\"%,\\\",\\n                    ((uint256)(color.L)).toString(),\\n                    \\\"%)\\\"\\n                )\\n            );\\n    }\\n\\n    function toString(uint16 num) public pure returns (string memory) {\\n        return ((uint256)(num)).toString();\\n    }\\n\\n    function psuedorandom(\\n        uint256 tokenId,\\n        uint256 nonce\\n    ) public pure returns (uint256) {\\n        return uint(keccak256(abi.encodePacked(tokenId, nonce)));\\n    }\\n\\n    function wiggle(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        uint16 base,\\n        uint16 offset\\n    ) public pure returns (uint16) {\\n        uint16 wiggleAmount = (uint16)(psuedorandom(tokenId, nonce) % offset);\\n        if ((uint8)(psuedorandom(tokenId, nonce) % 2) == 0) {\\n            return base + wiggleAmount;\\n        } else {\\n            return subZero(base, wiggleAmount);\\n        }\\n    }\\n\\n    function wiggleString(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        uint16 base,\\n        uint16 offset\\n    ) public pure returns (string memory) {\\n        return toString(wiggle(tokenId, nonce, base, offset));\\n    }\\n\\n    function wiggleUp(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        uint16 base,\\n        uint16 offset\\n    ) public pure returns (uint16) {\\n        uint16 wiggleAmount = (uint16)(psuedorandom(tokenId, nonce) % offset);\\n        return base + wiggleAmount;\\n    }\\n\\n    function subZero(uint16 first, uint16 second) public pure returns (uint16) {\\n        if (first > second) {\\n            return first - second;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function flipColor(\\n        Color.HSL memory color\\n    ) public pure returns (Color.HSL memory) {\\n        uint16 newH = color.H + 180 > 360 ? color.H - 180 : color.H + 180;\\n        return Color.HSL(newH, color.S, color.L);\\n    }\\n\\n    function rotateColor(\\n        Color.HSL memory color,\\n        uint16 amount\\n    ) public pure returns (Color.HSL memory) {\\n        uint16 hue = (color.H + amount) % 360;\\n        return Color.HSL(hue, color.S, color.L);\\n    }\\n\\n    function genDNA(\\n        uint256 tokenId,\\n        uint32 colors,\\n        uint16 clouds,\\n        uint16 constellation\\n    ) public pure returns (DNA memory) {\\n        DNA memory dna;\\n        // dna.tokenId = tokenId;\\n        dna.primaryHue = uint16(colors >> 16);\\n        dna.secondaryHue = uint16(colors);\\n        // dna.starSeed = psuedorandom(tokenId, 123);\\n        // dna.funkSeed = psuedorandom(tokenId, 234);\\n        // dna.circleSeed = psuedorandom(tokenId, 345);\\n        // dna.groundSeed = psuedorandom(tokenId, 456);\\n        dna.constellation = constellation;\\n        dna.cloudsAt = clouds;\\n\\n        return dna;\\n    }\\n\\n    function defaultColors(uint256 tokenId) public pure returns (uint32) {\\n        uint16 primary = uint16((tokenId % 16) * 10);\\n        uint16 secondary = rotateColor(HSL(primary, 0, 0), 60).H;\\n        return (uint32(primary) << 16) | uint32(secondary);\\n    }\\n}\\n\",\"keccak256\":\"0x4cf680750f0dcd97507cfaf9e74b7baf28d8ea63d9772f3c76de06af144c23da\",\"license\":\"MIT\"},\"contracts/chainellations/Chainellation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\n// import \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n// import \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IChainellationRenderer.sol\\\";\\nimport \\\"../Color.sol\\\";\\nimport \\\"../interfaces/ITwoMoonsEvent.sol\\\";\\nimport \\\"erc721a/contracts/extensions/ERC721AQueryable.sol\\\";\\n\\ncontract Chainellation is ERC721AQueryable, Ownable {\\n    using Strings for uint256;\\n\\n    struct Stats {\\n        uint8 constellation;\\n        uint8 cloudsAt;\\n        uint16 gazes;\\n        uint32 timeZoneOffset;\\n        uint32 colors;\\n        uint48 lastGaze;\\n        uint144 consolidated;\\n    }\\n\\n    uint256 public currentSupply;\\n    uint256 public maxSupply = 15000;\\n\\n    uint256 public mintCost = 0;\\n    uint256 public customizeCost = 0; // 5 * 10 ** 15;\\n\\n    mapping(uint256 => Color.DNA) public dnas;\\n    mapping(uint256 => Stats) public stats;\\n\\n    address private _decorator;\\n    IChainellationRenderer private _renderer;\\n    ITwoMoonsEvent private _twoMoonsEvent;\\n\\n    constructor(address renderer) ERC721A(\\\"chainellation\\\", \\\"STARS\\\") {\\n        _renderer = IChainellationRenderer(renderer);\\n    }\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override(ERC721A, IERC721A) returns (string memory) {\\n        if (tokenId > currentSupply) revert NotMinted();\\n\\n        bytes memory dataURI = abi.encodePacked(\\n            \\\"{\\\",\\n            '\\\"name\\\": \\\"chainellation #',\\n            tokenId.toString(),\\n            '\\\",',\\n            '\\\"description\\\": \\\"chainellation\\\",',\\n            '\\\"image\\\": \\\"',\\n            generateCharacter(tokenId),\\n            '\\\"',\\n            \\\"}\\\"\\n        );\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(dataURI)\\n                )\\n            );\\n    }\\n\\n    function contractURI() public view returns (string memory) {\\n        bytes memory dataURI = abi.encodePacked(\\n            \\\"{\\\",\\n            '\\\"name\\\": \\\"Two Moons Night Skies\\\",',\\n            '\\\"description\\\": \\\"Your window into the Night Sky.  Stargaze to reveal your secret constellation, and customize your view with replacable parts of the image.\\\"',\\n            '\\\"external_url\\\": \\\"https://www.chainellation.com/\\\"',\\n            '\\\"image\\\": \\\"',\\n            generateCharacter(0),\\n            '\\\"',\\n            \\\"}\\\"\\n        );\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(dataURI)\\n                )\\n            );\\n    }\\n\\n    function mint(uint32 timezoneOffset) public payable {\\n        if (msg.value != mintCost) revert Cost();\\n\\n        _mint(timezoneOffset, 0, 0, 0, msg.sender);\\n    }\\n\\n    function mintCustom(\\n        uint32 timezoneOffset,\\n        uint16 firstH,\\n        uint16 secondH,\\n        uint8 _constellation,\\n        uint8 _cloudsAt\\n    ) public payable {\\n        uint256 rollingCost = mintCost;\\n        //370 is not a valid Hue\\n        if (firstH != 370 || secondH != 370) {\\n            rollingCost += customizeCost;\\n        }\\n        if (_constellation != 0) {\\n            rollingCost += customizeCost;\\n        }\\n\\n        if (_cloudsAt != 0) {\\n            rollingCost += customizeCost;\\n        }\\n\\n        if (msg.value != rollingCost) revert Cost();\\n\\n        _mint(\\n            timezoneOffset,\\n            (uint32(firstH) << 16) | uint32(secondH),\\n            _constellation,\\n            _cloudsAt,\\n            msg.sender\\n        );\\n    }\\n\\n    function freeMint(uint32 timezoneOffset) public onlyOwner {\\n        _mint(timezoneOffset, 0, 0, 0, msg.sender);\\n    }\\n\\n    // if the timezone offset is negative, we're gonna pretend like it's a day in the future\\n    // this doesn't matter because the timezone offset is only used to determine the time of day\\n    // and not the actual day.\\n    function _mint(\\n        uint32 _timezoneOffset,\\n        uint32 _colorData,\\n        uint8 _constellation,\\n        uint8 _cloudsAt,\\n        address _to\\n    ) private {\\n        if (currentSupply >= maxSupply) revert MaxSupplyReached();\\n        currentSupply++;\\n\\n        Stats memory current;\\n        current.timeZoneOffset = _timezoneOffset;\\n\\n        // 24248690 is a byte packed 370 + 370, which are the default colors\\n        if (_colorData == 24248690) {\\n            uint16 primary = uint16((currentSupply % 16) * 10);\\n            uint16 secondary = Color\\n                .rotateColor(Color.HSL(primary, 0, 0), 60)\\n                .H;\\n            _colorData = (uint32(primary) << 16) | uint32(secondary);\\n        }\\n\\n        current.colors = _colorData;\\n        if (_constellation > 16) {\\n            _constellation = 0;\\n        }\\n\\n        if (_constellation == 0) {\\n            _constellation = uint8(\\n                (_renderer.psuedorandom(currentSupply, 123) % 15) + 1\\n            );\\n        }\\n\\n        if (_cloudsAt > 5) {\\n            _cloudsAt = 0;\\n        }\\n\\n        if (_cloudsAt == 0) {\\n            _constellation = uint8(\\n                (_renderer.psuedorandom(currentSupply, 321) % 4) + 1\\n            );\\n        }\\n\\n        current.constellation = _constellation;\\n        current.cloudsAt = _cloudsAt;\\n\\n        stats[currentSupply] = current;\\n        _mint(_to, 1);\\n    }\\n\\n    function generateCharacter(\\n        uint256 tokenId\\n    ) public view returns (string memory) {\\n        bytes memory svg = abi.encodePacked(\\n            generateSVG(tokenId, stats[tokenId].gazes, !isNight(tokenId), 0)\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:image/svg+xml;base64,\\\",\\n                    Base64.encode(svg)\\n                )\\n            );\\n    }\\n\\n    function getColors(uint256 tokenId) public view returns (uint32) {\\n        if (stats[tokenId].colors == 0) {\\n            uint16 primary = uint16((tokenId % 16) * 10);\\n            uint16 secondary = Color\\n                .rotateColor(Color.HSL(primary, 0, 0), 60)\\n                .H;\\n            return (uint32(primary) << 16) | uint32(secondary);\\n        } else {\\n            return stats[tokenId].colors;\\n        }\\n    }\\n\\n    function getConstellation(uint256 tokenId) public view returns (uint8) {\\n        if (stats[tokenId].constellation == 0) {\\n            return uint8(_renderer.psuedorandom(tokenId, 123) % 15) + 1;\\n        } else {\\n            return stats[tokenId].constellation;\\n        }\\n    }\\n\\n    function getCloudsAt(uint256 tokenId) public view returns (uint8) {\\n        if (stats[tokenId].cloudsAt == 0) {\\n            return uint8(_renderer.psuedorandom(tokenId, 321) % 4) + 1;\\n        } else {\\n            return stats[tokenId].cloudsAt;\\n        }\\n    }\\n\\n    function generateSVG(\\n        uint256 _tokenId,\\n        uint256 _gazed,\\n        bool _sunUp,\\n        uint8 testConstellation\\n    ) public view returns (string memory) {\\n        return\\n            _renderer.generateSVG(\\n                _tokenId,\\n                Color.genDNA(\\n                    _tokenId,\\n                    getColors(_tokenId),\\n                    getCloudsAt(_tokenId),\\n                    testConstellation == 0\\n                        ? getConstellation(_tokenId)\\n                        : testConstellation\\n                ),\\n                _gazed,\\n                _sunUp,\\n                _decorator\\n            );\\n    }\\n\\n    function starGaze(uint256 tokenId) public {\\n        if (ownerOf(tokenId) != msg.sender) revert NotTheOwner();\\n        if (!isNight(tokenId)) revert NotNight();\\n        if (\\n            systemTimeOffsetWithUser(tokenId) - stats[tokenId].lastGaze <\\n            14 hours\\n        ) revert NotEnoughTimePassed();\\n        stats[tokenId].gazes = stats[tokenId].gazes + 1;\\n        stats[tokenId].lastGaze = systemTimeOffsetWithUser(tokenId);\\n        if (address(_twoMoonsEvent) != address(0)) {\\n            ITwoMoonsEvent(_twoMoonsEvent).onStargaze(\\n                tokenId,\\n                stats[tokenId].gazes\\n            );\\n        }\\n    }\\n\\n    function gazeBatch(uint256[] calldata tokenIds) public {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            starGaze(tokenIds[i]);\\n        }\\n    }\\n\\n    function reset(uint256 tokenId) public {\\n        if (ownerOf(tokenId) != msg.sender) revert NotTheOwner();\\n        stats[tokenId].gazes = 0;\\n        // gazes[tokenId] = 0;\\n    }\\n\\n    function setMaxSupply(uint256 _maxSupply) public onlyOwner {\\n        maxSupply = _maxSupply;\\n    }\\n\\n    function setMintCost(uint256 _newMintCost) public onlyOwner {\\n        mintCost = _newMintCost;\\n    }\\n\\n    function setCustomizeCost(uint256 _newCost) public onlyOwner {\\n        customizeCost = _newCost;\\n    }\\n\\n    function setDecorator(address decorator) public onlyOwner {\\n        _decorator = decorator;\\n    }\\n\\n    function setTwoMoonsEvent(address twoMoonsEvent) public onlyOwner {\\n        _twoMoonsEvent = ITwoMoonsEvent(twoMoonsEvent);\\n    }\\n\\n    function setRenderer(address renderer) public onlyOwner {\\n        _renderer = IChainellationRenderer(renderer);\\n    }\\n\\n    function systemTimeOffsetWithUser(\\n        uint256 tokenId\\n    ) public view virtual returns (uint48) {\\n        return (uint48)(block.timestamp + (stats[tokenId].timeZoneOffset));\\n        // return (uint48)(block.timestamp + (timeZoneOffset[tokenId]));\\n    }\\n\\n    function isNight(uint256 tokenId) public view returns (bool) {\\n        uint8 hour = (uint8)(\\n            (systemTimeOffsetWithUser(tokenId) / 60 / 60) % 24\\n        );\\n        return hour < 6 || hour > 18;\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        payable(address(_msgSenderERC721A())).transfer(address(this).balance);\\n    }\\n\\n    function withdrawToken(\\n        address _tokenContract,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        IERC20(_tokenContract).transfer(msg.sender, _amount);\\n    }\\n\\n    function _startTokenId() internal view override returns (uint256) {\\n        return 1;\\n    }\\n\\n    error NotTheOwner();\\n    error NotEnoughTimePassed();\\n    error MaxSupplyReached();\\n    error NotNight();\\n    error Cost();\\n    error TooCloudy();\\n    error NotMinted();\\n\\n    // //------------------------------------------------------ Solidity Overrides\\n    // function _beforeTokenTransfer(\\n    //     address from,\\n    //     address to,\\n    //     uint256 tokenId,\\n    //     uint256 batchSize\\n    // ) internal override(ERC721, ERC721Enumerable) {\\n    //     super._beforeTokenTransfer(from, to, tokenId, batchSize);\\n    // }\\n\\n    // function supportsInterface(\\n    //     bytes4 interfaceId\\n    // ) public view override(ERC721, ERC721Enumerable) returns (bool) {\\n    //     return super.supportsInterface(interfaceId);\\n    // }\\n}\\n\\ninterface IERC20 {\\n    function transfer(address _to, uint256 _amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4be6fca4deda5b90d51fdd5b4adfdf6989c2d7bcd7c16339b537271163a2e335\",\"license\":\"MIT\"},\"contracts/interfaces/IChainellationRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"../Color.sol\\\";\\n\\ninterface IChainellationRenderer {\\n    function generateSVG(\\n        uint256 tokenId,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime,\\n        address decorator\\n    ) external view returns (string memory);\\n\\n    function subZero(\\n        uint16 first,\\n        uint16 second\\n    ) external pure returns (uint16);\\n\\n    function psuedorandom(\\n        uint256 tokenId,\\n        uint256 nonce\\n    ) external pure returns (uint256);\\n}\\n\",\"keccak256\":\"0x159bd405339874272426ea404c9e33ba6c7c5ac17af238dcde3348d41a106cf7\",\"license\":\"MIT\"},\"contracts/interfaces/ITwoMoonsEvent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\ninterface ITwoMoonsEvent {\\n    function onStargaze(uint256 tokenId, uint256 gazes) external;\\n}\\n\",\"keccak256\":\"0x1cfedda0e66dd1e324a8305e3270d8bfd2c7a9a9c7d5b522ce9fca8c8af52451\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                            STORAGE\\n    // =============================================================\\n\\n    // The next token ID to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See {_packedOwnershipOf} implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & _BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an initialized ownership slot\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                        // before an unintialized ownership slot\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                        // Hence, `curr` will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed will be zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\n            // The assembly, together with the surrounding Solidity code, have been\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n                // The compiler will optimize the `iszero` away for performance.\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23116c16976b7d8c0c714ba1b38ae6b16c16fc90ec69b568fb1ebf1bc063e01c\",\"license\":\"MIT\"},\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xa31dfe2635a25f899e279befef27ffcc02fd16e636c58d4c251a303f2355f7ad\",\"license\":\"MIT\"},\"erc721a/contracts/extensions/ERC721AQueryable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721AQueryable.sol';\\nimport '../ERC721A.sol';\\n\\n/**\\n * @title ERC721AQueryable.\\n *\\n * @dev ERC721A subclass with convenience query functions.\\n */\\nabstract contract ERC721AQueryable is ERC721A, IERC721AQueryable {\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) public view virtual override returns (TokenOwnership memory) {\\n        TokenOwnership memory ownership;\\n        if (tokenId < _startTokenId() || tokenId >= _nextTokenId()) {\\n            return ownership;\\n        }\\n        ownership = _ownershipAt(tokenId);\\n        if (ownership.burned) {\\n            return ownership;\\n        }\\n        return _ownershipOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] calldata tokenIds)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (TokenOwnership[] memory)\\n    {\\n        unchecked {\\n            uint256 tokenIdsLength = tokenIds.length;\\n            TokenOwnership[] memory ownerships = new TokenOwnership[](tokenIdsLength);\\n            for (uint256 i; i != tokenIdsLength; ++i) {\\n                ownerships[i] = explicitOwnershipOf(tokenIds[i]);\\n            }\\n            return ownerships;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view virtual override returns (uint256[] memory) {\\n        unchecked {\\n            if (start >= stop) revert InvalidQueryRange();\\n            uint256 tokenIdsIdx;\\n            uint256 stopLimit = _nextTokenId();\\n            // Set `start = max(start, _startTokenId())`.\\n            if (start < _startTokenId()) {\\n                start = _startTokenId();\\n            }\\n            // Set `stop = min(stop, stopLimit)`.\\n            if (stop > stopLimit) {\\n                stop = stopLimit;\\n            }\\n            uint256 tokenIdsMaxLength = balanceOf(owner);\\n            // Set `tokenIdsMaxLength = min(balanceOf(owner), stop - start)`,\\n            // to cater for cases where `balanceOf(owner)` is too big.\\n            if (start < stop) {\\n                uint256 rangeLength = stop - start;\\n                if (rangeLength < tokenIdsMaxLength) {\\n                    tokenIdsMaxLength = rangeLength;\\n                }\\n            } else {\\n                tokenIdsMaxLength = 0;\\n            }\\n            uint256[] memory tokenIds = new uint256[](tokenIdsMaxLength);\\n            if (tokenIdsMaxLength == 0) {\\n                return tokenIds;\\n            }\\n            // We need to call `explicitOwnershipOf(start)`,\\n            // because the slot at `start` may not be initialized.\\n            TokenOwnership memory ownership = explicitOwnershipOf(start);\\n            address currOwnershipAddr;\\n            // If the starting slot exists (i.e. not burned), initialize `currOwnershipAddr`.\\n            // `ownership.address` will not be zero, as `start` is clamped to the valid token ID range.\\n            if (!ownership.burned) {\\n                currOwnershipAddr = ownership.addr;\\n            }\\n            for (uint256 i = start; i != stop && tokenIdsIdx != tokenIdsMaxLength; ++i) {\\n                ownership = _ownershipAt(i);\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            // Downsize the array to fit.\\n            assembly {\\n                mstore(tokenIds, tokenIdsIdx)\\n            }\\n            return tokenIds;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view virtual override returns (uint256[] memory) {\\n        unchecked {\\n            uint256 tokenIdsIdx;\\n            address currOwnershipAddr;\\n            uint256 tokenIdsLength = balanceOf(owner);\\n            uint256[] memory tokenIds = new uint256[](tokenIdsLength);\\n            TokenOwnership memory ownership;\\n            for (uint256 i = _startTokenId(); tokenIdsIdx != tokenIdsLength; ++i) {\\n                ownership = _ownershipAt(i);\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            return tokenIds;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xad83a36e9758f044317e9a5e2903bc49730b6d5de8fbe9a61b2f91fb4c2148c7\",\"license\":\"MIT\"},\"erc721a/contracts/extensions/IERC721AQueryable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721AQueryable.\\n */\\ninterface IERC721AQueryable is IERC721A {\\n    /**\\n     * Invalid query range (`start` >= `stop`).\\n     */\\n    error InvalidQueryRange();\\n\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xc14fc938aecdccee7edbd3a3ce60b6171cdc3da3345cfa6d288c268983c48942\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052613a98600a556000600b556000600c553480156200002157600080fd5b5060405162003a8d38038062003a8d833981016040819052620000449162000133565b6040518060400160405280600d81526020016c31b430b4b732b63630ba34b7b760991b81525060405180604001604052806005815260200164535441525360d81b81525081600290816200009991906200020a565b506003620000a882826200020a565b5050600160005550620000bb33620000e1565b601080546001600160a01b0319166001600160a01b0392909216919091179055620002d6565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156200014657600080fd5b81516001600160a01b03811681146200015e57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200019057607f821691505b602082108103620001b157634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200020557600081815260208120601f850160051c81016020861015620001e05750805b601f850160051c820191505b818110156200020157828155600101620001ec565b5050505b505050565b81516001600160401b0381111562000226576200022662000165565b6200023e816200023784546200017b565b84620001b7565b602080601f8311600181146200027657600084156200025d5750858301515b600019600386901b1c1916600185901b17855562000201565b600085815260208120601f198616915b82811015620002a75788860151825594840194600190910190840162000286565b5085821015620002c65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6137a780620002e66000396000f3fe60806040526004361061031e5760003560e01c80638545f4ea116101a5578063c230a8d5116100ec578063d9be414511610095578063e985e9c51161006f578063e985e9c5146109df578063ee7e418b14610a28578063f2fde38b14610a48578063f311968214610a6857600080fd5b8063d9be41451461098a578063dbea4da7146109aa578063e8a3d485146109ca57600080fd5b8063c87b56dd116100c6578063c87b56dd14610934578063cbcb0a7a14610954578063d5abeb011461097457600080fd5b8063c230a8d5146108c7578063c23dc68f146108e7578063c37006201461091457600080fd5b8063a22cb4651161014e578063ad217ae511610128578063ad217ae5146107a7578063b88d4fde1461089e578063bdb4b848146108b157600080fd5b8063a22cb46514610761578063a6a2728514610781578063a71bbebe1461079457600080fd5b806395d89b411161017f57806395d89b411461070c57806399a2557a146107215780639e281a981461074157600080fd5b80638545f4ea146106975780638850504a146106b75780638da5cb5b146106ee57600080fd5b806342842e0e11610269578063715018a6116102125780637fc97616116101ec5780637fc976161461062a5780638462151c1461064a5780638526214c1461067757600080fd5b8063715018a6146105e9578063771282f6146105fe578063794544401461061457600080fd5b80636352211e116102435780636352211e146105895780636f8b44b0146105a957806370a08231146105c957600080fd5b806342842e0e1461052957806356d3163d1461053c5780635bbb21771461055c57600080fd5b80631d3cde03116102cb57806332fdf2d7116102a557806332fdf2d71461047357806334e80ea3146104935780633ccfd60b1461051457600080fd5b80631d3cde031461040e57806323b872dd14610440578063310bd74b1461045357600080fd5b8063095ea7b3116102fc578063095ea7b3146103b25780630daefed5146103c757806318160ddd146103e757600080fd5b806301ffc9a71461032357806306fdde0314610358578063081812fc1461037a575b600080fd5b34801561032f57600080fd5b5061034361033e366004612b3c565b610a9d565b60405190151581526020015b60405180910390f35b34801561036457600080fd5b5061036d610b3a565b60405161034f9190612ba9565b34801561038657600080fd5b5061039a610395366004612bbc565b610bcc565b6040516001600160a01b03909116815260200161034f565b6103c56103c0366004612bec565b610c29565b005b3480156103d357600080fd5b5061036d6103e2366004612bbc565b610ce2565b3480156103f357600080fd5b5060015460005403600019015b60405190815260200161034f565b34801561041a57600080fd5b5061042e610429366004612bbc565b610d67565b60405160ff909116815260200161034f565b6103c561044e366004612c16565b610e2f565b34801561045f57600080fd5b506103c561046e366004612bbc565b611014565b34801561047f57600080fd5b506103c561048e366004612c52565b611060565b34801561049f57600080fd5b506104e66104ae366004612bbc565b600d6020526000908152604090205461ffff808216916201000081048216916401000000008204811691660100000000000090041684565b6040805161ffff9586168152938516602085015291841691830191909152909116606082015260800161034f565b34801561052057600080fd5b506103c56110a3565b6103c5610537366004612c16565b6110da565b34801561054857600080fd5b506103c5610557366004612cc7565b6110f5565b34801561056857600080fd5b5061057c610577366004612c52565b61111f565b60405161034f9190612ce2565b34801561059557600080fd5b5061039a6105a4366004612bbc565b6111eb565b3480156105b557600080fd5b506103c56105c4366004612bbc565b6111f6565b3480156105d557600080fd5b506104006105e4366004612cc7565b611203565b3480156105f557600080fd5b506103c561126b565b34801561060a57600080fd5b5061040060095481565b34801561062057600080fd5b50610400600c5481565b34801561063657600080fd5b5061042e610645366004612bbc565b61127f565b34801561065657600080fd5b5061066a610665366004612cc7565b6112e6565b60405161034f9190612d5f565b34801561068357600080fd5b506103c5610692366004612cc7565b6113ea565b3480156106a357600080fd5b506103c56106b2366004612bbc565b611414565b3480156106c357600080fd5b506106d76106d2366004612bbc565b611421565b60405165ffffffffffff909116815260200161034f565b3480156106fa57600080fd5b506008546001600160a01b031661039a565b34801561071857600080fd5b5061036d611448565b34801561072d57600080fd5b5061066a61073c366004612d97565b611457565b34801561074d57600080fd5b506103c561075c366004612bec565b6115f8565b34801561076d57600080fd5b506103c561077c366004612dd8565b61168a565b6103c561078f366004612e44565b6116f6565b6103c56107a2366004612ead565b611798565b3480156107b357600080fd5b5061083a6107c2366004612bbc565b600e602052600090815260409020805460019091015460ff8083169261010081049091169161ffff620100008304169163ffffffff64010000000082048116926801000000000000000083049091169165ffffffffffff600160601b909104169071ffffffffffffffffffffffffffffffffffff1687565b6040805160ff988916815297909616602088015261ffff9094169486019490945263ffffffff918216606086015216608084015265ffffffffffff90911660a083015271ffffffffffffffffffffffffffffffffffff1660c082015260e00161034f565b6103c56108ac366004612f37565b6117c9565b3480156108bd57600080fd5b50610400600b5481565b3480156108d357600080fd5b5061036d6108e2366004612fe2565b611813565b3480156108f357600080fd5b50610907610902366004612bbc565b6119ae565b60405161034f919061302a565b34801561092057600080fd5b5061034361092f366004612bbc565b611a36565b34801561094057600080fd5b5061036d61094f366004612bbc565b611a82565b34801561096057600080fd5b506103c561096f366004612bbc565b611b0f565b34801561098057600080fd5b50610400600a5481565b34801561099657600080fd5b506103c56109a5366004612cc7565b611d35565b3480156109b657600080fd5b506103c56109c5366004612ead565b611d5f565b3480156109d657600080fd5b5061036d611d67565b3480156109eb57600080fd5b506103436109fa36600461306f565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b348015610a3457600080fd5b506103c5610a43366004612bbc565b611dc4565b348015610a5457600080fd5b506103c5610a63366004612cc7565b611dd1565b348015610a7457600080fd5b50610a88610a83366004612bbc565b611e63565b60405163ffffffff909116815260200161034f565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161480610b0057507f80ac58cd000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b80610b3457507f5b5e139f000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b606060028054610b49906130a2565b80601f0160208091040260200160405190810160405280929190818152602001828054610b75906130a2565b8015610bc25780601f10610b9757610100808354040283529160200191610bc2565b820191906000526020600020905b815481529060010190602001808311610ba557829003601f168201915b5050505050905090565b6000610bd782611f9c565b610c0d576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6000610c34826111eb565b9050336001600160a01b03821614610c8657610c5081336109fa565b610c86576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000818152600e602052604081205460609190610d1690849062010000900461ffff16610d0e82611a36565b156000611813565b604051602001610d2691906130dc565b6040516020818303038152906040529050610d4081611fd1565b604051602001610d5091906130f8565b604051602081830303815290604052915050919050565b6000818152600e6020526040812054610100900460ff168103610e0f57601054604051633a20c87960e01b815260048082018590526101416024830152916001600160a01b031690633a20c879906044015b602060405180830381865afa158015610dd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfa919061313d565b610e04919061316c565b610b34906001613196565b506000908152600e6020526040902054610100900460ff1690565b919050565b6000610e3a82612124565b9050836001600160a01b0316816001600160a01b031614610e87576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008281526006602052604090208054338082146001600160a01b03881690911417610eed57610eb786336109fa565b610eed576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038516610f2d576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8015610f3857600082555b6001600160a01b038681166000908152600560205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260046020526040812091909155600160e11b84169003610fca57600184016000818152600460205260408120549003610fc8576000548114610fc85760008181526004602052604090208490555b505b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b505050505050565b3361101e826111eb565b6001600160a01b031614611045576040516336b6b89560e01b815260040160405180910390fd5b6000908152600e60205260409020805463ffff000019169055565b60005b8181101561109e5761108c838383818110611080576110806131af565b90506020020135611b0f565b80611096816131c5565b915050611063565b505050565b6110ab6121ac565b60405133904780156108fc02916000818181858888f193505050501580156110d7573d6000803e3d6000fd5b50565b61109e838383604051806020016040528060008152506117c9565b6110fd6121ac565b601080546001600160a01b0319166001600160a01b0392909216919091179055565b60608160008167ffffffffffffffff81111561113d5761113d612ec8565b60405190808252806020026020018201604052801561118f57816020015b60408051608081018252600080825260208083018290529282018190526060820152825260001990920191018161115b5790505b50905060005b8281146111e2576111bd8686838181106111b1576111b16131af565b905060200201356119ae565b8282815181106111cf576111cf6131af565b6020908102919091010152600101611195565b50949350505050565b6000610b3482612124565b6111fe6121ac565b600a55565b60006001600160a01b038216611245576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b6112736121ac565b61127d6000612206565b565b6000818152600e602052604081205460ff1681036112d057601054604051633a20c87960e01b815260048101849052607b6024820152600f916001600160a01b031690633a20c87990604401610db9565b506000908152600e602052604090205460ff1690565b606060008060006112f685611203565b905060008167ffffffffffffffff81111561131357611313612ec8565b60405190808252806020026020018201604052801561133c578160200160208202803683370190505b5060408051608081018252600080825260208201819052918101829052606081019190915290915060015b8386146113de5761137781612258565b915081604001516113d65781516001600160a01b03161561139757815194505b876001600160a01b0316856001600160a01b0316036113d657808387806001019850815181106113c9576113c96131af565b6020026020010181815250505b600101611367565b50909695505050505050565b6113f26121ac565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b61141c6121ac565b600b55565b6000818152600e6020526040812054610b3490640100000000900463ffffffff16426131de565b606060038054610b49906130a2565b6060818310611492576040517f32c1995a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061149e60005490565b905060018510156114ae57600194505b808411156114ba578093505b60006114c587611203565b9050848610156114e457858503818110156114de578091505b506114e8565b5060005b60008167ffffffffffffffff81111561150357611503612ec8565b60405190808252806020026020018201604052801561152c578160200160208202803683370190505b509050816000036115425793506115f192505050565b600061154d886119ae565b90506000816040015161155e575080515b885b8881141580156115705750848714155b156115e55761157e81612258565b925082604001516115dd5782516001600160a01b03161561159e57825191505b8a6001600160a01b0316826001600160a01b0316036115dd57808488806001019950815181106115d0576115d06131af565b6020026020010181815250505b600101611560565b50505092835250909150505b9392505050565b6116006121ac565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af1158015611666573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109e91906131f1565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600b5461017261ffff861614158061171457508361ffff1661017214155b1561172957600c5461172690826131de565b90505b60ff83161561174257600c5461173f90826131de565b90505b60ff82161561175b57600c5461175890826131de565b90505b80341461177b57604051633d8f14cf60e21b815260040160405180910390fd5b61100c8663ffff0000601088901b1661ffff8716178585336122d7565b600b5434146117ba57604051633d8f14cf60e21b815260040160405180910390fd5b6110d7816000806000336122d7565b6117d4848484610e2f565b6001600160a01b0383163b1561180d576117f084848484612713565b61180d576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b6010546060906001600160a01b031663c7124fb786735FbDB2315678afecb367f032d93F642f64180aa363974bec188261184c81611e63565b6118558c610d67565b60ff8a1615611864578961186d565b61186d8d61127f565b6040516001600160e01b031960e087901b168152600481019490945263ffffffff92909216602484015260ff9081166044840152166064820152608401608060405180830381865af41580156118c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118eb919061320e565b600f546040805160e086901b6001600160e01b03191681526004810194909452825161ffff90811660248601526020840151811660448601529083015181166064850152606090920151909116608483015260a4820188905286151560c48301526001600160a01b031660e482015261010401600060405180830381865afa15801561197b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119a39190810190613293565b90505b949350505050565b6040805160808101825260008082526020820181905291810182905260608101919091526040805160808101825260008082526020820181905291810182905260608101919091526001831080611a0757506000548310155b15611a125792915050565b611a1b83612258565b9050806040015115611a2d5792915050565b6115f1836127fb565b6000806018603c80611a4786611421565b611a51919061330a565b611a5b919061330a565b611a65919061332f565b905060068160ff1610806115f1575060128160ff16119392505050565b6060600954821115611ac0576040517f4d5e5fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611acb83612873565b611ad484610ce2565b604051602001611ae5929190613354565b6040516020818303038152906040529050611aff81611fd1565b604051602001610d509190613430565b33611b19826111eb565b6001600160a01b031614611b40576040516336b6b89560e01b815260040160405180910390fd5b611b4981611a36565b611b7f576040517f42cc741200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000818152600e602052604090205461c4e090600160601b900465ffffffffffff16611baa83611421565b611bb49190613475565b65ffffffffffff161015611bf4576040517f5ada9a9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000818152600e6020526040902054611c189062010000900461ffff16600161349b565b6000828152600e60205260409020805461ffff92909216620100000263ffff000019909216919091179055611c4c81611421565b6000828152600e60205260409020805465ffffffffffff92909216600160601b0271ffffffffffff000000000000000000000000199092169190911790556011546001600160a01b0316156110d7576011546000828152600e6020526040908190205490517fdcb34eb2000000000000000000000000000000000000000000000000000000008152600481018490526201000090910461ffff1660248201526001600160a01b039091169063dcb34eb290604401600060405180830381600087803b158015611d1a57600080fd5b505af1158015611d2e573d6000803e3d6000fd5b5050505050565b611d3d6121ac565b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b6117ba6121ac565b60606000611d756000610ce2565b604051602001611d8591906134b6565b6040516020818303038152906040529050611d9f81611fd1565b604051602001611daf9190613430565b60405160208183030381529060405291505090565b611dcc6121ac565b600c55565b611dd96121ac565b6001600160a01b038116611e5a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6110d781612206565b6000818152600e602052604081205468010000000000000000900463ffffffff168103611f77576000611e9760108461316c565b611ea290600a61363b565b6040805160608101825261ffff83811682526000602083018181528385018281529451631b21034b60e31b815293518316600485015251821660248401529251166044820152603c606482015291925090735FbDB2315678afecb367f032d93F642f64180aa39063d9081a5890608401606060405180830381865af4158015611f2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f539190613652565b6000015190508061ffff1660108361ffff1663ffffffff16901b1792505050919050565b506000908152600e602052604090205468010000000000000000900463ffffffff1690565b600081600111158015611fb0575060005482105b8015610b34575050600090815260046020526040902054600160e01b161590565b60608151600003611ff057505060408051602081019091526000815290565b6000604051806060016040528060408152602001613732604091399050600060038451600261201f91906131de565b61202991906136c4565b61203490600461363b565b67ffffffffffffffff81111561204c5761204c612ec8565b6040519080825280601f01601f191660200182016040528015612076576020820181803683370190505b509050600182016020820185865187015b808210156120e2576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845350600183019250612087565b50506003865106600181146120fe576002811461211157612119565b603d6001830353603d6002830353612119565b603d60018303535b509195945050505050565b6000818060011161217a5760005481101561217a5760008181526004602052604081205490600160e01b82169003612178575b806000036115f1575060001901600081815260046020526040902054612157565b505b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6008546001600160a01b0316331461127d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611e51565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516080810182526000808252602082018190529181018290526060810191909152600082815260046020526040902054610b3490604080516080810182526001600160a01b038316815260a083901c67ffffffffffffffff166020820152600160e01b831615159181019190915260e89190911c606082015290565b600a5460095410612314576040517fd05cb60900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60098054906000612324836131c5565b90915550506040805160e0810182526000808252602082018190529181018290526080810182905260a0810182905260c081019190915263ffffffff868116606083015285166301720172036124615760006010600954612385919061316c565b61239090600a61363b565b6040805160608101825261ffff83811682526000602083018181528385018281529451631b21034b60e31b815293518316600485015251821660248401529251166044820152603c606482015291925090735FbDB2315678afecb367f032d93F642f64180aa39063d9081a5890608401606060405180830381865af415801561241d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124419190613652565b6000015190508061ffff1660108361ffff1663ffffffff16901b17965050505b63ffffffff85166080820152601060ff8516111561247e57600093505b8360ff1660000361251a57601054600954604051633a20c87960e01b81526004810191909152607b6024820152600f916001600160a01b031690633a20c87990604401602060405180830381865afa1580156124de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612502919061313d565b61250c919061316c565b6125179060016131de565b93505b60058360ff16111561252b57600092505b8260ff166000036125c857601054600954604051633a20c87960e01b8152600480820192909252610141602482015290916001600160a01b031690633a20c87990604401602060405180830381865afa15801561258c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b0919061313d565b6125ba919061316c565b6125c59060016131de565b93505b60ff808516825283811660208084019182526009546000908152600e909152604090819020845181549351928601516060870151608088015160a089015165ffffffffffff16600160601b0271ffffffffffff0000000000000000000000001963ffffffff9283166801000000000000000002167fffffffffffffffffffffffffffff00000000000000000000ffffffffffffffff929093166401000000000267ffffffff000000001961ffff90951662010000029490941667ffffffffffff000019978a166101000261ffff19909916959099169490941796909617949094169590951794909417929092161791909117815560c08201516001918201805471ffffffffffffffffffffffffffffffffffff9092167fffffffffffffffffffffffffffff00000000000000000000000000000000000090921691909117905561100c908390612913565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906127489033908990889088906004016136d8565b6020604051808303816000875af1925050508015612783575060408051601f3d908101601f1916820190925261278091810190613714565b60015b6127e1573d8080156127b1576040519150601f19603f3d011682016040523d82523d6000602084013e6127b6565b606091505b5080516000036127d9576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506119a6565b604080516080810182526000808252602082018190529181018290526060810191909152610b3461282b83612124565b604080516080810182526001600160a01b038316815260a083901c67ffffffffffffffff166020820152600160e01b831615159181019190915260e89190911c606082015290565b6060600061288083612a44565b600101905060008167ffffffffffffffff8111156128a0576128a0612ec8565b6040519080825280601f01601f1916602001820160405280156128ca576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846128d457509392505050565b6000805490829003612951576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03831660008181526005602090815260408083208054680100000000000000018802019055848352600490915281206001851460e11b4260a01b178317905582840190839083907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4600183015b818114612a0057808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a46001016129c8565b5081600003612a3b576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005550505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612a8d577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310612ab9576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310612ad757662386f26fc10000830492506010015b6305f5e1008310612aef576305f5e100830492506008015b6127108310612b0357612710830492506004015b60648310612b15576064830492506002015b600a8310610b345760010192915050565b6001600160e01b0319811681146110d757600080fd5b600060208284031215612b4e57600080fd5b81356115f181612b26565b60005b83811015612b74578181015183820152602001612b5c565b50506000910152565b60008151808452612b95816020860160208601612b59565b601f01601f19169290920160200192915050565b6020815260006115f16020830184612b7d565b600060208284031215612bce57600080fd5b5035919050565b80356001600160a01b0381168114610e2a57600080fd5b60008060408385031215612bff57600080fd5b612c0883612bd5565b946020939093013593505050565b600080600060608486031215612c2b57600080fd5b612c3484612bd5565b9250612c4260208501612bd5565b9150604084013590509250925092565b60008060208385031215612c6557600080fd5b823567ffffffffffffffff80821115612c7d57600080fd5b818501915085601f830112612c9157600080fd5b813581811115612ca057600080fd5b8660208260051b8501011115612cb557600080fd5b60209290920196919550909350505050565b600060208284031215612cd957600080fd5b6115f182612bd5565b6020808252825182820181905260009190848201906040850190845b818110156113de57612d4c8385516001600160a01b03815116825267ffffffffffffffff602082015116602083015260408101511515604083015262ffffff60608201511660608301525050565b9284019260809290920191600101612cfe565b6020808252825182820181905260009190848201906040850190845b818110156113de57835183529284019291840191600101612d7b565b600080600060608486031215612dac57600080fd5b612db584612bd5565b95602085013595506040909401359392505050565b80151581146110d757600080fd5b60008060408385031215612deb57600080fd5b612df483612bd5565b91506020830135612e0481612dca565b809150509250929050565b803563ffffffff81168114610e2a57600080fd5b61ffff811681146110d757600080fd5b803560ff81168114610e2a57600080fd5b600080600080600060a08688031215612e5c57600080fd5b612e6586612e0f565b94506020860135612e7581612e23565b93506040860135612e8581612e23565b9250612e9360608701612e33565b9150612ea160808701612e33565b90509295509295909350565b600060208284031215612ebf57600080fd5b6115f182612e0f565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612f0757612f07612ec8565b604052919050565b600067ffffffffffffffff821115612f2957612f29612ec8565b50601f01601f191660200190565b60008060008060808587031215612f4d57600080fd5b612f5685612bd5565b9350612f6460208601612bd5565b925060408501359150606085013567ffffffffffffffff811115612f8757600080fd5b8501601f81018713612f9857600080fd5b8035612fab612fa682612f0f565b612ede565b818152886020838501011115612fc057600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b60008060008060808587031215612ff857600080fd5b8435935060208501359250604085013561301181612dca565b915061301f60608601612e33565b905092959194509250565b81516001600160a01b0316815260208083015167ffffffffffffffff169082015260408083015115159082015260608083015162ffffff169082015260808101610b34565b6000806040838503121561308257600080fd5b61308b83612bd5565b915061309960208401612bd5565b90509250929050565b600181811c908216806130b657607f821691505b6020821081036130d657634e487b7160e01b600052602260045260246000fd5b50919050565b600082516130ee818460208701612b59565b9190910192915050565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081526000825161313081601a850160208701612b59565b91909101601a0192915050565b60006020828403121561314f57600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b60008261317b5761317b613156565b500690565b634e487b7160e01b600052601160045260246000fd5b60ff8181168382160190811115610b3457610b34613180565b634e487b7160e01b600052603260045260246000fd5b6000600182016131d7576131d7613180565b5060010190565b80820180821115610b3457610b34613180565b60006020828403121561320357600080fd5b81516115f181612dca565b60006080828403121561322057600080fd5b6040516080810181811067ffffffffffffffff8211171561324357613243612ec8565b604052825161325181612e23565b8152602083015161326181612e23565b6020820152604083015161327481612e23565b6040820152606083015161328781612e23565b60608201529392505050565b6000602082840312156132a557600080fd5b815167ffffffffffffffff8111156132bc57600080fd5b8201601f810184136132cd57600080fd5b80516132db612fa682612f0f565b8181528560208385010111156132f057600080fd5b613301826020830160208601612b59565b95945050505050565b600065ffffffffffff8084168061332357613323613156565b92169190910492915050565b600065ffffffffffff8084168061334857613348613156565b92169190910692915050565b607b60f81b81527f226e616d65223a2022636861696e656c6c6174696f6e20230000000000000000600182015260008351613396816019850160208801612b59565b7f222c0000000000000000000000000000000000000000000000000000000000006019918401918201527f226465736372697074696f6e223a2022636861696e656c6c6174696f6e222c00601b820152691134b6b0b3b2911d101160b11b603a820152835161340c816044840160208801612b59565b601160f91b60449290910191820152607d60f81b6045820152604601949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161346881601d850160208701612b59565b91909101601d0192915050565b65ffffffffffff82811682821603908082111561349457613494613180565b5092915050565b61ffff81811683821601908082111561349457613494613180565b607b60f81b81527f226e616d65223a202254776f204d6f6f6e73204e6967687420536b696573222c60018201527f226465736372697074696f6e223a2022596f75722077696e646f7720696e746f60218201527f20746865204e6967687420536b792e20205374617267617a6520746f2072657660418201527f65616c20796f75722073656372657420636f6e7374656c6c6174696f6e2c206160618201527f6e6420637573746f6d697a6520796f757220766965772077697468207265706c60818201527f616361626c65207061727473206f662074686520696d6167652e22000000000060a18201527f2265787465726e616c5f75726c223a202268747470733a2f2f7777772e63686160bc8201527f696e656c6c6174696f6e2e636f6d2f220000000000000000000000000000000060dc820152691134b6b0b3b2911d101160b11b60ec820152600082516136158160f6850160208701612b59565b6119a661362e60f683860101601160f91b815260010190565b607d60f81b815260010190565b8082028115828204841417610b3457610b34613180565b60006060828403121561366457600080fd5b6040516060810181811067ffffffffffffffff8211171561368757613687612ec8565b604052825161369581612e23565b815260208301516136a581612e23565b602082015260408301516136b881612e23565b60408201529392505050565b6000826136d3576136d3613156565b500490565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261370a6080830184612b7d565b9695505050505050565b60006020828403121561372657600080fd5b81516115f181612b2656fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122081707cf38ec09ddb12ddeeb26d39d2bd977c293868b3998a174f285de7ce973d64736f6c63430008120033",
  "deployedBytecode": "0x60806040526004361061031e5760003560e01c80638545f4ea116101a5578063c230a8d5116100ec578063d9be414511610095578063e985e9c51161006f578063e985e9c5146109df578063ee7e418b14610a28578063f2fde38b14610a48578063f311968214610a6857600080fd5b8063d9be41451461098a578063dbea4da7146109aa578063e8a3d485146109ca57600080fd5b8063c87b56dd116100c6578063c87b56dd14610934578063cbcb0a7a14610954578063d5abeb011461097457600080fd5b8063c230a8d5146108c7578063c23dc68f146108e7578063c37006201461091457600080fd5b8063a22cb4651161014e578063ad217ae511610128578063ad217ae5146107a7578063b88d4fde1461089e578063bdb4b848146108b157600080fd5b8063a22cb46514610761578063a6a2728514610781578063a71bbebe1461079457600080fd5b806395d89b411161017f57806395d89b411461070c57806399a2557a146107215780639e281a981461074157600080fd5b80638545f4ea146106975780638850504a146106b75780638da5cb5b146106ee57600080fd5b806342842e0e11610269578063715018a6116102125780637fc97616116101ec5780637fc976161461062a5780638462151c1461064a5780638526214c1461067757600080fd5b8063715018a6146105e9578063771282f6146105fe578063794544401461061457600080fd5b80636352211e116102435780636352211e146105895780636f8b44b0146105a957806370a08231146105c957600080fd5b806342842e0e1461052957806356d3163d1461053c5780635bbb21771461055c57600080fd5b80631d3cde03116102cb57806332fdf2d7116102a557806332fdf2d71461047357806334e80ea3146104935780633ccfd60b1461051457600080fd5b80631d3cde031461040e57806323b872dd14610440578063310bd74b1461045357600080fd5b8063095ea7b3116102fc578063095ea7b3146103b25780630daefed5146103c757806318160ddd146103e757600080fd5b806301ffc9a71461032357806306fdde0314610358578063081812fc1461037a575b600080fd5b34801561032f57600080fd5b5061034361033e366004612b3c565b610a9d565b60405190151581526020015b60405180910390f35b34801561036457600080fd5b5061036d610b3a565b60405161034f9190612ba9565b34801561038657600080fd5b5061039a610395366004612bbc565b610bcc565b6040516001600160a01b03909116815260200161034f565b6103c56103c0366004612bec565b610c29565b005b3480156103d357600080fd5b5061036d6103e2366004612bbc565b610ce2565b3480156103f357600080fd5b5060015460005403600019015b60405190815260200161034f565b34801561041a57600080fd5b5061042e610429366004612bbc565b610d67565b60405160ff909116815260200161034f565b6103c561044e366004612c16565b610e2f565b34801561045f57600080fd5b506103c561046e366004612bbc565b611014565b34801561047f57600080fd5b506103c561048e366004612c52565b611060565b34801561049f57600080fd5b506104e66104ae366004612bbc565b600d6020526000908152604090205461ffff808216916201000081048216916401000000008204811691660100000000000090041684565b6040805161ffff9586168152938516602085015291841691830191909152909116606082015260800161034f565b34801561052057600080fd5b506103c56110a3565b6103c5610537366004612c16565b6110da565b34801561054857600080fd5b506103c5610557366004612cc7565b6110f5565b34801561056857600080fd5b5061057c610577366004612c52565b61111f565b60405161034f9190612ce2565b34801561059557600080fd5b5061039a6105a4366004612bbc565b6111eb565b3480156105b557600080fd5b506103c56105c4366004612bbc565b6111f6565b3480156105d557600080fd5b506104006105e4366004612cc7565b611203565b3480156105f557600080fd5b506103c561126b565b34801561060a57600080fd5b5061040060095481565b34801561062057600080fd5b50610400600c5481565b34801561063657600080fd5b5061042e610645366004612bbc565b61127f565b34801561065657600080fd5b5061066a610665366004612cc7565b6112e6565b60405161034f9190612d5f565b34801561068357600080fd5b506103c5610692366004612cc7565b6113ea565b3480156106a357600080fd5b506103c56106b2366004612bbc565b611414565b3480156106c357600080fd5b506106d76106d2366004612bbc565b611421565b60405165ffffffffffff909116815260200161034f565b3480156106fa57600080fd5b506008546001600160a01b031661039a565b34801561071857600080fd5b5061036d611448565b34801561072d57600080fd5b5061066a61073c366004612d97565b611457565b34801561074d57600080fd5b506103c561075c366004612bec565b6115f8565b34801561076d57600080fd5b506103c561077c366004612dd8565b61168a565b6103c561078f366004612e44565b6116f6565b6103c56107a2366004612ead565b611798565b3480156107b357600080fd5b5061083a6107c2366004612bbc565b600e602052600090815260409020805460019091015460ff8083169261010081049091169161ffff620100008304169163ffffffff64010000000082048116926801000000000000000083049091169165ffffffffffff600160601b909104169071ffffffffffffffffffffffffffffffffffff1687565b6040805160ff988916815297909616602088015261ffff9094169486019490945263ffffffff918216606086015216608084015265ffffffffffff90911660a083015271ffffffffffffffffffffffffffffffffffff1660c082015260e00161034f565b6103c56108ac366004612f37565b6117c9565b3480156108bd57600080fd5b50610400600b5481565b3480156108d357600080fd5b5061036d6108e2366004612fe2565b611813565b3480156108f357600080fd5b50610907610902366004612bbc565b6119ae565b60405161034f919061302a565b34801561092057600080fd5b5061034361092f366004612bbc565b611a36565b34801561094057600080fd5b5061036d61094f366004612bbc565b611a82565b34801561096057600080fd5b506103c561096f366004612bbc565b611b0f565b34801561098057600080fd5b50610400600a5481565b34801561099657600080fd5b506103c56109a5366004612cc7565b611d35565b3480156109b657600080fd5b506103c56109c5366004612ead565b611d5f565b3480156109d657600080fd5b5061036d611d67565b3480156109eb57600080fd5b506103436109fa36600461306f565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b348015610a3457600080fd5b506103c5610a43366004612bbc565b611dc4565b348015610a5457600080fd5b506103c5610a63366004612cc7565b611dd1565b348015610a7457600080fd5b50610a88610a83366004612bbc565b611e63565b60405163ffffffff909116815260200161034f565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161480610b0057507f80ac58cd000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b80610b3457507f5b5e139f000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b606060028054610b49906130a2565b80601f0160208091040260200160405190810160405280929190818152602001828054610b75906130a2565b8015610bc25780601f10610b9757610100808354040283529160200191610bc2565b820191906000526020600020905b815481529060010190602001808311610ba557829003601f168201915b5050505050905090565b6000610bd782611f9c565b610c0d576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6000610c34826111eb565b9050336001600160a01b03821614610c8657610c5081336109fa565b610c86576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000818152600e602052604081205460609190610d1690849062010000900461ffff16610d0e82611a36565b156000611813565b604051602001610d2691906130dc565b6040516020818303038152906040529050610d4081611fd1565b604051602001610d5091906130f8565b604051602081830303815290604052915050919050565b6000818152600e6020526040812054610100900460ff168103610e0f57601054604051633a20c87960e01b815260048082018590526101416024830152916001600160a01b031690633a20c879906044015b602060405180830381865afa158015610dd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfa919061313d565b610e04919061316c565b610b34906001613196565b506000908152600e6020526040902054610100900460ff1690565b919050565b6000610e3a82612124565b9050836001600160a01b0316816001600160a01b031614610e87576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008281526006602052604090208054338082146001600160a01b03881690911417610eed57610eb786336109fa565b610eed576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038516610f2d576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8015610f3857600082555b6001600160a01b038681166000908152600560205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260046020526040812091909155600160e11b84169003610fca57600184016000818152600460205260408120549003610fc8576000548114610fc85760008181526004602052604090208490555b505b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b505050505050565b3361101e826111eb565b6001600160a01b031614611045576040516336b6b89560e01b815260040160405180910390fd5b6000908152600e60205260409020805463ffff000019169055565b60005b8181101561109e5761108c838383818110611080576110806131af565b90506020020135611b0f565b80611096816131c5565b915050611063565b505050565b6110ab6121ac565b60405133904780156108fc02916000818181858888f193505050501580156110d7573d6000803e3d6000fd5b50565b61109e838383604051806020016040528060008152506117c9565b6110fd6121ac565b601080546001600160a01b0319166001600160a01b0392909216919091179055565b60608160008167ffffffffffffffff81111561113d5761113d612ec8565b60405190808252806020026020018201604052801561118f57816020015b60408051608081018252600080825260208083018290529282018190526060820152825260001990920191018161115b5790505b50905060005b8281146111e2576111bd8686838181106111b1576111b16131af565b905060200201356119ae565b8282815181106111cf576111cf6131af565b6020908102919091010152600101611195565b50949350505050565b6000610b3482612124565b6111fe6121ac565b600a55565b60006001600160a01b038216611245576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b6112736121ac565b61127d6000612206565b565b6000818152600e602052604081205460ff1681036112d057601054604051633a20c87960e01b815260048101849052607b6024820152600f916001600160a01b031690633a20c87990604401610db9565b506000908152600e602052604090205460ff1690565b606060008060006112f685611203565b905060008167ffffffffffffffff81111561131357611313612ec8565b60405190808252806020026020018201604052801561133c578160200160208202803683370190505b5060408051608081018252600080825260208201819052918101829052606081019190915290915060015b8386146113de5761137781612258565b915081604001516113d65781516001600160a01b03161561139757815194505b876001600160a01b0316856001600160a01b0316036113d657808387806001019850815181106113c9576113c96131af565b6020026020010181815250505b600101611367565b50909695505050505050565b6113f26121ac565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b61141c6121ac565b600b55565b6000818152600e6020526040812054610b3490640100000000900463ffffffff16426131de565b606060038054610b49906130a2565b6060818310611492576040517f32c1995a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061149e60005490565b905060018510156114ae57600194505b808411156114ba578093505b60006114c587611203565b9050848610156114e457858503818110156114de578091505b506114e8565b5060005b60008167ffffffffffffffff81111561150357611503612ec8565b60405190808252806020026020018201604052801561152c578160200160208202803683370190505b509050816000036115425793506115f192505050565b600061154d886119ae565b90506000816040015161155e575080515b885b8881141580156115705750848714155b156115e55761157e81612258565b925082604001516115dd5782516001600160a01b03161561159e57825191505b8a6001600160a01b0316826001600160a01b0316036115dd57808488806001019950815181106115d0576115d06131af565b6020026020010181815250505b600101611560565b50505092835250909150505b9392505050565b6116006121ac565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af1158015611666573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109e91906131f1565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600b5461017261ffff861614158061171457508361ffff1661017214155b1561172957600c5461172690826131de565b90505b60ff83161561174257600c5461173f90826131de565b90505b60ff82161561175b57600c5461175890826131de565b90505b80341461177b57604051633d8f14cf60e21b815260040160405180910390fd5b61100c8663ffff0000601088901b1661ffff8716178585336122d7565b600b5434146117ba57604051633d8f14cf60e21b815260040160405180910390fd5b6110d7816000806000336122d7565b6117d4848484610e2f565b6001600160a01b0383163b1561180d576117f084848484612713565b61180d576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b6010546060906001600160a01b031663c7124fb78673__$11e21e6c56ca563b85c74e3fd3a08242f9$__63974bec188261184c81611e63565b6118558c610d67565b60ff8a1615611864578961186d565b61186d8d61127f565b6040516001600160e01b031960e087901b168152600481019490945263ffffffff92909216602484015260ff9081166044840152166064820152608401608060405180830381865af41580156118c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118eb919061320e565b600f546040805160e086901b6001600160e01b03191681526004810194909452825161ffff90811660248601526020840151811660448601529083015181166064850152606090920151909116608483015260a4820188905286151560c48301526001600160a01b031660e482015261010401600060405180830381865afa15801561197b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119a39190810190613293565b90505b949350505050565b6040805160808101825260008082526020820181905291810182905260608101919091526040805160808101825260008082526020820181905291810182905260608101919091526001831080611a0757506000548310155b15611a125792915050565b611a1b83612258565b9050806040015115611a2d5792915050565b6115f1836127fb565b6000806018603c80611a4786611421565b611a51919061330a565b611a5b919061330a565b611a65919061332f565b905060068160ff1610806115f1575060128160ff16119392505050565b6060600954821115611ac0576040517f4d5e5fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611acb83612873565b611ad484610ce2565b604051602001611ae5929190613354565b6040516020818303038152906040529050611aff81611fd1565b604051602001610d509190613430565b33611b19826111eb565b6001600160a01b031614611b40576040516336b6b89560e01b815260040160405180910390fd5b611b4981611a36565b611b7f576040517f42cc741200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000818152600e602052604090205461c4e090600160601b900465ffffffffffff16611baa83611421565b611bb49190613475565b65ffffffffffff161015611bf4576040517f5ada9a9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000818152600e6020526040902054611c189062010000900461ffff16600161349b565b6000828152600e60205260409020805461ffff92909216620100000263ffff000019909216919091179055611c4c81611421565b6000828152600e60205260409020805465ffffffffffff92909216600160601b0271ffffffffffff000000000000000000000000199092169190911790556011546001600160a01b0316156110d7576011546000828152600e6020526040908190205490517fdcb34eb2000000000000000000000000000000000000000000000000000000008152600481018490526201000090910461ffff1660248201526001600160a01b039091169063dcb34eb290604401600060405180830381600087803b158015611d1a57600080fd5b505af1158015611d2e573d6000803e3d6000fd5b5050505050565b611d3d6121ac565b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b6117ba6121ac565b60606000611d756000610ce2565b604051602001611d8591906134b6565b6040516020818303038152906040529050611d9f81611fd1565b604051602001611daf9190613430565b60405160208183030381529060405291505090565b611dcc6121ac565b600c55565b611dd96121ac565b6001600160a01b038116611e5a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6110d781612206565b6000818152600e602052604081205468010000000000000000900463ffffffff168103611f77576000611e9760108461316c565b611ea290600a61363b565b6040805160608101825261ffff83811682526000602083018181528385018281529451631b21034b60e31b815293518316600485015251821660248401529251166044820152603c60648201529192509073__$11e21e6c56ca563b85c74e3fd3a08242f9$__9063d9081a5890608401606060405180830381865af4158015611f2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f539190613652565b6000015190508061ffff1660108361ffff1663ffffffff16901b1792505050919050565b506000908152600e602052604090205468010000000000000000900463ffffffff1690565b600081600111158015611fb0575060005482105b8015610b34575050600090815260046020526040902054600160e01b161590565b60608151600003611ff057505060408051602081019091526000815290565b6000604051806060016040528060408152602001613732604091399050600060038451600261201f91906131de565b61202991906136c4565b61203490600461363b565b67ffffffffffffffff81111561204c5761204c612ec8565b6040519080825280601f01601f191660200182016040528015612076576020820181803683370190505b509050600182016020820185865187015b808210156120e2576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845350600183019250612087565b50506003865106600181146120fe576002811461211157612119565b603d6001830353603d6002830353612119565b603d60018303535b509195945050505050565b6000818060011161217a5760005481101561217a5760008181526004602052604081205490600160e01b82169003612178575b806000036115f1575060001901600081815260046020526040902054612157565b505b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6008546001600160a01b0316331461127d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611e51565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516080810182526000808252602082018190529181018290526060810191909152600082815260046020526040902054610b3490604080516080810182526001600160a01b038316815260a083901c67ffffffffffffffff166020820152600160e01b831615159181019190915260e89190911c606082015290565b600a5460095410612314576040517fd05cb60900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60098054906000612324836131c5565b90915550506040805160e0810182526000808252602082018190529181018290526080810182905260a0810182905260c081019190915263ffffffff868116606083015285166301720172036124615760006010600954612385919061316c565b61239090600a61363b565b6040805160608101825261ffff83811682526000602083018181528385018281529451631b21034b60e31b815293518316600485015251821660248401529251166044820152603c60648201529192509073__$11e21e6c56ca563b85c74e3fd3a08242f9$__9063d9081a5890608401606060405180830381865af415801561241d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124419190613652565b6000015190508061ffff1660108361ffff1663ffffffff16901b17965050505b63ffffffff85166080820152601060ff8516111561247e57600093505b8360ff1660000361251a57601054600954604051633a20c87960e01b81526004810191909152607b6024820152600f916001600160a01b031690633a20c87990604401602060405180830381865afa1580156124de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612502919061313d565b61250c919061316c565b6125179060016131de565b93505b60058360ff16111561252b57600092505b8260ff166000036125c857601054600954604051633a20c87960e01b8152600480820192909252610141602482015290916001600160a01b031690633a20c87990604401602060405180830381865afa15801561258c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b0919061313d565b6125ba919061316c565b6125c59060016131de565b93505b60ff808516825283811660208084019182526009546000908152600e909152604090819020845181549351928601516060870151608088015160a089015165ffffffffffff16600160601b0271ffffffffffff0000000000000000000000001963ffffffff9283166801000000000000000002167fffffffffffffffffffffffffffff00000000000000000000ffffffffffffffff929093166401000000000267ffffffff000000001961ffff90951662010000029490941667ffffffffffff000019978a166101000261ffff19909916959099169490941796909617949094169590951794909417929092161791909117815560c08201516001918201805471ffffffffffffffffffffffffffffffffffff9092167fffffffffffffffffffffffffffff00000000000000000000000000000000000090921691909117905561100c908390612913565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906127489033908990889088906004016136d8565b6020604051808303816000875af1925050508015612783575060408051601f3d908101601f1916820190925261278091810190613714565b60015b6127e1573d8080156127b1576040519150601f19603f3d011682016040523d82523d6000602084013e6127b6565b606091505b5080516000036127d9576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506119a6565b604080516080810182526000808252602082018190529181018290526060810191909152610b3461282b83612124565b604080516080810182526001600160a01b038316815260a083901c67ffffffffffffffff166020820152600160e01b831615159181019190915260e89190911c606082015290565b6060600061288083612a44565b600101905060008167ffffffffffffffff8111156128a0576128a0612ec8565b6040519080825280601f01601f1916602001820160405280156128ca576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846128d457509392505050565b6000805490829003612951576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03831660008181526005602090815260408083208054680100000000000000018802019055848352600490915281206001851460e11b4260a01b178317905582840190839083907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4600183015b818114612a0057808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a46001016129c8565b5081600003612a3b576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005550505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612a8d577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310612ab9576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310612ad757662386f26fc10000830492506010015b6305f5e1008310612aef576305f5e100830492506008015b6127108310612b0357612710830492506004015b60648310612b15576064830492506002015b600a8310610b345760010192915050565b6001600160e01b0319811681146110d757600080fd5b600060208284031215612b4e57600080fd5b81356115f181612b26565b60005b83811015612b74578181015183820152602001612b5c565b50506000910152565b60008151808452612b95816020860160208601612b59565b601f01601f19169290920160200192915050565b6020815260006115f16020830184612b7d565b600060208284031215612bce57600080fd5b5035919050565b80356001600160a01b0381168114610e2a57600080fd5b60008060408385031215612bff57600080fd5b612c0883612bd5565b946020939093013593505050565b600080600060608486031215612c2b57600080fd5b612c3484612bd5565b9250612c4260208501612bd5565b9150604084013590509250925092565b60008060208385031215612c6557600080fd5b823567ffffffffffffffff80821115612c7d57600080fd5b818501915085601f830112612c9157600080fd5b813581811115612ca057600080fd5b8660208260051b8501011115612cb557600080fd5b60209290920196919550909350505050565b600060208284031215612cd957600080fd5b6115f182612bd5565b6020808252825182820181905260009190848201906040850190845b818110156113de57612d4c8385516001600160a01b03815116825267ffffffffffffffff602082015116602083015260408101511515604083015262ffffff60608201511660608301525050565b9284019260809290920191600101612cfe565b6020808252825182820181905260009190848201906040850190845b818110156113de57835183529284019291840191600101612d7b565b600080600060608486031215612dac57600080fd5b612db584612bd5565b95602085013595506040909401359392505050565b80151581146110d757600080fd5b60008060408385031215612deb57600080fd5b612df483612bd5565b91506020830135612e0481612dca565b809150509250929050565b803563ffffffff81168114610e2a57600080fd5b61ffff811681146110d757600080fd5b803560ff81168114610e2a57600080fd5b600080600080600060a08688031215612e5c57600080fd5b612e6586612e0f565b94506020860135612e7581612e23565b93506040860135612e8581612e23565b9250612e9360608701612e33565b9150612ea160808701612e33565b90509295509295909350565b600060208284031215612ebf57600080fd5b6115f182612e0f565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612f0757612f07612ec8565b604052919050565b600067ffffffffffffffff821115612f2957612f29612ec8565b50601f01601f191660200190565b60008060008060808587031215612f4d57600080fd5b612f5685612bd5565b9350612f6460208601612bd5565b925060408501359150606085013567ffffffffffffffff811115612f8757600080fd5b8501601f81018713612f9857600080fd5b8035612fab612fa682612f0f565b612ede565b818152886020838501011115612fc057600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b60008060008060808587031215612ff857600080fd5b8435935060208501359250604085013561301181612dca565b915061301f60608601612e33565b905092959194509250565b81516001600160a01b0316815260208083015167ffffffffffffffff169082015260408083015115159082015260608083015162ffffff169082015260808101610b34565b6000806040838503121561308257600080fd5b61308b83612bd5565b915061309960208401612bd5565b90509250929050565b600181811c908216806130b657607f821691505b6020821081036130d657634e487b7160e01b600052602260045260246000fd5b50919050565b600082516130ee818460208701612b59565b9190910192915050565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081526000825161313081601a850160208701612b59565b91909101601a0192915050565b60006020828403121561314f57600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b60008261317b5761317b613156565b500690565b634e487b7160e01b600052601160045260246000fd5b60ff8181168382160190811115610b3457610b34613180565b634e487b7160e01b600052603260045260246000fd5b6000600182016131d7576131d7613180565b5060010190565b80820180821115610b3457610b34613180565b60006020828403121561320357600080fd5b81516115f181612dca565b60006080828403121561322057600080fd5b6040516080810181811067ffffffffffffffff8211171561324357613243612ec8565b604052825161325181612e23565b8152602083015161326181612e23565b6020820152604083015161327481612e23565b6040820152606083015161328781612e23565b60608201529392505050565b6000602082840312156132a557600080fd5b815167ffffffffffffffff8111156132bc57600080fd5b8201601f810184136132cd57600080fd5b80516132db612fa682612f0f565b8181528560208385010111156132f057600080fd5b613301826020830160208601612b59565b95945050505050565b600065ffffffffffff8084168061332357613323613156565b92169190910492915050565b600065ffffffffffff8084168061334857613348613156565b92169190910692915050565b607b60f81b81527f226e616d65223a2022636861696e656c6c6174696f6e20230000000000000000600182015260008351613396816019850160208801612b59565b7f222c0000000000000000000000000000000000000000000000000000000000006019918401918201527f226465736372697074696f6e223a2022636861696e656c6c6174696f6e222c00601b820152691134b6b0b3b2911d101160b11b603a820152835161340c816044840160208801612b59565b601160f91b60449290910191820152607d60f81b6045820152604601949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161346881601d850160208701612b59565b91909101601d0192915050565b65ffffffffffff82811682821603908082111561349457613494613180565b5092915050565b61ffff81811683821601908082111561349457613494613180565b607b60f81b81527f226e616d65223a202254776f204d6f6f6e73204e6967687420536b696573222c60018201527f226465736372697074696f6e223a2022596f75722077696e646f7720696e746f60218201527f20746865204e6967687420536b792e20205374617267617a6520746f2072657660418201527f65616c20796f75722073656372657420636f6e7374656c6c6174696f6e2c206160618201527f6e6420637573746f6d697a6520796f757220766965772077697468207265706c60818201527f616361626c65207061727473206f662074686520696d6167652e22000000000060a18201527f2265787465726e616c5f75726c223a202268747470733a2f2f7777772e63686160bc8201527f696e656c6c6174696f6e2e636f6d2f220000000000000000000000000000000060dc820152691134b6b0b3b2911d101160b11b60ec820152600082516136158160f6850160208701612b59565b6119a661362e60f683860101601160f91b815260010190565b607d60f81b815260010190565b8082028115828204841417610b3457610b34613180565b60006060828403121561366457600080fd5b6040516060810181811067ffffffffffffffff8211171561368757613687612ec8565b604052825161369581612e23565b815260208301516136a581612e23565b602082015260408301516136b881612e23565b60408201529392505050565b6000826136d3576136d3613156565b500490565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261370a6080830184612b7d565b9695505050505050565b60006020828403121561372657600080fd5b81516115f181612b2656fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122081707cf38ec09ddb12ddeeb26d39d2bd977c293868b3998a174f285de7ce973d64736f6c63430008120033",
  "libraries": {
    "Color": "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  },
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "ConsecutiveTransfer(uint256,uint256,address,address)": {
        "details": "Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in `owner`'s account."
      },
      "explicitOwnershipOf(uint256)": {
        "details": "Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds: - `addr = address(0)` - `startTimestamp = 0` - `burned = false` - `extraData = 0` If the `tokenId` is burned: - `addr = <Address of owner before token was burned>` - `startTimestamp = <Timestamp when token was burned>` - `burned = true` - `extraData = <Extra data when token was burned>` Otherwise: - `addr = <Address of owner>` - `startTimestamp = <Timestamp of start of ownership>` - `burned = false` - `extraData = <Extra data at start of ownership>`"
      },
      "explicitOwnershipsOf(uint256[])": {
        "details": "Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}"
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}."
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Equivalent to `safeTransferFrom(from, to, tokenId, '')`."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokensOfOwner(address)": {
        "details": "Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(`totalSupply`) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K collections should be fine)."
      },
      "tokensOfOwnerIn(address,uint256,uint256)": {
        "details": "Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start < stop`"
      },
      "totalSupply()": {
        "details": "Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ApprovalCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "ApprovalQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "BalanceQueryForZeroAddress()": [
        {
          "notice": "Cannot query the balance for the zero address."
        }
      ],
      "InvalidQueryRange()": [
        {
          "notice": "Invalid query range (`start` >= `stop`)."
        }
      ],
      "MintERC2309QuantityExceedsLimit()": [
        {
          "notice": "The `quantity` minted with ERC2309 exceeds the safety limit."
        }
      ],
      "MintToZeroAddress()": [
        {
          "notice": "Cannot mint to the zero address."
        }
      ],
      "MintZeroQuantity()": [
        {
          "notice": "The quantity of tokens minted must be more than zero."
        }
      ],
      "OwnerQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "OwnershipNotInitializedForExtraData()": [
        {
          "notice": "The `extraData` cannot be set on an unintialized ownership slot."
        }
      ],
      "TransferCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "TransferFromIncorrectOwner()": [
        {
          "notice": "The token must be owned by `from`."
        }
      ],
      "TransferToNonERC721ReceiverImplementer()": [
        {
          "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
        }
      ],
      "TransferToZeroAddress()": [
        {
          "notice": "Cannot transfer to the zero address."
        }
      ],
      "URIQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2798,
        "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2800,
        "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2802,
        "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2804,
        "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2808,
        "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
        "label": "_packedOwnerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2812,
        "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
        "label": "_packedAddressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2817,
        "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)2730_storage)"
      },
      {
        "astId": 2823,
        "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 1655,
        "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
        "label": "currentSupply",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1658,
        "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
        "label": "maxSupply",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1661,
        "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
        "label": "mintCost",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1664,
        "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
        "label": "customizeCost",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1669,
        "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
        "label": "dnas",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(DNA)1236_storage)"
      },
      {
        "astId": 1674,
        "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
        "label": "stats",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(Stats)1653_storage)"
      },
      {
        "astId": 1676,
        "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
        "label": "_decorator",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 1679,
        "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
        "label": "_renderer",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(IChainellationRenderer)2649"
      },
      {
        "astId": 1682,
        "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
        "label": "_twoMoonsEvent",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(ITwoMoonsEvent)2659"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IChainellationRenderer)2649": {
        "encoding": "inplace",
        "label": "contract IChainellationRenderer",
        "numberOfBytes": "20"
      },
      "t_contract(ITwoMoonsEvent)2659": {
        "encoding": "inplace",
        "label": "contract ITwoMoonsEvent",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(DNA)1236_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Color.DNA)",
        "numberOfBytes": "32",
        "value": "t_struct(DNA)1236_storage"
      },
      "t_mapping(t_uint256,t_struct(Stats)1653_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Chainellation.Stats)",
        "numberOfBytes": "32",
        "value": "t_struct(Stats)1653_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenApprovalRef)2730_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenApprovalRef)2730_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DNA)1236_storage": {
        "encoding": "inplace",
        "label": "struct Color.DNA",
        "members": [
          {
            "astId": 1229,
            "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
            "label": "primaryHue",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 1231,
            "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
            "label": "secondaryHue",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 1233,
            "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
            "label": "constellation",
            "offset": 4,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 1235,
            "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
            "label": "cloudsAt",
            "offset": 6,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Stats)1653_storage": {
        "encoding": "inplace",
        "label": "struct Chainellation.Stats",
        "members": [
          {
            "astId": 1640,
            "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
            "label": "constellation",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1642,
            "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
            "label": "cloudsAt",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1644,
            "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
            "label": "gazes",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 1646,
            "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
            "label": "timeZoneOffset",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1648,
            "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
            "label": "colors",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1650,
            "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
            "label": "lastGaze",
            "offset": 12,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 1652,
            "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
            "label": "consolidated",
            "offset": 0,
            "slot": "1",
            "type": "t_uint144"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenApprovalRef)2730_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenApprovalRef",
        "members": [
          {
            "astId": 2729,
            "contract": "contracts/chainellations/Chainellation.sol:Chainellation",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint144": {
        "encoding": "inplace",
        "label": "uint144",
        "numberOfBytes": "18"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}