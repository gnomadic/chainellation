{
  "address": "0x959922bE3CAee4b8Cd9a407cc3ac1C251C2007B1",
  "abi": [
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SoulBound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "generateCharacter",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gazes",
          "type": "uint256"
        }
      ],
      "name": "getCircles",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "primaryHue",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "secondaryHue",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "constellation",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "cloudsAt",
              "type": "uint16"
            }
          ],
          "internalType": "struct Color.DNA",
          "name": "dna",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "gazes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "daytime",
          "type": "bool"
        }
      ],
      "name": "getDeco",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getMetadata",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "primaryHue",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "secondaryHue",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "constellation",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "cloudsAt",
              "type": "uint16"
            }
          ],
          "internalType": "struct Color.DNA",
          "name": "dna",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "gazes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "daytime",
          "type": "bool"
        }
      ],
      "name": "packageAsSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "soulbind",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "soulbound",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8d78172d95cf0c0ac283f81c414c21baba12b776deac4a05e7522eb99690830f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x959922bE3CAee4b8Cd9a407cc3ac1C251C2007B1",
    "transactionIndex": 0,
    "gasUsed": "1148313",
    "logsBloom": "0x
    "blockHash": "0xc1c5b59682b1452c43bc36d126c722fef89d0727e8063caa878cd12a138057d2",
    "transactionHash": "0x8d78172d95cf0c0ac283f81c414c21baba12b776deac4a05e7522eb99690830f",
    "logs": [],
    "blockNumber": 17,
    "cumulativeGasUsed": "1148313",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "594e9ccd906bd68cfdce016c4dc374de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SoulBound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"generateCharacter\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gazes\",\"type\":\"uint256\"}],\"name\":\"getCircles\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"primaryHue\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"secondaryHue\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"constellation\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cloudsAt\",\"type\":\"uint16\"}],\"internalType\":\"struct Color.DNA\",\"name\":\"dna\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"gazes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"daytime\",\"type\":\"bool\"}],\"name\":\"getDeco\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"primaryHue\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"secondaryHue\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"constellation\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cloudsAt\",\"type\":\"uint16\"}],\"internalType\":\"struct Color.DNA\",\"name\":\"dna\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"gazes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"daytime\",\"type\":\"bool\"}],\"name\":\"packageAsSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"soulbind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"soulbound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/chainellations/decos/SkyCircle.sol\":\"SkyCircle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Color.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary Color {\\n    using Strings for uint256;\\n\\n    // TODO bytepack this and unpack it - probably want utility, but based on usage\\n    struct DNA {\\n        uint16 primaryHue;\\n        uint16 secondaryHue;\\n        uint16 constellation;\\n        uint16 cloudsAt;\\n    }\\n\\n    struct HSL {\\n        uint16 H;\\n        uint16 S;\\n        uint16 L;\\n    }\\n\\n    function HSLtoString(HSL memory color) public pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"hsl(\\\",\\n                    ((uint256)(color.H)).toString(),\\n                    \\\",\\\",\\n                    ((uint256)(color.S)).toString(),\\n                    \\\"%,\\\",\\n                    ((uint256)(color.L)).toString(),\\n                    \\\"%)\\\"\\n                )\\n            );\\n    }\\n\\n    function toString(uint16 num) public pure returns (string memory) {\\n        return ((uint256)(num)).toString();\\n    }\\n\\n    function psuedorandom(\\n        uint256 tokenId,\\n        uint256 nonce\\n    ) public pure returns (uint256) {\\n        return uint(keccak256(abi.encodePacked(tokenId, nonce)));\\n    }\\n\\n    function wiggle(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        uint16 base,\\n        uint16 offset\\n    ) public pure returns (uint16) {\\n        uint16 wiggleAmount = (uint16)(psuedorandom(tokenId, nonce) % offset);\\n        if ((uint8)(psuedorandom(tokenId, nonce) % 2) == 0) {\\n            return base + wiggleAmount;\\n        } else {\\n            return subZero(base, wiggleAmount);\\n        }\\n    }\\n\\n    function wiggleString(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        uint16 base,\\n        uint16 offset\\n    ) public pure returns (string memory) {\\n        return toString(wiggle(tokenId, nonce, base, offset));\\n    }\\n\\n    function wiggleUp(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        uint16 base,\\n        uint16 offset\\n    ) public pure returns (uint16) {\\n        uint16 wiggleAmount = (uint16)(psuedorandom(tokenId, nonce) % offset);\\n        return base + wiggleAmount;\\n    }\\n\\n    function subZero(uint16 first, uint16 second) public pure returns (uint16) {\\n        if (first > second) {\\n            return first - second;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function flipColor(\\n        Color.HSL memory color\\n    ) public pure returns (Color.HSL memory) {\\n        uint16 newH = color.H + 180 > 360 ? color.H - 180 : color.H + 180;\\n        return Color.HSL(newH, color.S, color.L);\\n    }\\n\\n    function rotateColor(\\n        Color.HSL memory color,\\n        uint16 amount\\n    ) public pure returns (Color.HSL memory) {\\n        uint16 hue = (color.H + amount) % 360;\\n        return Color.HSL(hue, color.S, color.L);\\n    }\\n\\n    function genDNA(\\n        uint256 tokenId,\\n        uint32 colors,\\n        uint16 clouds,\\n        uint16 constellation\\n    ) public pure returns (DNA memory) {\\n        DNA memory dna;\\n        // dna.tokenId = tokenId;\\n        dna.primaryHue = uint16(colors >> 16);\\n        dna.secondaryHue = uint16(colors);\\n        // dna.starSeed = psuedorandom(tokenId, 123);\\n        // dna.funkSeed = psuedorandom(tokenId, 234);\\n        // dna.circleSeed = psuedorandom(tokenId, 345);\\n        // dna.groundSeed = psuedorandom(tokenId, 456);\\n        dna.constellation = constellation;\\n        dna.cloudsAt = clouds;\\n\\n        return dna;\\n    }\\n\\n    function defaultColors(uint256 tokenId) public pure returns (uint32) {\\n        uint16 primary = uint16((tokenId % 16) * 10);\\n        uint16 secondary = rotateColor(HSL(primary, 0, 0), 60).H;\\n        return (uint32(primary) << 16) | uint32(secondary);\\n    }\\n}\\n\",\"keccak256\":\"0x4cf680750f0dcd97507cfaf9e74b7baf28d8ea63d9772f3c76de06af144c23da\",\"license\":\"MIT\"},\"contracts/chainellations/decos/SkyCircle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"../../interfaces/IDeco.sol\\\";\\n\\ncontract SkyCircle is IDeco {\\n    using Strings for uint256;\\n\\n    function getMetadata(\\n        uint256 tokenId\\n    ) public view override returns (string memory) {\\n        return\\n            string.concat(\\n                '\\\"name\\\": \\\"Two Moons Sky Math #',\\n                tokenId.toString(),\\n                '\\\",',\\n                '\\\"description\\\": \\\"A mathematical anomaly for your Two Moons Night Sky\\\"'\\n            );\\n    }\\n\\n    function getDeco(\\n        uint256 tokenId,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) public pure override returns (string memory) {\\n        return string.concat(\\\"<g>\\\", getCircles(gazes), \\\"</g>\\\");\\n    }\\n\\n    function getCircles(uint256 gazes) public pure returns (string memory) {\\n        string memory math = string.concat(\\n            '<g id=\\\"skymath\\\" opacity=\\\"1\\\" fill=\\\"none\\\" stroke=\\\"white\\\" stroke-width=\\\"1\\\">',\\n            '<circle r=\\\"80\\\" cx=\\\"340\\\" cy=\\\"170\\\" stroke-dasharray=\\\"0 1 0\\\" opacity=\\\"0.8\\\" />',\\n            '<circle r=\\\"85\\\" cx=\\\"340\\\" cy=\\\"170\\\" stroke-dasharray=\\\"1 0 1\\\" opacity=\\\"0.8\\\" />',\\n            '<circle r=\\\"90\\\" cx=\\\"340\\\" cy=\\\"170\\\" stroke-dasharray=\\\"0 1 0\\\" opacity=\\\"0.8\\\" />'\\n        );\\n\\n        // This is where we set how many stargazes are required to add a circle\\n        uint8 unlocked = (uint8)(gazes / 6);\\n\\n        uint8 active = unlocked >= 5 ? 5 : unlocked;\\n        for (uint16 i = 0; i < active; i++) {\\n            math = string.concat(\\n                math,\\n                '<path d = \\\"M',\\n                Color.toString(330 + (5 * i)),\\n                ' 0 v 80\\\" opacity=\\\"0.5\\\" />',\\n                '<path d = \\\"M',\\n                Color.toString(330 + (5 * i)),\\n                ' 260 v 280\\\" opacity=\\\"0.5\\\" />'\\n            );\\n        }\\n\\n        math = string.concat(math, \\\"</g>\\\");\\n\\n        return math;\\n    }\\n}\\n\",\"keccak256\":\"0x1b5e1a5edd7d29ea58d0bf331d45071723fd8af0f90c7c32ce644028df5a7e72\",\"license\":\"MIT\"},\"contracts/interfaces/IDeco.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\nimport \\\"../Color.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\nabstract contract IDeco {\\n    mapping(uint256 => bool) public soulbound;\\n\\n    function soulbind(uint256 tokenId) external {\\n        if (ownerOf(tokenId) != tx.origin) revert NotOwner();\\n        soulbound[tokenId] = true;\\n    }\\n\\n    function getDeco(\\n        uint256 tokenId,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) public view virtual returns (string memory);\\n\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        //TODO this is rough - the msg.sender is the Decoration contract but I need check with the EOA\\n        //breaks support for gas stations and contract owners.\\n        return tx.origin;\\n    }\\n\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        return 1;\\n    }\\n\\n    function packageAsSVG(\\n        uint256 tokenId,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) public view returns (string memory) {\\n        return\\n            string.concat(\\n                '<svg viewBox=\\\"0 0 512 512\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">',\\n                '<clipPath id=\\\"box\\\"><path d=\\\"M0 0h512v512H0z\\\"/></clipPath>',\\n                '<svg viewBox=\\\"0 0 512 512\\\" clip-path=\\\"url(#box)\\\">',\\n                getDeco(tokenId, dna, gazes, daytime),\\n                \\\"</svg></svg>\\\"\\n            );\\n    }\\n\\n    function generateCharacter(\\n        uint256 tokenId\\n    ) public view returns (string memory) {\\n        Color.DNA memory dna = Color.genDNA(\\n            tokenId,\\n            Color.defaultColors(tokenId),\\n            0,\\n            0\\n        );\\n        bytes memory svg = abi.encodePacked(\\n            packageAsSVG(tokenId, dna, 0, true)\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:image/svg+xml;base64,\\\",\\n                    Base64.encode(svg)\\n                )\\n            );\\n    }\\n\\n    function getMetadata(\\n        uint256 tokenId\\n    ) public view virtual returns (string memory);\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual returns (string memory) {\\n        bytes memory dataURI = abi.encodePacked(\\n            \\\"{\\\",\\n            getMetadata(tokenId),\\n            \\\",\\\",\\n            '\\\"image\\\": \\\"',\\n            generateCharacter(tokenId),\\n            '\\\"',\\n            \\\"}\\\"\\n        );\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(dataURI)\\n                )\\n            );\\n    }\\n\\n    error NotOwner();\\n    error SoulBound();\\n}\\n\",\"keccak256\":\"0x8489b63a8c83ed37f76e0e6f7fe254b1bfe72f7183aec935941056c8a2d0c07f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506113e9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c806370a0823111610076578063960384e81161005b578063960384e8146101ca578063a574cea4146101dd578063c87b56dd146101f057600080fd5b806370a08231146101755780637a1815971461019757600080fd5b80630daefed5116100a75780630daefed51461011757806355d26c461461012a5780636352211e1461013d57600080fd5b806302e9dd09146100c357806306febcba146100ec575b600080fd5b6100d66100d1366004610b33565b610203565b6040516100e39190610bfd565b60405180910390f35b6101156100fa366004610c30565b6000908152602081905260409020805460ff19166001179055565b005b6100d6610125366004610c30565b610237565b6100d6610138366004610c30565b6103c5565b61015061014b366004610c30565b503290565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e3565b610189610183366004610c49565b50600190565b6040519081526020016100e3565b6101ba6101a5366004610c30565b60006020819052908152604090205460ff1681565b60405190151581526020016100e3565b6100d66101d8366004610b33565b610754565b6100d66101eb366004610c30565b610772565b6100d66101fe366004610c30565b6107a3565b606061020e836103c5565b60405160200161021e9190610c86565b6040516020818303038152906040529050949350505050565b60606000735FbDB2315678afecb367f032d93F642f64180aa363974bec1884735FbDB2315678afecb367f032d93F642f64180aa3638f6aa355876040518263ffffffff1660e01b815260040161028f91815260200190565b602060405180830381865af41580156102ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d09190610cd9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b168152600481019290925263ffffffff1660248201526000604482018190526064820152608401608060405180830381865af415801561033d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103619190610cff565b90506000610373848360006001610754565b6040516020016103839190610d66565b604051602081830303815290604052905061039d8161080b565b6040516020016103ad9190610d82565b60405160208183030381529060405292505050919050565b60606000604051602001610546907f3c672069643d22736b796d61746822206f7061636974793d2231222066696c6c81527f3d226e6f6e6522207374726f6b653d22776869746522207374726f6b652d776960208201527f6474683d2231223e00000000000000000000000000000000000000000000000060408201527f3c636972636c6520723d223830222063783d22333430222063793d223137302260488201527f207374726f6b652d6461736861727261793d22302031203022206f7061636974606882018190527f793d22302e3822202f3e00000000000000000000000000000000000000000000608883018190527f3c636972636c6520723d223835222063783d22333430222063793d223137302260928401527f207374726f6b652d6461736861727261793d22312030203122206f706163697460b284015260d283018190527f3c636972636c6520723d223930222063783d22333430222063793d223137302260dc84015260fc83019190915261011c8201526101260190565b60408051601f1981840301815291905290506000610565600685610ddd565b9050600060058260ff16101561057b578161057e565b60055b905060005b8160ff168161ffff1610156107295783735FbDB2315678afecb367f032d93F642f64180aa3631b0d4b4d6105b8846005610dff565b6105c49061014a610e25565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815261ffff9091166004820152602401600060405180830381865af415801561061b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106439190810190610e47565b735FbDB2315678afecb367f032d93F642f64180aa3631b0d4b4d610668856005610dff565b6106749061014a610e25565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815261ffff9091166004820152602401600060405180830381865af41580156106cb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106f39190810190610e47565b60405160200161070593929190610ef4565b6040516020818303038152906040529350808061072190610fbc565b915050610583565b508260405160200161073b9190610fdd565b60408051601f1981840301815291905295945050505050565b606061076285858585610203565b60405160200161021e9190611005565b606061077d8261095e565b60405160200161078d919061112f565b6040516020818303038152906040529050919050565b606060006107b083610772565b6107b984610237565b6040516020016107ca92919061120d565b60405160208183030381529060405290506107e48161080b565b6040516020016107f49190611304565b604051602081830303815290604052915050919050565b6060815160000361082a57505060408051602081019091526000815290565b600060405180606001604052806040815260200161137460409139905060006003845160026108599190611349565b6108639190610ddd565b61086e90600461135c565b67ffffffffffffffff81111561088657610886610ae1565b6040519080825280601f01601f1916602001820160405280156108b0576020820181803683370190505b509050600182016020820185865187015b8082101561091c576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453506001830192506108c1565b5050600386510660018114610938576002811461094b57610953565b603d6001830353603d6002830353610953565b603d60018303535b509195945050505050565b6060600061096b836109fe565b600101905060008167ffffffffffffffff81111561098b5761098b610ae1565b6040519080825280601f01601f1916602001820160405280156109b5576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846109bf57509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610a47577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610a73576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610a9157662386f26fc10000830492506010015b6305f5e1008310610aa9576305f5e100830492506008015b6127108310610abd57612710830492506004015b60648310610acf576064830492506002015b600a8310610adb576001015b92915050565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715610b1a57610b1a610ae1565b60405290565b61ffff81168114610b3057600080fd5b50565b60008060008084860360e0811215610b4a57600080fd5b853594506080601f1982011215610b6057600080fd5b50610b69610af7565b6020860135610b7781610b20565b81526040860135610b8781610b20565b60208201526060860135610b9a81610b20565b60408201526080860135610bad81610b20565b6060820152925060a0850135915060c08501358015158114610bce57600080fd5b939692955090935050565b60005b83811015610bf4578181015183820152602001610bdc565b50506000910152565b6020815260008251806020840152610c1c816040850160208701610bd9565b601f01601f19169190910160400192915050565b600060208284031215610c4257600080fd5b5035919050565b600060208284031215610c5b57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610c7f57600080fd5b9392505050565b7f3c673e0000000000000000000000000000000000000000000000000000000000815260008251610cbe816003850160208701610bd9565b631e17b39f60e11b6003939091019283015250600701919050565b600060208284031215610ceb57600080fd5b815163ffffffff81168114610c7f57600080fd5b600060808284031215610d1157600080fd5b610d19610af7565b8251610d2481610b20565b81526020830151610d3481610b20565b60208201526040830151610d4781610b20565b60408201526060830151610d5a81610b20565b60608201529392505050565b60008251610d78818460208701610bd9565b9190910192915050565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000815260008251610dba81601a850160208701610bd9565b91909101601a0192915050565b634e487b7160e01b600052601160045260246000fd5b600082610dfa57634e487b7160e01b600052601260045260246000fd5b500490565b61ffff818116838216028082169190828114610e1d57610e1d610dc7565b505092915050565b61ffff818116838216019080821115610e4057610e40610dc7565b5092915050565b600060208284031215610e5957600080fd5b815167ffffffffffffffff80821115610e7157600080fd5b818401915084601f830112610e8557600080fd5b815181811115610e9757610e97610ae1565b604051601f8201601f19908116603f01168101908382118183101715610ebf57610ebf610ae1565b81604052828152876020848701011115610ed857600080fd5b610ee9836020830160208801610bd9565b979650505050505050565b60008451610f06818460208901610bd9565b80830190507f3c706174682064203d20224d00000000000000000000000000000000000000008082528551610f4281600c850160208a01610bd9565b7f2030207620383022206f7061636974793d22302e3522202f3e00000000000000600c939091019283015260258201528351610f85816031840160208801610bd9565b7f2032363020762032383022206f7061636974793d22302e3522202f3e0000000060319290910191820152604d0195945050505050565b600061ffff808316818103610fd357610fd3610dc7565b6001019392505050565b60008251610fef818460208701610bd9565b631e17b39f60e11b920191825250600401919050565b7f3c7376672076696577426f783d2230203020353132203531322220786d6c6e7381527f3d22687474703a2f2f7777772e77332e6f72672f323030302f737667223e000060208201527f3c636c6970506174682069643d22626f78223e3c7061746820643d224d302030603e8201527f683531327635313248307a222f3e3c2f636c6970506174683e00000000000000605e8201527f3c7376672076696577426f783d2230203020353132203531322220636c69702d60778201527f706174683d2275726c2823626f7829223e0000000000000000000000000000006097820152600082516110fb8160a8850160208701610bd9565b7f3c2f7376673e3c2f7376673e000000000000000000000000000000000000000060a893909101928301525060b401919050565b7f226e616d65223a202254776f204d6f6f6e7320536b79204d617468202300000081526000825161116781601d850160208701610bd9565b7f222c000000000000000000000000000000000000000000000000000000000000601d9390910192830152507f226465736372697074696f6e223a202241206d617468656d61746963616c2061601f8201527f6e6f6d616c7920666f7220796f75722054776f204d6f6f6e73204e6967687420603f8201527f536b792200000000000000000000000000000000000000000000000000000000605f820152606301919050565b7f7b00000000000000000000000000000000000000000000000000000000000000815260008351611245816001850160208801610bd9565b7f2c000000000000000000000000000000000000000000000000000000000000006001918401918201527f22696d616765223a202200000000000000000000000000000000000000000000600282015283516112a881600c840160208801610bd9565b7f2200000000000000000000000000000000000000000000000000000000000000600c92909101918201527f7d00000000000000000000000000000000000000000000000000000000000000600d820152600e01949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161133c81601d850160208701610bd9565b91909101601d0192915050565b80820180821115610adb57610adb610dc7565b8082028115828204841417610adb57610adb610dc756fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220cfb8163d5574f081e791e02984fbfc5bc85693f4202a741e5319e4cab548e46364736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c806370a0823111610076578063960384e81161005b578063960384e8146101ca578063a574cea4146101dd578063c87b56dd146101f057600080fd5b806370a08231146101755780637a1815971461019757600080fd5b80630daefed5116100a75780630daefed51461011757806355d26c461461012a5780636352211e1461013d57600080fd5b806302e9dd09146100c357806306febcba146100ec575b600080fd5b6100d66100d1366004610b33565b610203565b6040516100e39190610bfd565b60405180910390f35b6101156100fa366004610c30565b6000908152602081905260409020805460ff19166001179055565b005b6100d6610125366004610c30565b610237565b6100d6610138366004610c30565b6103c5565b61015061014b366004610c30565b503290565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e3565b610189610183366004610c49565b50600190565b6040519081526020016100e3565b6101ba6101a5366004610c30565b60006020819052908152604090205460ff1681565b60405190151581526020016100e3565b6100d66101d8366004610b33565b610754565b6100d66101eb366004610c30565b610772565b6100d66101fe366004610c30565b6107a3565b606061020e836103c5565b60405160200161021e9190610c86565b6040516020818303038152906040529050949350505050565b6060600073__$11e21e6c56ca563b85c74e3fd3a08242f9$__63974bec188473__$11e21e6c56ca563b85c74e3fd3a08242f9$__638f6aa355876040518263ffffffff1660e01b815260040161028f91815260200190565b602060405180830381865af41580156102ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d09190610cd9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b168152600481019290925263ffffffff1660248201526000604482018190526064820152608401608060405180830381865af415801561033d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103619190610cff565b90506000610373848360006001610754565b6040516020016103839190610d66565b604051602081830303815290604052905061039d8161080b565b6040516020016103ad9190610d82565b60405160208183030381529060405292505050919050565b60606000604051602001610546907f3c672069643d22736b796d61746822206f7061636974793d2231222066696c6c81527f3d226e6f6e6522207374726f6b653d22776869746522207374726f6b652d776960208201527f6474683d2231223e00000000000000000000000000000000000000000000000060408201527f3c636972636c6520723d223830222063783d22333430222063793d223137302260488201527f207374726f6b652d6461736861727261793d22302031203022206f7061636974606882018190527f793d22302e3822202f3e00000000000000000000000000000000000000000000608883018190527f3c636972636c6520723d223835222063783d22333430222063793d223137302260928401527f207374726f6b652d6461736861727261793d22312030203122206f706163697460b284015260d283018190527f3c636972636c6520723d223930222063783d22333430222063793d223137302260dc84015260fc83019190915261011c8201526101260190565b60408051601f1981840301815291905290506000610565600685610ddd565b9050600060058260ff16101561057b578161057e565b60055b905060005b8160ff168161ffff161015610729578373__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d6105b8846005610dff565b6105c49061014a610e25565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815261ffff9091166004820152602401600060405180830381865af415801561061b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106439190810190610e47565b73__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d610668856005610dff565b6106749061014a610e25565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815261ffff9091166004820152602401600060405180830381865af41580156106cb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106f39190810190610e47565b60405160200161070593929190610ef4565b6040516020818303038152906040529350808061072190610fbc565b915050610583565b508260405160200161073b9190610fdd565b60408051601f1981840301815291905295945050505050565b606061076285858585610203565b60405160200161021e9190611005565b606061077d8261095e565b60405160200161078d919061112f565b6040516020818303038152906040529050919050565b606060006107b083610772565b6107b984610237565b6040516020016107ca92919061120d565b60405160208183030381529060405290506107e48161080b565b6040516020016107f49190611304565b604051602081830303815290604052915050919050565b6060815160000361082a57505060408051602081019091526000815290565b600060405180606001604052806040815260200161137460409139905060006003845160026108599190611349565b6108639190610ddd565b61086e90600461135c565b67ffffffffffffffff81111561088657610886610ae1565b6040519080825280601f01601f1916602001820160405280156108b0576020820181803683370190505b509050600182016020820185865187015b8082101561091c576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453506001830192506108c1565b5050600386510660018114610938576002811461094b57610953565b603d6001830353603d6002830353610953565b603d60018303535b509195945050505050565b6060600061096b836109fe565b600101905060008167ffffffffffffffff81111561098b5761098b610ae1565b6040519080825280601f01601f1916602001820160405280156109b5576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846109bf57509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610a47577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610a73576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610a9157662386f26fc10000830492506010015b6305f5e1008310610aa9576305f5e100830492506008015b6127108310610abd57612710830492506004015b60648310610acf576064830492506002015b600a8310610adb576001015b92915050565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715610b1a57610b1a610ae1565b60405290565b61ffff81168114610b3057600080fd5b50565b60008060008084860360e0811215610b4a57600080fd5b853594506080601f1982011215610b6057600080fd5b50610b69610af7565b6020860135610b7781610b20565b81526040860135610b8781610b20565b60208201526060860135610b9a81610b20565b60408201526080860135610bad81610b20565b6060820152925060a0850135915060c08501358015158114610bce57600080fd5b939692955090935050565b60005b83811015610bf4578181015183820152602001610bdc565b50506000910152565b6020815260008251806020840152610c1c816040850160208701610bd9565b601f01601f19169190910160400192915050565b600060208284031215610c4257600080fd5b5035919050565b600060208284031215610c5b57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610c7f57600080fd5b9392505050565b7f3c673e0000000000000000000000000000000000000000000000000000000000815260008251610cbe816003850160208701610bd9565b631e17b39f60e11b6003939091019283015250600701919050565b600060208284031215610ceb57600080fd5b815163ffffffff81168114610c7f57600080fd5b600060808284031215610d1157600080fd5b610d19610af7565b8251610d2481610b20565b81526020830151610d3481610b20565b60208201526040830151610d4781610b20565b60408201526060830151610d5a81610b20565b60608201529392505050565b60008251610d78818460208701610bd9565b9190910192915050565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000815260008251610dba81601a850160208701610bd9565b91909101601a0192915050565b634e487b7160e01b600052601160045260246000fd5b600082610dfa57634e487b7160e01b600052601260045260246000fd5b500490565b61ffff818116838216028082169190828114610e1d57610e1d610dc7565b505092915050565b61ffff818116838216019080821115610e4057610e40610dc7565b5092915050565b600060208284031215610e5957600080fd5b815167ffffffffffffffff80821115610e7157600080fd5b818401915084601f830112610e8557600080fd5b815181811115610e9757610e97610ae1565b604051601f8201601f19908116603f01168101908382118183101715610ebf57610ebf610ae1565b81604052828152876020848701011115610ed857600080fd5b610ee9836020830160208801610bd9565b979650505050505050565b60008451610f06818460208901610bd9565b80830190507f3c706174682064203d20224d00000000000000000000000000000000000000008082528551610f4281600c850160208a01610bd9565b7f2030207620383022206f7061636974793d22302e3522202f3e00000000000000600c939091019283015260258201528351610f85816031840160208801610bd9565b7f2032363020762032383022206f7061636974793d22302e3522202f3e0000000060319290910191820152604d0195945050505050565b600061ffff808316818103610fd357610fd3610dc7565b6001019392505050565b60008251610fef818460208701610bd9565b631e17b39f60e11b920191825250600401919050565b7f3c7376672076696577426f783d2230203020353132203531322220786d6c6e7381527f3d22687474703a2f2f7777772e77332e6f72672f323030302f737667223e000060208201527f3c636c6970506174682069643d22626f78223e3c7061746820643d224d302030603e8201527f683531327635313248307a222f3e3c2f636c6970506174683e00000000000000605e8201527f3c7376672076696577426f783d2230203020353132203531322220636c69702d60778201527f706174683d2275726c2823626f7829223e0000000000000000000000000000006097820152600082516110fb8160a8850160208701610bd9565b7f3c2f7376673e3c2f7376673e000000000000000000000000000000000000000060a893909101928301525060b401919050565b7f226e616d65223a202254776f204d6f6f6e7320536b79204d617468202300000081526000825161116781601d850160208701610bd9565b7f222c000000000000000000000000000000000000000000000000000000000000601d9390910192830152507f226465736372697074696f6e223a202241206d617468656d61746963616c2061601f8201527f6e6f6d616c7920666f7220796f75722054776f204d6f6f6e73204e6967687420603f8201527f536b792200000000000000000000000000000000000000000000000000000000605f820152606301919050565b7f7b00000000000000000000000000000000000000000000000000000000000000815260008351611245816001850160208801610bd9565b7f2c000000000000000000000000000000000000000000000000000000000000006001918401918201527f22696d616765223a202200000000000000000000000000000000000000000000600282015283516112a881600c840160208801610bd9565b7f2200000000000000000000000000000000000000000000000000000000000000600c92909101918201527f7d00000000000000000000000000000000000000000000000000000000000000600d820152600e01949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161133c81601d850160208701610bd9565b91909101601d0192915050565b80820180821115610adb57610adb610dc7565b8082028115828204841417610adb57610adb610dc756fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220cfb8163d5574f081e791e02984fbfc5bc85693f4202a741e5319e4cab548e46364736f6c63430008120033",
  "libraries": {
    "Color": "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8430,
        "contract": "contracts/chainellations/decos/SkyCircle.sol:SkyCircle",
        "label": "soulbound",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}