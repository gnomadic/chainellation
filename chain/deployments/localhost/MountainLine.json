{
  "address": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
  "abi": [
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SoulBound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "groundSeed",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "H",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "S",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "L",
              "type": "uint16"
            }
          ],
          "internalType": "struct Color.HSL",
          "name": "primary",
          "type": "tuple"
        }
      ],
      "name": "buildMountains",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "generateCharacter",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "primaryHue",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "secondaryHue",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "constellation",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "cloudsAt",
              "type": "uint16"
            }
          ],
          "internalType": "struct Color.DNA",
          "name": "dna",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "gazes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "daytime",
          "type": "bool"
        }
      ],
      "name": "getDeco",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getMetadata",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "groundSeed",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "nonce",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "height",
          "type": "uint16"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "H",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "S",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "L",
              "type": "uint16"
            }
          ],
          "internalType": "struct Color.HSL",
          "name": "background",
          "type": "tuple"
        }
      ],
      "name": "getSingleMountain",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "groundSeed",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "nonce",
          "type": "uint16"
        }
      ],
      "name": "getXCoordsArray",
      "outputs": [
        {
          "internalType": "uint16[]",
          "name": "",
          "type": "uint16[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "groundSeed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "height",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "inputArray",
          "type": "uint16[]"
        }
      ],
      "name": "getYCoords2",
      "outputs": [
        {
          "internalType": "uint16[]",
          "name": "",
          "type": "uint16[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "primaryHue",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "secondaryHue",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "constellation",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "cloudsAt",
              "type": "uint16"
            }
          ],
          "internalType": "struct Color.DNA",
          "name": "dna",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "gazes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "daytime",
          "type": "bool"
        }
      ],
      "name": "packageAsSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "soulbind",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "soulbound",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x50b00d39aea9846e22eb8174de15826809f1324178add05e6089802e8c6a9736",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
    "transactionIndex": 0,
    "gasUsed": "2245447",
    "logsBloom": "0x
    "blockHash": "0x22d2f0f2f070c3faff5fd3930f8b0305ef06252839b0633d748b4622d771af80",
    "transactionHash": "0x50b00d39aea9846e22eb8174de15826809f1324178add05e6089802e8c6a9736",
    "logs": [],
    "blockNumber": 13,
    "cumulativeGasUsed": "2245447",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "594e9ccd906bd68cfdce016c4dc374de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SoulBound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"groundSeed\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"H\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"S\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"L\",\"type\":\"uint16\"}],\"internalType\":\"struct Color.HSL\",\"name\":\"primary\",\"type\":\"tuple\"}],\"name\":\"buildMountains\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"generateCharacter\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"primaryHue\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"secondaryHue\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"constellation\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cloudsAt\",\"type\":\"uint16\"}],\"internalType\":\"struct Color.DNA\",\"name\":\"dna\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"gazes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"daytime\",\"type\":\"bool\"}],\"name\":\"getDeco\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"groundSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"nonce\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"height\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"H\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"S\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"L\",\"type\":\"uint16\"}],\"internalType\":\"struct Color.HSL\",\"name\":\"background\",\"type\":\"tuple\"}],\"name\":\"getSingleMountain\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"groundSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"nonce\",\"type\":\"uint16\"}],\"name\":\"getXCoordsArray\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"groundSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"height\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"inputArray\",\"type\":\"uint16[]\"}],\"name\":\"getYCoords2\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"primaryHue\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"secondaryHue\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"constellation\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cloudsAt\",\"type\":\"uint16\"}],\"internalType\":\"struct Color.DNA\",\"name\":\"dna\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"gazes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"daytime\",\"type\":\"bool\"}],\"name\":\"packageAsSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"soulbind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"soulbound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/chainellations/decos/MountainLine.sol\":\"MountainLine\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Color.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary Color {\\n    using Strings for uint256;\\n\\n    // TODO bytepack this and unpack it - probably want utility, but based on usage\\n    struct DNA {\\n        uint16 primaryHue;\\n        uint16 secondaryHue;\\n        uint16 constellation;\\n        uint16 cloudsAt;\\n    }\\n\\n    struct HSL {\\n        uint16 H;\\n        uint16 S;\\n        uint16 L;\\n    }\\n\\n    function HSLtoString(HSL memory color) public pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"hsl(\\\",\\n                    ((uint256)(color.H)).toString(),\\n                    \\\",\\\",\\n                    ((uint256)(color.S)).toString(),\\n                    \\\"%,\\\",\\n                    ((uint256)(color.L)).toString(),\\n                    \\\"%)\\\"\\n                )\\n            );\\n    }\\n\\n    function toString(uint16 num) public pure returns (string memory) {\\n        return ((uint256)(num)).toString();\\n    }\\n\\n    function psuedorandom(\\n        uint256 tokenId,\\n        uint256 nonce\\n    ) public pure returns (uint256) {\\n        return uint(keccak256(abi.encodePacked(tokenId, nonce)));\\n    }\\n\\n    function wiggle(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        uint16 base,\\n        uint16 offset\\n    ) public pure returns (uint16) {\\n        uint16 wiggleAmount = (uint16)(psuedorandom(tokenId, nonce) % offset);\\n        if ((uint8)(psuedorandom(tokenId, nonce) % 2) == 0) {\\n            return base + wiggleAmount;\\n        } else {\\n            return subZero(base, wiggleAmount);\\n        }\\n    }\\n\\n    function wiggleString(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        uint16 base,\\n        uint16 offset\\n    ) public pure returns (string memory) {\\n        return toString(wiggle(tokenId, nonce, base, offset));\\n    }\\n\\n    function wiggleUp(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        uint16 base,\\n        uint16 offset\\n    ) public pure returns (uint16) {\\n        uint16 wiggleAmount = (uint16)(psuedorandom(tokenId, nonce) % offset);\\n        return base + wiggleAmount;\\n    }\\n\\n    function subZero(uint16 first, uint16 second) public pure returns (uint16) {\\n        if (first > second) {\\n            return first - second;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function flipColor(\\n        Color.HSL memory color\\n    ) public pure returns (Color.HSL memory) {\\n        uint16 newH = color.H + 180 > 360 ? color.H - 180 : color.H + 180;\\n        return Color.HSL(newH, color.S, color.L);\\n    }\\n\\n    function rotateColor(\\n        Color.HSL memory color,\\n        uint16 amount\\n    ) public pure returns (Color.HSL memory) {\\n        uint16 hue = (color.H + amount) % 360;\\n        return Color.HSL(hue, color.S, color.L);\\n    }\\n\\n    function genDNA(\\n        uint256 tokenId,\\n        uint32 colors,\\n        uint16 clouds,\\n        uint16 constellation\\n    ) public pure returns (DNA memory) {\\n        DNA memory dna;\\n        // dna.tokenId = tokenId;\\n        dna.primaryHue = uint16(colors >> 16);\\n        dna.secondaryHue = uint16(colors);\\n        // dna.starSeed = psuedorandom(tokenId, 123);\\n        // dna.funkSeed = psuedorandom(tokenId, 234);\\n        // dna.circleSeed = psuedorandom(tokenId, 345);\\n        // dna.groundSeed = psuedorandom(tokenId, 456);\\n        dna.constellation = constellation;\\n        dna.cloudsAt = clouds;\\n\\n        return dna;\\n    }\\n\\n    function defaultColors(uint256 tokenId) public pure returns (uint32) {\\n        uint16 primary = uint16((tokenId % 16) * 10);\\n        uint16 secondary = rotateColor(HSL(primary, 0, 0), 60).H;\\n        return (uint32(primary) << 16) | uint32(secondary);\\n    }\\n}\\n\",\"keccak256\":\"0x4cf680750f0dcd97507cfaf9e74b7baf28d8ea63d9772f3c76de06af144c23da\",\"license\":\"MIT\"},\"contracts/chainellations/decos/MountainLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"../../interfaces/IDeco.sol\\\";\\n\\ncontract MountainLine is IDeco {\\n    using Strings for uint256;\\n\\n    function getMetadata(\\n        uint256 tokenId\\n    ) public view override returns (string memory) {\\n        return\\n            string.concat(\\n                '\\\"name\\\": \\\"chainellation Mountains #',\\n                tokenId.toString(),\\n                '\\\",',\\n                '\\\"description\\\": \\\"A mountline Silhouette for your Two Moons Night Sky\\\"'\\n            );\\n    }\\n\\n    function getDeco(\\n        uint256 tokenId,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) public pure override returns (string memory) {\\n        return\\n            string.concat(\\n                '<g id=\\\"silhouette\\\">',\\n                '<filter id=\\\"g\\\"><feDropShadow dy=\\\"-5\\\" stdDeviation=\\\"5\\\" flood-color=\\\"#fff\\\" flood-opacity=\\\".1\\\"/></filter>',\\n                buildMountains(tokenId, Color.HSL(dna.primaryHue, 100, 30)),\\n                \\\"</g>\\\"\\n            );\\n    }\\n\\n    function buildMountains(\\n        uint256 groundSeed,\\n        Color.HSL memory primary\\n    ) public pure returns (string memory) {\\n        Color.HSL memory background = primary;\\n\\n        string memory mountains = \\\"\\\";\\n        uint16 baseS = 50;\\n        uint16 baseL = 20; //24;\\n\\n        background.S = baseS;\\n        background.L = baseL;\\n\\n        for (uint16 i = 1; i < 4; i++) {\\n            background.L = Color.subZero(baseL, (5 * (i + 1)));\\n\\n            mountains = string.concat(\\n                mountains,\\n                getSingleMountain(\\n                    groundSeed,\\n                    i,\\n                    270 + Color.wiggleUp(groundSeed, i, (i * 50), 20),\\n                    background\\n                )\\n            );\\n        }\\n        background.L = 0;\\n\\n        return mountains;\\n    }\\n\\n    function getSingleMountain(\\n        uint256 groundSeed,\\n        uint16 nonce,\\n        uint16 height,\\n        Color.HSL memory background\\n    ) public pure returns (string memory) {\\n        uint16[] memory xCoords = getXCoordsArray(groundSeed, nonce);\\n\\n        uint16[] memory yCoords = getYCoords2(\\n            groundSeed,\\n            nonce,\\n            height,\\n            xCoords\\n        );\\n\\n        uint16 distance = (uint16)(512 / xCoords[xCoords.length - 1]) + 1;\\n\\n        string memory land = string.concat(\\n            '<path  d=\\\"M ',\\n            Color.toString((xCoords[0]) * distance),\\n            \\\", \\\",\\n            Color.toString(yCoords[0])\\n        );\\n\\n        for (uint16 i = 1; i < xCoords.length; i++) {\\n            land = string.concat(\\n                land,\\n                \\\" C \\\",\\n                Color.toString(\\n                    (xCoords[i - 1] * distance) +\\n                        (((xCoords[i] * distance) -\\n                            (xCoords[i - 1] * distance)) / 2)\\n                ),\\n                \\\", \\\",\\n                Color.toString(yCoords[i] - (distance / 2)),\\n                \\\" \\\",\\n                Color.toString(\\n                    (xCoords[i - 1] * distance) +\\n                        (((xCoords[i] * distance) -\\n                            (xCoords[i - 1] * distance)) / 2)\\n                ),\\n                \\\", \\\",\\n                Color.toString(yCoords[i] - (distance / 2)),\\n                \\\" \\\",\\n                Color.toString((xCoords[i] + 0) * distance),\\n                \\\", \\\",\\n                Color.toString(yCoords[i]),\\n                \\\" \\\"\\n            );\\n        }\\n\\n        land = string.concat(\\n            land,\\n            \\\" L 512, \\\",\\n            Color.wiggleString(\\n                groundSeed,\\n                nonce,\\n                yCoords[yCoords.length - 1],\\n                10\\n            )\\n        );\\n\\n        land = string.concat(\\n            land,\\n            ' L 512, 512 L 0 512 z\\\" fill=\\\"',\\n            Color.HSLtoString(background),\\n            '\\\" filter=\\\"url(#g)\\\"/>'\\n        );\\n\\n        return land;\\n    }\\n\\n    function getXCoordsArray(\\n        uint256 groundSeed,\\n        uint16 nonce\\n    ) public pure returns (uint16[] memory) {\\n        uint16 valleyCount = (uint16)(\\n            (Color.psuedorandom(groundSeed, nonce) % 20) + 18\\n        );\\n\\n        uint16[] memory valleys = new uint16[](valleyCount);\\n        valleys[0] = 0;\\n\\n        for (uint16 i = 1; i < valleyCount; i++) {\\n            valleys[i] =\\n                Color.wiggleUp(groundSeed, nonce * i, valleys[i - 1] + 1, 5) +\\n                1;\\n        }\\n\\n        return (valleys);\\n    }\\n\\n    function getYCoords2(\\n        uint256 groundSeed,\\n        uint256 nonce,\\n        uint16 height,\\n        uint16[] memory inputArray\\n    ) public pure returns (uint16[] memory) {\\n        uint16[] memory outputArray = new uint16[](inputArray.length);\\n\\n        uint16 midpoint = Color.wiggle(\\n            groundSeed,\\n            nonce,\\n            (uint16)(inputArray.length / 2),\\n            2\\n        );\\n\\n        uint8 groupSize = 0;\\n\\n        uint16 currentNum = (uint16)(height);\\n\\n        bool add = true;\\n\\n        outputArray[0] = height;\\n        for (uint16 i = 1; i < inputArray.length; i++) {\\n            if (i == midpoint) {\\n                outputArray[i] = currentNum + 5;\\n            } else {\\n                if (i < midpoint) {\\n                    add = true;\\n                } else if (i > midpoint) {\\n                    add = false;\\n                }\\n\\n                if (\\n                    i == 0 ||\\n                    (inputArray[i] - inputArray[i - 1] < 2) ||\\n                    groupSize < 4\\n                ) {\\n                    outputArray[i] =\\n                        Color.wiggle(groundSeed, nonce * i, currentNum, 5) +\\n                        3;\\n                    groupSize++;\\n                } else {\\n                    if (add) {\\n                        currentNum = currentNum + 10;\\n                    } else {\\n                        currentNum = currentNum - 10;\\n                    }\\n\\n                    outputArray[i] =\\n                        Color.wiggle(groundSeed, nonce * i, currentNum, 7) +\\n                        8;\\n                    groupSize = 0;\\n                }\\n            }\\n        }\\n        return outputArray;\\n    }\\n}\\n\",\"keccak256\":\"0x74de511e3745b37d6d064e29ff600259fb8c645538fac52bc32a047cdcb51fb9\",\"license\":\"MIT\"},\"contracts/interfaces/IDeco.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\nimport \\\"../Color.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\nabstract contract IDeco {\\n    mapping(uint256 => bool) public soulbound;\\n\\n    function soulbind(uint256 tokenId) external {\\n        if (ownerOf(tokenId) != tx.origin) revert NotOwner();\\n        soulbound[tokenId] = true;\\n    }\\n\\n    function getDeco(\\n        uint256 tokenId,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) public view virtual returns (string memory);\\n\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        //TODO this is rough - the msg.sender is the Decoration contract but I need check with the EOA\\n        //breaks support for gas stations and contract owners.\\n        return tx.origin;\\n    }\\n\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        return 1;\\n    }\\n\\n    function packageAsSVG(\\n        uint256 tokenId,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) public view returns (string memory) {\\n        return\\n            string.concat(\\n                '<svg viewBox=\\\"0 0 512 512\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">',\\n                '<clipPath id=\\\"box\\\"><path d=\\\"M0 0h512v512H0z\\\"/></clipPath>',\\n                '<svg viewBox=\\\"0 0 512 512\\\" clip-path=\\\"url(#box)\\\">',\\n                getDeco(tokenId, dna, gazes, daytime),\\n                \\\"</svg></svg>\\\"\\n            );\\n    }\\n\\n    function generateCharacter(\\n        uint256 tokenId\\n    ) public view returns (string memory) {\\n        Color.DNA memory dna = Color.genDNA(\\n            tokenId,\\n            Color.defaultColors(tokenId),\\n            0,\\n            0\\n        );\\n        bytes memory svg = abi.encodePacked(\\n            packageAsSVG(tokenId, dna, 0, true)\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:image/svg+xml;base64,\\\",\\n                    Base64.encode(svg)\\n                )\\n            );\\n    }\\n\\n    function getMetadata(\\n        uint256 tokenId\\n    ) public view virtual returns (string memory);\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual returns (string memory) {\\n        bytes memory dataURI = abi.encodePacked(\\n            \\\"{\\\",\\n            getMetadata(tokenId),\\n            \\\",\\\",\\n            '\\\"image\\\": \\\"',\\n            generateCharacter(tokenId),\\n            '\\\"',\\n            \\\"}\\\"\\n        );\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(dataURI)\\n                )\\n            );\\n    }\\n\\n    error NotOwner();\\n    error SoulBound();\\n}\\n\",\"keccak256\":\"0x8489b63a8c83ed37f76e0e6f7fe254b1bfe72f7183aec935941056c8a2d0c07f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506127c3806100206000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80638036d1351161008c578063a574cea411610066578063a574cea41461021e578063b3dcf5da14610231578063c87b56dd14610244578063e87e3a2b1461025757600080fd5b80638036d135146101d8578063960384e8146101eb5780639ffab72a146101fe57600080fd5b80636352211e116100bd5780636352211e1461014b57806370a08231146101835780637a181597146101a557600080fd5b806302e9dd09146100e457806306febcba1461010d5780630daefed514610138575b600080fd5b6100f76100f23660046119ad565b61026a565b6040516101049190611a77565b60405180910390f35b61013661011b366004611aaa565b6000908152602081905260409020805460ff19166001179055565b005b6100f7610146366004611aaa565b6102c1565b61015e610159366004611aaa565b503290565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610104565b610197610191366004611ac3565b50600190565b604051908152602001610104565b6101c86101b3366004611aaa565b60006020819052908152604090205460ff1681565b6040519015158152602001610104565b6100f76101e6366004611b76565b610437565b6100f76101f93660046119ad565b610d39565b61021161020c366004611bc8565b610d57565b6040516101049190611ca0565b6100f761022c366004611aaa565b611181565b61021161023f366004611ce8565b6111b2565b6100f7610252366004611aaa565b611411565b6100f7610265366004611d18565b611479565b6040805160608181018352855161ffff16825260646020830152601e92820192909252610298908690611479565b6040516020016102a89190611d61565b6040516020818303038152906040529050949350505050565b60606000735FbDB2315678afecb367f032d93F642f64180aa363974bec1884735FbDB2315678afecb367f032d93F642f64180aa3638f6aa355876040518263ffffffff1660e01b815260040161031991815260200190565b602060405180830381865af4158015610336573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035a9190611e65565b6040516001600160e01b031960e085901b168152600481019290925263ffffffff1660248201526000604482018190526064820152608401608060405180830381865af41580156103af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d39190611e8b565b905060006103e5848360006001610d39565b6040516020016103f59190611ef2565b604051602081830303815290604052905061040f81611655565b60405160200161041f9190611f0e565b60405160208183030381529060405292505050919050565b6060600061044586866111b2565b90506000610459878761ffff168785610d57565b90506000826001845161046c9190611f69565b8151811061047c5761047c611f7c565b60200260200101516102006104919190611fa8565b61049c906001611fc9565b90506000735FbDB2315678afecb367f032d93F642f64180aa3631b0d4b4d83866000815181106104ce576104ce611f7c565b60200260200101516104e09190611feb565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af415801561051f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105479190810190612011565b735FbDB2315678afecb367f032d93F642f64180aa3631b0d4b4d8560008151811061057457610574611f7c565b60200260200101516040518263ffffffff1660e01b81526004016105a2919061ffff91909116815260200190565b600060405180830381865af41580156105bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105e79190810190612011565b6040516020016105f892919061209c565b60408051601f19818403018152919052905060015b84518161ffff161015610b765781735FbDB2315678afecb367f032d93F642f64180aa3631b0d4b4d60028689610644600188612102565b61ffff168151811061065857610658611f7c565b602002602001015161066a9190611feb565b878a8761ffff168151811061068157610681611f7c565b60200260200101516106939190611feb565b61069d9190612102565b6106a79190611fa8565b86896106b4600188612102565b61ffff16815181106106c8576106c8611f7c565b60200260200101516106da9190611feb565b6106e49190611fc9565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610723573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261074b9190810190612011565b735FbDB2315678afecb367f032d93F642f64180aa3631b0d4b4d610770600288611fa8565b888661ffff168151811061078657610786611f7c565b60200260200101516107989190612102565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af41580156107d7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107ff9190810190612011565b735FbDB2315678afecb367f032d93F642f64180aa3631b0d4b4d6002888b61082860018a612102565b61ffff168151811061083c5761083c611f7c565b602002602001015161084e9190611feb565b898c8961ffff168151811061086557610865611f7c565b60200260200101516108779190611feb565b6108819190612102565b61088b9190611fa8565b888b61089860018a612102565b61ffff16815181106108ac576108ac611f7c565b60200260200101516108be9190611feb565b6108c89190611fc9565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610907573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261092f9190810190612011565b735FbDB2315678afecb367f032d93F642f64180aa3631b0d4b4d61095460028a611fa8565b8a8861ffff168151811061096a5761096a611f7c565b602002602001015161097c9190612102565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af41580156109bb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109e39190810190612011565b735FbDB2315678afecb367f032d93F642f64180aa3631b0d4b4d898c8961ffff1681518110610a1457610a14611f7c565b60200260200101516000610a289190611fc9565b610a329190611feb565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610a71573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a999190810190612011565b735FbDB2315678afecb367f032d93F642f64180aa3631b0d4b4d8b8961ffff1681518110610ac957610ac9611f7c565b60200260200101516040518263ffffffff1660e01b8152600401610af7919061ffff91909116815260200190565b600060405180830381865af4158015610b14573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b3c9190810190612011565b604051602001610b52979695949392919061211d565b60405160208183030381529060405291508080610b6e90612212565b91505061060d565b5080735FbDB2315678afecb367f032d93F642f64180aa363d7ec08e78b8b8760018951610ba39190611f69565b81518110610bb357610bb3611f7c565b60209081029190910101516040516001600160e01b031960e086901b168152600481019390935261ffff9182166024840152166044820152600a6064820152608401600060405180830381865af4158015610c12573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c3a9190810190612011565b604051602001610c4b929190612233565b60408051808303601f190181528282527f0fc5c9fc000000000000000000000000000000000000000000000000000000008352885161ffff908116600485015260208a01518116602485015291890151909116604483015291508190735FbDB2315678afecb367f032d93F642f64180aa390630fc5c9fc90606401600060405180830381865af4158015610ce3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d0b9190810190612011565b604051602001610d1c92919061228b565b60408051808303601f190181529190529998505050505050505050565b6060610d478585858561026a565b6040516020016102a8919061230d565b60606000825167ffffffffffffffff811115610d7557610d7561192a565b604051908082528060200260200182016040528015610d9e578160200160208202803683370190505b5090506000735FbDB2315678afecb367f032d93F642f64180aa363210636e9888860028851610dcd9190612437565b6040516001600160e01b031960e086901b1681526004810193909352602483019190915261ffff16604482015260026064820152608401602060405180830381865af4158015610e21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e45919061244b565b90506000808690506000600190508785600081518110610e6757610e67611f7c565b61ffff9092166020928302919091019091015260015b87518161ffff161015611172578461ffff168161ffff1603610ed557610ea4836005611fc9565b868261ffff1681518110610eba57610eba611f7c565b602002602001019061ffff16908161ffff1681525050611160565b8461ffff168161ffff161015610eee5760019150610f03565b8461ffff168161ffff161115610f0357600091505b61ffff81161580610f675750600288610f1d600184612102565b61ffff1681518110610f3157610f31611f7c565b6020026020010151898361ffff1681518110610f4f57610f4f611f7c565b6020026020010151610f619190612102565b61ffff16105b80610f75575060048460ff16105b1561105f57735FbDB2315678afecb367f032d93F642f64180aa363210636e98c610fa361ffff85168e612468565b6040516001600160e01b031960e085901b1681526004810192909252602482015261ffff8616604482015260056064820152608401602060405180830381865af4158015610ff5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611019919061244b565b611024906003611fc9565b868261ffff168151811061103a5761103a611f7c565b61ffff90921660209283029190910190910152836110578161247f565b945050611160565b81156110775761107083600a611fc9565b9250611085565b611082600a84612102565b92505b735FbDB2315678afecb367f032d93F642f64180aa363210636e98c6110ae61ffff85168e612468565b6040516001600160e01b031960e085901b1681526004810192909252602482015261ffff8616604482015260076064820152608401602060405180830381865af4158015611100573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611124919061244b565b61112f906008611fc9565b868261ffff168151811061114557611145611f7c565b602002602001019061ffff16908161ffff1681525050600093505b8061116a81612212565b915050610e7d565b50939998505050505050505050565b606061118c826117a8565b60405160200161119c919061249e565b6040516020818303038152906040529050919050565b6040517f3a20c8790000000000000000000000000000000000000000000000000000000081526004810183905261ffff82166024820152606090600090601490735FbDB2315678afecb367f032d93F642f64180aa390633a20c87990604401602060405180830381865af415801561122e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125291906125a2565b61125c91906125bb565b6112679060126125cf565b905060008161ffff1667ffffffffffffffff8111156112885761128861192a565b6040519080825280602002602001820160405280156112b1578160200160208202803683370190505b5090506000816000815181106112c9576112c9611f7c565b61ffff9092166020928302919091019091015260015b8261ffff168161ffff16101561140657735FbDB2315678afecb367f032d93F642f64180aa363dcaa2044876113148489611feb565b85611320600187612102565b61ffff168151811061133457611334611f7c565b602002602001015160016113489190611fc9565b6040516001600160e01b031960e086901b168152600481019390935261ffff918216602484015216604482015260056064820152608401602060405180830381865af415801561139c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c0919061244b565b6113cb906001611fc9565b828261ffff16815181106113e1576113e1611f7c565b61ffff90921660209283029190910190910152806113fe81612212565b9150506112df565b509150505b92915050565b6060600061141e83611181565b611427846102c1565b6040516020016114389291906125e2565b604051602081830303815290604052905061145281611655565b60405160200161146291906126d9565b604051602081830303815290604052915050919050565b604080516020808201835260008252603290840181905260149284018390526060928492919060015b60048161ffff16101561163f57735FbDB2315678afecb367f032d93F642f64180aa3633329f04f836114d5846001611fc9565b6114e0906005611feb565b6040516001600160e01b031960e085901b16815261ffff928316600482015291166024820152604401602060405180830381865af4158015611526573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154a919061244b565b61ffff1660408601528361160a8983735FbDB2315678afecb367f032d93F642f64180aa363dcaa20448383611580816032611feb565b6040516001600160e01b031960e086901b168152600481019390935261ffff918216602484015216604482015260146064820152608401602060405180830381865af41580156115d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f8919061244b565b6116049061010e611fc9565b89610437565b60405160200161161b92919061271e565b6040516020818303038152906040529350808061163790612212565b9150506114a2565b5050600060409093019290925291505092915050565b6060815160000361167457505060408051602081019091526000815290565b600060405180606001604052806040815260200161274e60409139905060006003845160026116a391906125cf565b6116ad9190612437565b6116b8906004612468565b67ffffffffffffffff8111156116d0576116d061192a565b6040519080825280601f01601f1916602001820160405280156116fa576020820181803683370190505b509050600182016020820185865187015b80821015611766576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f811685015184535060018301925061170b565b505060038651066001811461178257600281146117955761179d565b603d6001830353603d600283035361179d565b603d60018303535b509195945050505050565b606060006117b583611848565b600101905060008167ffffffffffffffff8111156117d5576117d561192a565b6040519080825280601f01601f1916602001820160405280156117ff576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461180957509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611891577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106118bd576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106118db57662386f26fc10000830492506010015b6305f5e10083106118f3576305f5e100830492506008015b612710831061190757612710830492506004015b60648310611919576064830492506002015b600a831061140b5760010192915050565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156119635761196361192a565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156119925761199261192a565b604052919050565b61ffff811681146119aa57600080fd5b50565b60008060008084860360e08112156119c457600080fd5b853594506080601f19820112156119da57600080fd5b506119e3611940565b60208601356119f18161199a565b81526040860135611a018161199a565b60208201526060860135611a148161199a565b60408201526080860135611a278161199a565b6060820152925060a0850135915060c08501358015158114611a4857600080fd5b939692955090935050565b60005b83811015611a6e578181015183820152602001611a56565b50506000910152565b6020815260008251806020840152611a96816040850160208701611a53565b601f01601f19169190910160400192915050565b600060208284031215611abc57600080fd5b5035919050565b600060208284031215611ad557600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114611af957600080fd5b9392505050565b600060608284031215611b1257600080fd5b6040516060810181811067ffffffffffffffff82111715611b3557611b3561192a565b6040529050808235611b468161199a565b81526020830135611b568161199a565b60208201526040830135611b698161199a565b6040919091015292915050565b60008060008060c08587031215611b8c57600080fd5b843593506020850135611b9e8161199a565b92506040850135611bae8161199a565b9150611bbd8660608701611b00565b905092959194509250565b60008060008060808587031215611bde57600080fd5b8435935060208086013593506040860135611bf88161199a565b9250606086013567ffffffffffffffff80821115611c1557600080fd5b818801915088601f830112611c2957600080fd5b813581811115611c3b57611c3b61192a565b8060051b9150611c4c848301611969565b818152918301840191848101908b841115611c6657600080fd5b938501935b83851015611c905784359250611c808361199a565b8282529385019390850190611c6b565b989b979a50959850505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611cdc57835161ffff1683529284019291840191600101611cbc565b50909695505050505050565b60008060408385031215611cfb57600080fd5b823591506020830135611d0d8161199a565b809150509250929050565b60008060808385031215611d2b57600080fd5b82359150611d3c8460208501611b00565b90509250929050565b60008151611d57818560208601611a53565b9290920192915050565b7f3c672069643d2273696c686f7565747465223e0000000000000000000000000081527f3c66696c7465722069643d2267223e3c666544726f70536861646f772064793d60138201527f222d352220737464446576696174696f6e3d22352220666c6f6f642d636f6c6f60338201527f723d22236666662220666c6f6f642d6f7061636974793d222e31222f3e3c2f6660538201527f696c7465723e0000000000000000000000000000000000000000000000000000607382015260008251611e31816079850160208701611a53565b7f3c2f673e000000000000000000000000000000000000000000000000000000006079939091019283015250607d01919050565b600060208284031215611e7757600080fd5b815163ffffffff81168114611af957600080fd5b600060808284031215611e9d57600080fd5b611ea5611940565b8251611eb08161199a565b81526020830151611ec08161199a565b60208201526040830151611ed38161199a565b60408201526060830151611ee68161199a565b60608201529392505050565b60008251611f04818460208701611a53565b9190910192915050565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000815260008251611f4681601a850160208701611a53565b91909101601a0192915050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561140b5761140b611f53565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600061ffff80841680611fbd57611fbd611f92565b92169190910492915050565b61ffff818116838216019080821115611fe457611fe4611f53565b5092915050565b61ffff81811683821602808216919082811461200957612009611f53565b505092915050565b60006020828403121561202357600080fd5b815167ffffffffffffffff8082111561203b57600080fd5b818401915084601f83011261204f57600080fd5b8151818111156120615761206161192a565b612074601f8201601f1916602001611969565b915080825285602082850101111561208b57600080fd5b611406816020840160208601611a53565b7f3c706174682020643d224d2000000000000000000000000000000000000000008152600083516120d481600c850160208801611a53565b61016160f51b600c9184019182015283516120f681600e840160208801611a53565b01600e01949350505050565b61ffff828116828216039080821115611fe457611fe4611f53565b6000885161212f818460208d01611a53565b7f20432000000000000000000000000000000000000000000000000000000000009083019081528851612169816003840160208d01611a53565b61016160f51b60039290910191820152875161218c816005840160208c01611a53565b600160fd1b6005929091019182015286516121ae816006840160208b01611a53565b016121c06006820161016160f51b9052565b6121cd6008820187611d45565b600160fd1b815290506121e36001820186611d45565b61016160f51b815290506121fa6002820185611d45565b600160fd1b81526001019a9950505050505050505050565b600061ffff80831681810361222957612229611f53565b6001019392505050565b60008351612245818460208801611a53565b7f204c203531322c20000000000000000000000000000000000000000000000000908301908152835161227f816008840160208801611a53565b01600801949350505050565b6000835161229d818460208801611a53565b7f204c203531322c20353132204c203020353132207a222066696c6c3d2200000090830190815283516122d781601d840160208801611a53565b7f222066696c7465723d2275726c28236729222f3e000000000000000000000000601d9290910191820152603101949350505050565b7f3c7376672076696577426f783d2230203020353132203531322220786d6c6e7381527f3d22687474703a2f2f7777772e77332e6f72672f323030302f737667223e000060208201527f3c636c6970506174682069643d22626f78223e3c7061746820643d224d302030603e8201527f683531327635313248307a222f3e3c2f636c6970506174683e00000000000000605e8201527f3c7376672076696577426f783d2230203020353132203531322220636c69702d60778201527f706174683d2275726c2823626f7829223e0000000000000000000000000000006097820152600082516124038160a8850160208701611a53565b7f3c2f7376673e3c2f7376673e000000000000000000000000000000000000000060a893909101928301525060b401919050565b60008261244657612446611f92565b500490565b60006020828403121561245d57600080fd5b8151611af98161199a565b808202811582820484141761140b5761140b611f53565b600060ff821660ff810361249557612495611f53565b60010192915050565b7f226e616d65223a2022636861696e656c6c6174696f6e204d6f756e7461696e7381527f20230000000000000000000000000000000000000000000000000000000000006020820152600082516124fc816022850160208701611a53565b7f222c00000000000000000000000000000000000000000000000000000000000060229390910192830152507f226465736372697074696f6e223a202241206d6f756e746c696e652053696c6860248201527f6f756574746520666f7220796f75722054776f204d6f6f6e73204e696768742060448201527f536b7922000000000000000000000000000000000000000000000000000000006064820152606801919050565b6000602082840312156125b457600080fd5b5051919050565b6000826125ca576125ca611f92565b500690565b8082018082111561140b5761140b611f53565b7f7b0000000000000000000000000000000000000000000000000000000000000081526000835161261a816001850160208801611a53565b7f2c000000000000000000000000000000000000000000000000000000000000006001918401918201527f22696d616765223a2022000000000000000000000000000000000000000000006002820152835161267d81600c840160208801611a53565b7f2200000000000000000000000000000000000000000000000000000000000000600c92909101918201527f7d00000000000000000000000000000000000000000000000000000000000000600d820152600e01949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161271181601d850160208701611a53565b91909101601d0192915050565b60008351612730818460208801611a53565b835190830190612744818360208801611a53565b0194935050505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220be06cd43552e9a5d1c2800dd8206997d2d04f276b209003dc841cf8f6a54309464736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c80638036d1351161008c578063a574cea411610066578063a574cea41461021e578063b3dcf5da14610231578063c87b56dd14610244578063e87e3a2b1461025757600080fd5b80638036d135146101d8578063960384e8146101eb5780639ffab72a146101fe57600080fd5b80636352211e116100bd5780636352211e1461014b57806370a08231146101835780637a181597146101a557600080fd5b806302e9dd09146100e457806306febcba1461010d5780630daefed514610138575b600080fd5b6100f76100f23660046119ad565b61026a565b6040516101049190611a77565b60405180910390f35b61013661011b366004611aaa565b6000908152602081905260409020805460ff19166001179055565b005b6100f7610146366004611aaa565b6102c1565b61015e610159366004611aaa565b503290565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610104565b610197610191366004611ac3565b50600190565b604051908152602001610104565b6101c86101b3366004611aaa565b60006020819052908152604090205460ff1681565b6040519015158152602001610104565b6100f76101e6366004611b76565b610437565b6100f76101f93660046119ad565b610d39565b61021161020c366004611bc8565b610d57565b6040516101049190611ca0565b6100f761022c366004611aaa565b611181565b61021161023f366004611ce8565b6111b2565b6100f7610252366004611aaa565b611411565b6100f7610265366004611d18565b611479565b6040805160608181018352855161ffff16825260646020830152601e92820192909252610298908690611479565b6040516020016102a89190611d61565b6040516020818303038152906040529050949350505050565b6060600073__$11e21e6c56ca563b85c74e3fd3a08242f9$__63974bec188473__$11e21e6c56ca563b85c74e3fd3a08242f9$__638f6aa355876040518263ffffffff1660e01b815260040161031991815260200190565b602060405180830381865af4158015610336573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035a9190611e65565b6040516001600160e01b031960e085901b168152600481019290925263ffffffff1660248201526000604482018190526064820152608401608060405180830381865af41580156103af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d39190611e8b565b905060006103e5848360006001610d39565b6040516020016103f59190611ef2565b604051602081830303815290604052905061040f81611655565b60405160200161041f9190611f0e565b60405160208183030381529060405292505050919050565b6060600061044586866111b2565b90506000610459878761ffff168785610d57565b90506000826001845161046c9190611f69565b8151811061047c5761047c611f7c565b60200260200101516102006104919190611fa8565b61049c906001611fc9565b9050600073__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d83866000815181106104ce576104ce611f7c565b60200260200101516104e09190611feb565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af415801561051f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105479190810190612011565b73__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d8560008151811061057457610574611f7c565b60200260200101516040518263ffffffff1660e01b81526004016105a2919061ffff91909116815260200190565b600060405180830381865af41580156105bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105e79190810190612011565b6040516020016105f892919061209c565b60408051601f19818403018152919052905060015b84518161ffff161015610b76578173__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d60028689610644600188612102565b61ffff168151811061065857610658611f7c565b602002602001015161066a9190611feb565b878a8761ffff168151811061068157610681611f7c565b60200260200101516106939190611feb565b61069d9190612102565b6106a79190611fa8565b86896106b4600188612102565b61ffff16815181106106c8576106c8611f7c565b60200260200101516106da9190611feb565b6106e49190611fc9565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610723573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261074b9190810190612011565b73__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d610770600288611fa8565b888661ffff168151811061078657610786611f7c565b60200260200101516107989190612102565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af41580156107d7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107ff9190810190612011565b73__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d6002888b61082860018a612102565b61ffff168151811061083c5761083c611f7c565b602002602001015161084e9190611feb565b898c8961ffff168151811061086557610865611f7c565b60200260200101516108779190611feb565b6108819190612102565b61088b9190611fa8565b888b61089860018a612102565b61ffff16815181106108ac576108ac611f7c565b60200260200101516108be9190611feb565b6108c89190611fc9565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610907573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261092f9190810190612011565b73__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d61095460028a611fa8565b8a8861ffff168151811061096a5761096a611f7c565b602002602001015161097c9190612102565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af41580156109bb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109e39190810190612011565b73__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d898c8961ffff1681518110610a1457610a14611f7c565b60200260200101516000610a289190611fc9565b610a329190611feb565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610a71573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a999190810190612011565b73__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d8b8961ffff1681518110610ac957610ac9611f7c565b60200260200101516040518263ffffffff1660e01b8152600401610af7919061ffff91909116815260200190565b600060405180830381865af4158015610b14573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b3c9190810190612011565b604051602001610b52979695949392919061211d565b60405160208183030381529060405291508080610b6e90612212565b91505061060d565b508073__$11e21e6c56ca563b85c74e3fd3a08242f9$__63d7ec08e78b8b8760018951610ba39190611f69565b81518110610bb357610bb3611f7c565b60209081029190910101516040516001600160e01b031960e086901b168152600481019390935261ffff9182166024840152166044820152600a6064820152608401600060405180830381865af4158015610c12573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c3a9190810190612011565b604051602001610c4b929190612233565b60408051808303601f190181528282527f0fc5c9fc000000000000000000000000000000000000000000000000000000008352885161ffff908116600485015260208a0151811660248501529189015190911660448301529150819073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90630fc5c9fc90606401600060405180830381865af4158015610ce3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d0b9190810190612011565b604051602001610d1c92919061228b565b60408051808303601f190181529190529998505050505050505050565b6060610d478585858561026a565b6040516020016102a8919061230d565b60606000825167ffffffffffffffff811115610d7557610d7561192a565b604051908082528060200260200182016040528015610d9e578160200160208202803683370190505b509050600073__$11e21e6c56ca563b85c74e3fd3a08242f9$__63210636e9888860028851610dcd9190612437565b6040516001600160e01b031960e086901b1681526004810193909352602483019190915261ffff16604482015260026064820152608401602060405180830381865af4158015610e21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e45919061244b565b90506000808690506000600190508785600081518110610e6757610e67611f7c565b61ffff9092166020928302919091019091015260015b87518161ffff161015611172578461ffff168161ffff1603610ed557610ea4836005611fc9565b868261ffff1681518110610eba57610eba611f7c565b602002602001019061ffff16908161ffff1681525050611160565b8461ffff168161ffff161015610eee5760019150610f03565b8461ffff168161ffff161115610f0357600091505b61ffff81161580610f675750600288610f1d600184612102565b61ffff1681518110610f3157610f31611f7c565b6020026020010151898361ffff1681518110610f4f57610f4f611f7c565b6020026020010151610f619190612102565b61ffff16105b80610f75575060048460ff16105b1561105f5773__$11e21e6c56ca563b85c74e3fd3a08242f9$__63210636e98c610fa361ffff85168e612468565b6040516001600160e01b031960e085901b1681526004810192909252602482015261ffff8616604482015260056064820152608401602060405180830381865af4158015610ff5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611019919061244b565b611024906003611fc9565b868261ffff168151811061103a5761103a611f7c565b61ffff90921660209283029190910190910152836110578161247f565b945050611160565b81156110775761107083600a611fc9565b9250611085565b611082600a84612102565b92505b73__$11e21e6c56ca563b85c74e3fd3a08242f9$__63210636e98c6110ae61ffff85168e612468565b6040516001600160e01b031960e085901b1681526004810192909252602482015261ffff8616604482015260076064820152608401602060405180830381865af4158015611100573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611124919061244b565b61112f906008611fc9565b868261ffff168151811061114557611145611f7c565b602002602001019061ffff16908161ffff1681525050600093505b8061116a81612212565b915050610e7d565b50939998505050505050505050565b606061118c826117a8565b60405160200161119c919061249e565b6040516020818303038152906040529050919050565b6040517f3a20c8790000000000000000000000000000000000000000000000000000000081526004810183905261ffff8216602482015260609060009060149073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90633a20c87990604401602060405180830381865af415801561122e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125291906125a2565b61125c91906125bb565b6112679060126125cf565b905060008161ffff1667ffffffffffffffff8111156112885761128861192a565b6040519080825280602002602001820160405280156112b1578160200160208202803683370190505b5090506000816000815181106112c9576112c9611f7c565b61ffff9092166020928302919091019091015260015b8261ffff168161ffff1610156114065773__$11e21e6c56ca563b85c74e3fd3a08242f9$__63dcaa2044876113148489611feb565b85611320600187612102565b61ffff168151811061133457611334611f7c565b602002602001015160016113489190611fc9565b6040516001600160e01b031960e086901b168152600481019390935261ffff918216602484015216604482015260056064820152608401602060405180830381865af415801561139c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c0919061244b565b6113cb906001611fc9565b828261ffff16815181106113e1576113e1611f7c565b61ffff90921660209283029190910190910152806113fe81612212565b9150506112df565b509150505b92915050565b6060600061141e83611181565b611427846102c1565b6040516020016114389291906125e2565b604051602081830303815290604052905061145281611655565b60405160200161146291906126d9565b604051602081830303815290604052915050919050565b604080516020808201835260008252603290840181905260149284018390526060928492919060015b60048161ffff16101561163f5773__$11e21e6c56ca563b85c74e3fd3a08242f9$__633329f04f836114d5846001611fc9565b6114e0906005611feb565b6040516001600160e01b031960e085901b16815261ffff928316600482015291166024820152604401602060405180830381865af4158015611526573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154a919061244b565b61ffff1660408601528361160a898373__$11e21e6c56ca563b85c74e3fd3a08242f9$__63dcaa20448383611580816032611feb565b6040516001600160e01b031960e086901b168152600481019390935261ffff918216602484015216604482015260146064820152608401602060405180830381865af41580156115d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f8919061244b565b6116049061010e611fc9565b89610437565b60405160200161161b92919061271e565b6040516020818303038152906040529350808061163790612212565b9150506114a2565b5050600060409093019290925291505092915050565b6060815160000361167457505060408051602081019091526000815290565b600060405180606001604052806040815260200161274e60409139905060006003845160026116a391906125cf565b6116ad9190612437565b6116b8906004612468565b67ffffffffffffffff8111156116d0576116d061192a565b6040519080825280601f01601f1916602001820160405280156116fa576020820181803683370190505b509050600182016020820185865187015b80821015611766576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f811685015184535060018301925061170b565b505060038651066001811461178257600281146117955761179d565b603d6001830353603d600283035361179d565b603d60018303535b509195945050505050565b606060006117b583611848565b600101905060008167ffffffffffffffff8111156117d5576117d561192a565b6040519080825280601f01601f1916602001820160405280156117ff576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461180957509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611891577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106118bd576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106118db57662386f26fc10000830492506010015b6305f5e10083106118f3576305f5e100830492506008015b612710831061190757612710830492506004015b60648310611919576064830492506002015b600a831061140b5760010192915050565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156119635761196361192a565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156119925761199261192a565b604052919050565b61ffff811681146119aa57600080fd5b50565b60008060008084860360e08112156119c457600080fd5b853594506080601f19820112156119da57600080fd5b506119e3611940565b60208601356119f18161199a565b81526040860135611a018161199a565b60208201526060860135611a148161199a565b60408201526080860135611a278161199a565b6060820152925060a0850135915060c08501358015158114611a4857600080fd5b939692955090935050565b60005b83811015611a6e578181015183820152602001611a56565b50506000910152565b6020815260008251806020840152611a96816040850160208701611a53565b601f01601f19169190910160400192915050565b600060208284031215611abc57600080fd5b5035919050565b600060208284031215611ad557600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114611af957600080fd5b9392505050565b600060608284031215611b1257600080fd5b6040516060810181811067ffffffffffffffff82111715611b3557611b3561192a565b6040529050808235611b468161199a565b81526020830135611b568161199a565b60208201526040830135611b698161199a565b6040919091015292915050565b60008060008060c08587031215611b8c57600080fd5b843593506020850135611b9e8161199a565b92506040850135611bae8161199a565b9150611bbd8660608701611b00565b905092959194509250565b60008060008060808587031215611bde57600080fd5b8435935060208086013593506040860135611bf88161199a565b9250606086013567ffffffffffffffff80821115611c1557600080fd5b818801915088601f830112611c2957600080fd5b813581811115611c3b57611c3b61192a565b8060051b9150611c4c848301611969565b818152918301840191848101908b841115611c6657600080fd5b938501935b83851015611c905784359250611c808361199a565b8282529385019390850190611c6b565b989b979a50959850505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611cdc57835161ffff1683529284019291840191600101611cbc565b50909695505050505050565b60008060408385031215611cfb57600080fd5b823591506020830135611d0d8161199a565b809150509250929050565b60008060808385031215611d2b57600080fd5b82359150611d3c8460208501611b00565b90509250929050565b60008151611d57818560208601611a53565b9290920192915050565b7f3c672069643d2273696c686f7565747465223e0000000000000000000000000081527f3c66696c7465722069643d2267223e3c666544726f70536861646f772064793d60138201527f222d352220737464446576696174696f6e3d22352220666c6f6f642d636f6c6f60338201527f723d22236666662220666c6f6f642d6f7061636974793d222e31222f3e3c2f6660538201527f696c7465723e0000000000000000000000000000000000000000000000000000607382015260008251611e31816079850160208701611a53565b7f3c2f673e000000000000000000000000000000000000000000000000000000006079939091019283015250607d01919050565b600060208284031215611e7757600080fd5b815163ffffffff81168114611af957600080fd5b600060808284031215611e9d57600080fd5b611ea5611940565b8251611eb08161199a565b81526020830151611ec08161199a565b60208201526040830151611ed38161199a565b60408201526060830151611ee68161199a565b60608201529392505050565b60008251611f04818460208701611a53565b9190910192915050565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000815260008251611f4681601a850160208701611a53565b91909101601a0192915050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561140b5761140b611f53565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600061ffff80841680611fbd57611fbd611f92565b92169190910492915050565b61ffff818116838216019080821115611fe457611fe4611f53565b5092915050565b61ffff81811683821602808216919082811461200957612009611f53565b505092915050565b60006020828403121561202357600080fd5b815167ffffffffffffffff8082111561203b57600080fd5b818401915084601f83011261204f57600080fd5b8151818111156120615761206161192a565b612074601f8201601f1916602001611969565b915080825285602082850101111561208b57600080fd5b611406816020840160208601611a53565b7f3c706174682020643d224d2000000000000000000000000000000000000000008152600083516120d481600c850160208801611a53565b61016160f51b600c9184019182015283516120f681600e840160208801611a53565b01600e01949350505050565b61ffff828116828216039080821115611fe457611fe4611f53565b6000885161212f818460208d01611a53565b7f20432000000000000000000000000000000000000000000000000000000000009083019081528851612169816003840160208d01611a53565b61016160f51b60039290910191820152875161218c816005840160208c01611a53565b600160fd1b6005929091019182015286516121ae816006840160208b01611a53565b016121c06006820161016160f51b9052565b6121cd6008820187611d45565b600160fd1b815290506121e36001820186611d45565b61016160f51b815290506121fa6002820185611d45565b600160fd1b81526001019a9950505050505050505050565b600061ffff80831681810361222957612229611f53565b6001019392505050565b60008351612245818460208801611a53565b7f204c203531322c20000000000000000000000000000000000000000000000000908301908152835161227f816008840160208801611a53565b01600801949350505050565b6000835161229d818460208801611a53565b7f204c203531322c20353132204c203020353132207a222066696c6c3d2200000090830190815283516122d781601d840160208801611a53565b7f222066696c7465723d2275726c28236729222f3e000000000000000000000000601d9290910191820152603101949350505050565b7f3c7376672076696577426f783d2230203020353132203531322220786d6c6e7381527f3d22687474703a2f2f7777772e77332e6f72672f323030302f737667223e000060208201527f3c636c6970506174682069643d22626f78223e3c7061746820643d224d302030603e8201527f683531327635313248307a222f3e3c2f636c6970506174683e00000000000000605e8201527f3c7376672076696577426f783d2230203020353132203531322220636c69702d60778201527f706174683d2275726c2823626f7829223e0000000000000000000000000000006097820152600082516124038160a8850160208701611a53565b7f3c2f7376673e3c2f7376673e000000000000000000000000000000000000000060a893909101928301525060b401919050565b60008261244657612446611f92565b500490565b60006020828403121561245d57600080fd5b8151611af98161199a565b808202811582820484141761140b5761140b611f53565b600060ff821660ff810361249557612495611f53565b60010192915050565b7f226e616d65223a2022636861696e656c6c6174696f6e204d6f756e7461696e7381527f20230000000000000000000000000000000000000000000000000000000000006020820152600082516124fc816022850160208701611a53565b7f222c00000000000000000000000000000000000000000000000000000000000060229390910192830152507f226465736372697074696f6e223a202241206d6f756e746c696e652053696c6860248201527f6f756574746520666f7220796f75722054776f204d6f6f6e73204e696768742060448201527f536b7922000000000000000000000000000000000000000000000000000000006064820152606801919050565b6000602082840312156125b457600080fd5b5051919050565b6000826125ca576125ca611f92565b500690565b8082018082111561140b5761140b611f53565b7f7b0000000000000000000000000000000000000000000000000000000000000081526000835161261a816001850160208801611a53565b7f2c000000000000000000000000000000000000000000000000000000000000006001918401918201527f22696d616765223a2022000000000000000000000000000000000000000000006002820152835161267d81600c840160208801611a53565b7f2200000000000000000000000000000000000000000000000000000000000000600c92909101918201527f7d00000000000000000000000000000000000000000000000000000000000000600d820152600e01949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161271181601d850160208701611a53565b91909101601d0192915050565b60008351612730818460208801611a53565b835190830190612744818360208801611a53565b0194935050505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220be06cd43552e9a5d1c2800dd8206997d2d04f276b209003dc841cf8f6a54309464736f6c63430008120033",
  "libraries": {
    "Color": "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8430,
        "contract": "contracts/chainellations/decos/MountainLine.sol:MountainLine",
        "label": "soulbound",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}