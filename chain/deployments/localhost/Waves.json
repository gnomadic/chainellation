{
  "address": "0x9A676e781A523b5d0C0e43731313A708CB607508",
  "abi": [
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SoulBound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "generateCharacter",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "primaryHue",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "secondaryHue",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "constellation",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "cloudsAt",
              "type": "uint16"
            }
          ],
          "internalType": "struct Color.DNA",
          "name": "dna",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "gazes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "daytime",
          "type": "bool"
        }
      ],
      "name": "getDeco",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getMetadata",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "H",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "S",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "L",
              "type": "uint16"
            }
          ],
          "internalType": "struct Color.HSL",
          "name": "bg",
          "type": "tuple"
        },
        {
          "internalType": "uint16",
          "name": "nonce",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "height",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "steps",
          "type": "uint16"
        }
      ],
      "name": "getWave",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "H",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "S",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "L",
              "type": "uint16"
            }
          ],
          "internalType": "struct Color.HSL",
          "name": "background",
          "type": "tuple"
        }
      ],
      "name": "getWavyLine",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "primaryHue",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "secondaryHue",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "constellation",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "cloudsAt",
              "type": "uint16"
            }
          ],
          "internalType": "struct Color.DNA",
          "name": "dna",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "gazes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "daytime",
          "type": "bool"
        }
      ],
      "name": "packageAsSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "soulbind",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "soulbound",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x10a5b1627c815aad79992e98e62a14e0e4990a6d9fff5d8c907fb12fc219c0ea",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9A676e781A523b5d0C0e43731313A708CB607508",
    "transactionIndex": 0,
    "gasUsed": "1881529",
    "logsBloom": "0x
    "blockHash": "0x60dbaf17417966886bbd71381a1232c273c2552a19d2b354643552633a920216",
    "transactionHash": "0x10a5b1627c815aad79992e98e62a14e0e4990a6d9fff5d8c907fb12fc219c0ea",
    "logs": [],
    "blockNumber": 15,
    "cumulativeGasUsed": "1881529",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "594e9ccd906bd68cfdce016c4dc374de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SoulBound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"generateCharacter\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"primaryHue\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"secondaryHue\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"constellation\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cloudsAt\",\"type\":\"uint16\"}],\"internalType\":\"struct Color.DNA\",\"name\":\"dna\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"gazes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"daytime\",\"type\":\"bool\"}],\"name\":\"getDeco\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"H\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"S\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"L\",\"type\":\"uint16\"}],\"internalType\":\"struct Color.HSL\",\"name\":\"bg\",\"type\":\"tuple\"},{\"internalType\":\"uint16\",\"name\":\"nonce\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"height\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"steps\",\"type\":\"uint16\"}],\"name\":\"getWave\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"H\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"S\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"L\",\"type\":\"uint16\"}],\"internalType\":\"struct Color.HSL\",\"name\":\"background\",\"type\":\"tuple\"}],\"name\":\"getWavyLine\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"primaryHue\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"secondaryHue\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"constellation\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cloudsAt\",\"type\":\"uint16\"}],\"internalType\":\"struct Color.DNA\",\"name\":\"dna\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"gazes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"daytime\",\"type\":\"bool\"}],\"name\":\"packageAsSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"soulbind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"soulbound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/chainellations/decos/Waves.sol\":\"Waves\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Color.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary Color {\\n    using Strings for uint256;\\n\\n    // TODO bytepack this and unpack it - probably want utility, but based on usage\\n    struct DNA {\\n        uint16 primaryHue;\\n        uint16 secondaryHue;\\n        uint16 constellation;\\n        uint16 cloudsAt;\\n    }\\n\\n    struct HSL {\\n        uint16 H;\\n        uint16 S;\\n        uint16 L;\\n    }\\n\\n    function HSLtoString(HSL memory color) public pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"hsl(\\\",\\n                    ((uint256)(color.H)).toString(),\\n                    \\\",\\\",\\n                    ((uint256)(color.S)).toString(),\\n                    \\\"%,\\\",\\n                    ((uint256)(color.L)).toString(),\\n                    \\\"%)\\\"\\n                )\\n            );\\n    }\\n\\n    function toString(uint16 num) public pure returns (string memory) {\\n        return ((uint256)(num)).toString();\\n    }\\n\\n    function psuedorandom(\\n        uint256 tokenId,\\n        uint256 nonce\\n    ) public pure returns (uint256) {\\n        return uint(keccak256(abi.encodePacked(tokenId, nonce)));\\n    }\\n\\n    function wiggle(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        uint16 base,\\n        uint16 offset\\n    ) public pure returns (uint16) {\\n        uint16 wiggleAmount = (uint16)(psuedorandom(tokenId, nonce) % offset);\\n        if ((uint8)(psuedorandom(tokenId, nonce) % 2) == 0) {\\n            return base + wiggleAmount;\\n        } else {\\n            return subZero(base, wiggleAmount);\\n        }\\n    }\\n\\n    function wiggleString(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        uint16 base,\\n        uint16 offset\\n    ) public pure returns (string memory) {\\n        return toString(wiggle(tokenId, nonce, base, offset));\\n    }\\n\\n    function wiggleUp(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        uint16 base,\\n        uint16 offset\\n    ) public pure returns (uint16) {\\n        uint16 wiggleAmount = (uint16)(psuedorandom(tokenId, nonce) % offset);\\n        return base + wiggleAmount;\\n    }\\n\\n    function subZero(uint16 first, uint16 second) public pure returns (uint16) {\\n        if (first > second) {\\n            return first - second;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function flipColor(\\n        Color.HSL memory color\\n    ) public pure returns (Color.HSL memory) {\\n        uint16 newH = color.H + 180 > 360 ? color.H - 180 : color.H + 180;\\n        return Color.HSL(newH, color.S, color.L);\\n    }\\n\\n    function rotateColor(\\n        Color.HSL memory color,\\n        uint16 amount\\n    ) public pure returns (Color.HSL memory) {\\n        uint16 hue = (color.H + amount) % 360;\\n        return Color.HSL(hue, color.S, color.L);\\n    }\\n\\n    function genDNA(\\n        uint256 tokenId,\\n        uint32 colors,\\n        uint16 clouds,\\n        uint16 constellation\\n    ) public pure returns (DNA memory) {\\n        DNA memory dna;\\n        // dna.tokenId = tokenId;\\n        dna.primaryHue = uint16(colors >> 16);\\n        dna.secondaryHue = uint16(colors);\\n        // dna.starSeed = psuedorandom(tokenId, 123);\\n        // dna.funkSeed = psuedorandom(tokenId, 234);\\n        // dna.circleSeed = psuedorandom(tokenId, 345);\\n        // dna.groundSeed = psuedorandom(tokenId, 456);\\n        dna.constellation = constellation;\\n        dna.cloudsAt = clouds;\\n\\n        return dna;\\n    }\\n\\n    function defaultColors(uint256 tokenId) public pure returns (uint32) {\\n        uint16 primary = uint16((tokenId % 16) * 10);\\n        uint16 secondary = rotateColor(HSL(primary, 0, 0), 60).H;\\n        return (uint32(primary) << 16) | uint32(secondary);\\n    }\\n}\\n\",\"keccak256\":\"0x4cf680750f0dcd97507cfaf9e74b7baf28d8ea63d9772f3c76de06af144c23da\",\"license\":\"MIT\"},\"contracts/chainellations/decos/Waves.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"../../interfaces/IDeco.sol\\\";\\n\\ncontract Waves is IDeco {\\n    using Strings for uint256;\\n\\n    function getMetadata(\\n        uint256 tokenId\\n    ) public view override returns (string memory) {\\n        return\\n            string.concat(\\n                '\\\"name\\\": \\\"chainellation Waves #',\\n                tokenId.toString(),\\n                '\\\",',\\n                '\\\"description\\\": \\\"A Wave Silhouette for your Two Moons Night Sky\\\"'\\n            );\\n    }\\n\\n    function getDeco(\\n        uint256 tokenId,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) public pure override returns (string memory) {\\n        return\\n            string.concat(\\n                '<g id=\\\"silhouette\\\">',\\n                '<filter id=\\\"light\\\"><feDiffuseLighting result=\\\"diffOut\\\" in=\\\"SourceGraphic\\\" diffuseConstant=\\\"1\\\" lighting-color=\\\"white\\\"><feDistantLight azimuth=\\\"45\\\" elevation=\\\"90\\\"/>',\\n                '</feDiffuseLighting><feComposite in=\\\"SourceGraphic\\\" in2=\\\"diffOut\\\" out=\\\"l\\\" operator=\\\"arithmetic\\\" k1=\\\"2\\\" k2=\\\"1\\\" k3=\\\"0\\\" k4=\\\"0\\\"/></filter>',\\n                getWavyLine(tokenId, Color.HSL(dna.primaryHue, 100, 30)),\\n                \\\"</g>\\\"\\n            );\\n    }\\n\\n    function getWavyLine(\\n        uint256 tokenId,\\n        Color.HSL memory background\\n    ) public pure returns (string memory) {\\n        string memory mountains = \\\"\\\";\\n\\n        Color.HSL memory bg = Color.flipColor(background);\\n\\n        mountains = string.concat(\\n            mountains,\\n            '<g filter=\\\"url(#light)\\\" stroke=\\\"black\\\" stroke-width=\\\"1\\\">'\\n        );\\n        uint16 height = Color.wiggle(tokenId, 3415, 280, 10);\\n\\n        uint16 baseS = 25;\\n        uint16 baseL = 50;\\n\\n        uint16 steps;\\n\\n        for (uint16 i = 0; i < 6; i++) {\\n            height = Color.wiggleUp(tokenId, i, height, 10) + 30;\\n            steps = (uint16)(Color.psuedorandom(tokenId, i) % 4) + 3;\\n\\n            bg.S = Color.subZero(baseS, (1 * (i + 1)));\\n            bg.L = Color.subZero(baseL, (3 + (i * 4)));\\n\\n            mountains = string.concat(\\n                mountains,\\n                getWave(tokenId, bg, i, height, steps)\\n            );\\n        }\\n        mountains = string.concat(mountains, \\\"</g>\\\");\\n        return mountains;\\n    }\\n\\n    function getWave(\\n        uint256 tokenId,\\n        Color.HSL memory bg,\\n        uint16 nonce,\\n        uint16 height,\\n        uint16 steps\\n    ) public pure returns (string memory) {\\n        uint16 distance = (Color.wiggle(tokenId, nonce, 512 / steps, 10));\\n\\n        string memory wave = string.concat(\\n            '<path d=\\\"M 0 ',\\n            Color.toString(height),\\n            \\\"Q \\\",\\n            Color.toString(distance / 2),\\n            \\\" \\\",\\n            Color.toString(Color.wiggle(tokenId, nonce, height, 75)),\\n            \\\" \\\",\\n            Color.toString(distance),\\n            \\\" \\\",\\n            Color.toString(height)\\n        );\\n        for (uint16 i = 0; i < steps; i++) {\\n            wave = string.concat(\\n                wave,\\n                \\\" T \\\",\\n                Color.toString(distance * (i + 2)),\\n                \\\" \\\",\\n                Color.toString(height)\\n            );\\n        }\\n\\n        wave = string.concat(wave, \\\" T 512\\\", \\\" \\\", Color.toString(height));\\n\\n        wave = string.concat(\\n            wave,\\n            ' L 512 512 L 0 512 z\\\" fill=\\\"',\\n            Color.HSLtoString(bg),\\n            '\\\"/>'\\n        );\\n        return wave;\\n    }\\n}\\n\",\"keccak256\":\"0x3176ef39c63a7d90123d16af61dc985c9820b1b6a41fab03b89c006de901cfe8\",\"license\":\"MIT\"},\"contracts/interfaces/IDeco.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\nimport \\\"../Color.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\nabstract contract IDeco {\\n    mapping(uint256 => bool) public soulbound;\\n\\n    function soulbind(uint256 tokenId) external {\\n        if (ownerOf(tokenId) != tx.origin) revert NotOwner();\\n        soulbound[tokenId] = true;\\n    }\\n\\n    function getDeco(\\n        uint256 tokenId,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) public view virtual returns (string memory);\\n\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        //TODO this is rough - the msg.sender is the Decoration contract but I need check with the EOA\\n        //breaks support for gas stations and contract owners.\\n        return tx.origin;\\n    }\\n\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        return 1;\\n    }\\n\\n    function packageAsSVG(\\n        uint256 tokenId,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) public view returns (string memory) {\\n        return\\n            string.concat(\\n                '<svg viewBox=\\\"0 0 512 512\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">',\\n                '<clipPath id=\\\"box\\\"><path d=\\\"M0 0h512v512H0z\\\"/></clipPath>',\\n                '<svg viewBox=\\\"0 0 512 512\\\" clip-path=\\\"url(#box)\\\">',\\n                getDeco(tokenId, dna, gazes, daytime),\\n                \\\"</svg></svg>\\\"\\n            );\\n    }\\n\\n    function generateCharacter(\\n        uint256 tokenId\\n    ) public view returns (string memory) {\\n        Color.DNA memory dna = Color.genDNA(\\n            tokenId,\\n            Color.defaultColors(tokenId),\\n            0,\\n            0\\n        );\\n        bytes memory svg = abi.encodePacked(\\n            packageAsSVG(tokenId, dna, 0, true)\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:image/svg+xml;base64,\\\",\\n                    Base64.encode(svg)\\n                )\\n            );\\n    }\\n\\n    function getMetadata(\\n        uint256 tokenId\\n    ) public view virtual returns (string memory);\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual returns (string memory) {\\n        bytes memory dataURI = abi.encodePacked(\\n            \\\"{\\\",\\n            getMetadata(tokenId),\\n            \\\",\\\",\\n            '\\\"image\\\": \\\"',\\n            generateCharacter(tokenId),\\n            '\\\"',\\n            \\\"}\\\"\\n        );\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(dataURI)\\n                )\\n            );\\n    }\\n\\n    error NotOwner();\\n    error SoulBound();\\n}\\n\",\"keccak256\":\"0x8489b63a8c83ed37f76e0e6f7fe254b1bfe72f7183aec935941056c8a2d0c07f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612132806100206000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80636352211e11610081578063960384e81161005b578063960384e8146101e8578063a574cea4146101fb578063c87b56dd1461020e57600080fd5b80636352211e1461015b57806370a08231146101935780637a181597146101b557600080fd5b80630daefed5116100b25780630daefed5146101225780630f567add146101355780633c03c2e31461014857600080fd5b806302e9dd09146100ce57806306febcba146100f7575b600080fd5b6100e16100dc366004611331565b610221565b6040516100ee91906113fb565b60405180910390f35b61012061010536600461142e565b6000908152602081905260409020805460ff19166001179055565b005b6100e161013036600461142e565b610278565b6100e161014336600461149c565b6103ee565b6100e16101563660046114c9565b610891565b61016e61016936600461142e565b503290565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ee565b6101a76101a1366004611530565b50600190565b6040519081526020016100ee565b6101d86101c336600461142e565b60006020819052908152604090205460ff1681565b60405190151581526020016100ee565b6100e16101f6366004611331565b610f30565b6100e161020936600461142e565b610f4e565b6100e161021c36600461142e565b610f7f565b6040805160608181018352855161ffff16825260646020830152601e9282019290925261024f9086906103ee565b60405160200161025f9190611589565b6040516020818303038152906040529050949350505050565b60606000735FbDB2315678afecb367f032d93F642f64180aa363974bec1884735FbDB2315678afecb367f032d93F642f64180aa3638f6aa355876040518263ffffffff1660e01b81526004016102d091815260200190565b602060405180830381865af41580156102ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103119190611774565b6040516001600160e01b031960e085901b168152600481019290925263ffffffff1660248201526000604482018190526064820152608401608060405180830381865af4158015610366573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038a919061179a565b9050600061039c848360006001610f30565b6040516020016103ac9190611801565b60405160208183030381529060405290506103c681610fe7565b6040516020016103d6919061181d565b60405160208183030381529060405292505050919050565b6040805160208082018352600080835283517f1c1ed559000000000000000000000000000000000000000000000000000000008152855161ffff90811660048301529286015183166024820152938501519091166044840152606092735FbDB2315678afecb367f032d93F642f64180aa390631c1ed55990606401606060405180830381865af4158015610486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104aa9190611862565b9050816040516020016104bd91906118b6565b60408051808303601f190181529082905263210636e960e01b825260048201879052610d5760248301526101186044830152600a60648301529250600090735FbDB2315678afecb367f032d93F642f64180aa39063210636e990608401602060405180830381865af4158015610537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055b919061191d565b9050601960326000805b60068161ffff161015610860576040517fdcaa2044000000000000000000000000000000000000000000000000000000008152600481018b905261ffff808316602483015286166044820152600a6064820152735FbDB2315678afecb367f032d93F642f64180aa39063dcaa204490608401602060405180830381865af41580156105f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610618919061191d565b61062390601e611950565b6040517f3a20c87900000000000000000000000000000000000000000000000000000000815260048181018d905261ffff84166024830152919650735FbDB2315678afecb367f032d93F642f64180aa390633a20c87990604401602060405180830381865af415801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be9190611972565b6106c891906119a1565b6106d3906003611950565b9150735FbDB2315678afecb367f032d93F642f64180aa3633329f04f856106fb846001611950565b6107069060016119b5565b6040516001600160e01b031960e085901b16815261ffff928316600482015291166024820152604401602060405180830381865af415801561074c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610770919061191d565b61ffff166020870152735FbDB2315678afecb367f032d93F642f64180aa3633329f04f8461079f8460046119b5565b6107aa906003611950565b6040516001600160e01b031960e085901b16815261ffff928316600482015291166024820152604401602060405180830381865af41580156107f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610814919061191d565b61ffff1660408701528661082b8b88848987610891565b60405160200161083c9291906119db565b6040516020818303038152906040529650808061085890611a0a565b915050610565565b50856040516020016108729190611a2b565b60408051601f1981840301815291905296505050505050505b92915050565b60606000735FbDB2315678afecb367f032d93F642f64180aa363210636e988876108bd87610200611a53565b6040516001600160e01b031960e086901b168152600481019390935261ffff9182166024840152166044820152600a6064820152608401602060405180830381865af4158015610911573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610935919061191d565b604051631b0d4b4d60e01b815261ffff86166004820152909150600090735FbDB2315678afecb367f032d93F642f64180aa390631b0d4b4d90602401600060405180830381865af415801561098e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109b69190810190611a74565b735FbDB2315678afecb367f032d93F642f64180aa3631b0d4b4d6109db600286611a53565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610a1a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a429190810190611a74565b60405163210636e960e01b8152600481018b905261ffff808a16602483015288166044820152604b6064820152735FbDB2315678afecb367f032d93F642f64180aa390631b0d4b4d90829063210636e990608401602060405180830381865af4158015610ab3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad7919061191d565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610b16573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b3e9190810190611a74565b604051631b0d4b4d60e01b815261ffff86166004820152735FbDB2315678afecb367f032d93F642f64180aa390631b0d4b4d90602401600060405180830381865af4158015610b91573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bb99190810190611a74565b604051631b0d4b4d60e01b815261ffff8a166004820152735FbDB2315678afecb367f032d93F642f64180aa390631b0d4b4d90602401600060405180830381865af4158015610c0c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c349190810190611a74565b604051602001610c48959493929190611b21565b604051602081830303815290604052905060005b8461ffff168161ffff161015610db45781735FbDB2315678afecb367f032d93F642f64180aa3631b0d4b4d610c92846002611950565b610c9c90876119b5565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610cdb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d039190810190611a74565b604051631b0d4b4d60e01b815261ffff89166004820152735FbDB2315678afecb367f032d93F642f64180aa390631b0d4b4d90602401600060405180830381865af4158015610d56573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d7e9190810190611a74565b604051602001610d9093929190611c01565b60405160208183030381529060405291508080610dac90611a0a565b915050610c5c565b50604051631b0d4b4d60e01b815261ffff861660048201528190735FbDB2315678afecb367f032d93F642f64180aa390631b0d4b4d90602401600060405180830381865af4158015610e0a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e329190810190611a74565b604051602001610e43929190611c7c565b60408051808303601f190181528282527f0fc5c9fc000000000000000000000000000000000000000000000000000000008352895161ffff908116600485015260208b015181166024850152918a0151909116604483015291508190735FbDB2315678afecb367f032d93F642f64180aa390630fc5c9fc90606401600060405180830381865af4158015610edb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f039190810190611a74565b604051602001610f14929190611cde565b60408051808303601f1901815291905298975050505050505050565b6060610f3e85858585610221565b60405160200161025f9190611d60565b6060610f598261113a565b604051602001610f699190611e8a565b6040516020818303038152906040529050919050565b60606000610f8c83610f4e565b610f9584610278565b604051602001610fa6929190611f42565b6040516020818303038152906040529050610fc081610fe7565b604051602001610fd09190612039565b604051602081830303815290604052915050919050565b6060815160000361100657505060408051602081019091526000815290565b60006040518060600160405280604081526020016120bd6040913990506000600384516002611035919061207e565b61103f9190612091565b61104a9060046120a5565b67ffffffffffffffff811115611062576110626112bc565b6040519080825280601f01601f19166020018201604052801561108c576020820181803683370190505b509050600182016020820185865187015b808210156110f8576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f811685015184535060018301925061109d565b505060038651066001811461111457600281146111275761112f565b603d6001830353603d600283035361112f565b603d60018303535b509195945050505050565b60606000611147836111da565b600101905060008167ffffffffffffffff811115611167576111676112bc565b6040519080825280601f01601f191660200182016040528015611191576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461119b57509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611223577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831061124f576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061126d57662386f26fc10000830492506010015b6305f5e1008310611285576305f5e100830492506008015b612710831061129957612710830492506004015b606483106112ab576064830492506002015b600a831061088b5760010192915050565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156112f5576112f56112bc565b60405290565b6040516060810167ffffffffffffffff811182821017156112f5576112f56112bc565b61ffff8116811461132e57600080fd5b50565b60008060008084860360e081121561134857600080fd5b853594506080601f198201121561135e57600080fd5b506113676112d2565b60208601356113758161131e565b815260408601356113858161131e565b602082015260608601356113988161131e565b604082015260808601356113ab8161131e565b6060820152925060a0850135915060c085013580151581146113cc57600080fd5b939692955090935050565b60005b838110156113f25781810151838201526020016113da565b50506000910152565b602081526000825180602084015261141a8160408501602087016113d7565b601f01601f19169190910160400192915050565b60006020828403121561144057600080fd5b5035919050565b60006060828403121561145957600080fd5b6114616112fb565b9050813561146e8161131e565b8152602082013561147e8161131e565b602082015260408201356114918161131e565b604082015292915050565b600080608083850312156114af57600080fd5b823591506114c08460208501611447565b90509250929050565b600080600080600060e086880312156114e157600080fd5b853594506114f28760208801611447565b935060808601356115028161131e565b925060a08601356115128161131e565b915060c08601356115228161131e565b809150509295509295909350565b60006020828403121561154257600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461156657600080fd5b9392505050565b6000815161157f8185602086016113d7565b9290920192915050565b7f3c672069643d2273696c686f7565747465223e0000000000000000000000000081527f3c66696c7465722069643d226c69676874223e3c6665446966667573654c696760138201527f6874696e6720726573756c743d22646966664f75742220696e3d22536f75726360338201527f6547726170686963222064696666757365436f6e7374616e743d223122206c6960538201527f676874696e672d636f6c6f723d227768697465223e3c666544697374616e744c60738201527f6967687420617a696d7574683d2234352220656c65766174696f6e3d2239302260938201527f2f3e00000000000000000000000000000000000000000000000000000000000060b38201527f3c2f6665446966667573654c69676874696e673e3c6665436f6d706f7369746560b58201527f20696e3d22536f75726365477261706869632220696e323d22646966664f757460d58201527f22206f75743d226c22206f70657261746f723d2261726974686d65746963222060f58201527f6b313d223222206b323d223122206b333d223022206b343d2230222f3e3c2f666101158201527f696c7465723e0000000000000000000000000000000000000000000000000000610135820152600061176061013b83018461156d565b631e17b39f60e11b81526004019392505050565b60006020828403121561178657600080fd5b815163ffffffff8116811461156657600080fd5b6000608082840312156117ac57600080fd5b6117b46112d2565b82516117bf8161131e565b815260208301516117cf8161131e565b602082015260408301516117e28161131e565b604082015260608301516117f58161131e565b60608201529392505050565b600082516118138184602087016113d7565b9190910192915050565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081526000825161185581601a8501602087016113d7565b91909101601a0192915050565b60006060828403121561187457600080fd5b61187c6112fb565b82516118878161131e565b815260208301516118978161131e565b602082015260408301516118aa8161131e565b60408201529392505050565b600082516118c88184602087016113d7565b7f3c672066696c7465723d2275726c28236c696768742922207374726f6b653d229201918252507f626c61636b22207374726f6b652d77696474683d2231223e00000000000000006020820152603801919050565b60006020828403121561192f57600080fd5b81516115668161131e565b634e487b7160e01b600052601160045260246000fd5b61ffff81811683821601908082111561196b5761196b61193a565b5092915050565b60006020828403121561198457600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b6000826119b0576119b061198b565b500690565b61ffff8181168382160280821691908281146119d3576119d361193a565b505092915050565b600083516119ed8184602088016113d7565b835190830190611a018183602088016113d7565b01949350505050565b600061ffff808316818103611a2157611a2161193a565b6001019392505050565b60008251611a3d8184602087016113d7565b631e17b39f60e11b920191825250600401919050565b600061ffff80841680611a6857611a6861198b565b92169190910492915050565b600060208284031215611a8657600080fd5b815167ffffffffffffffff80821115611a9e57600080fd5b818401915084601f830112611ab257600080fd5b815181811115611ac457611ac46112bc565b604051601f8201601f19908116603f01168101908382118183101715611aec57611aec6112bc565b81604052828152876020848701011115611b0557600080fd5b611b168360208301602088016113d7565b979650505050505050565b7f3c7061746820643d224d20302000000000000000000000000000000000000000815260008651611b5981600d850160208b016113d7565b7f5120000000000000000000000000000000000000000000000000000000000000600d918401918201528651611b9681600f840160208b016113d7565b808201915050600160fd1b80600f8301528651611bba816010850160208b016113d7565b601092019182018190528551611bd7816011850160208a016113d7565b60119201918201528351611bf28160128401602088016113d7565b01601201979650505050505050565b60008451611c138184602089016113d7565b7f20542000000000000000000000000000000000000000000000000000000000009083019081528451611c4d8160038401602089016113d7565b600160fd1b600392909101918201528351611c6f8160048401602088016113d7565b0160040195945050505050565b60008351611c8e8184602088016113d7565b7f2054203531320000000000000000000000000000000000000000000000000000908301908152600160fd1b60068201528351611cd28160078401602088016113d7565b01600701949350505050565b60008351611cf08184602088016113d7565b7f204c2035313220353132204c203020353132207a222066696c6c3d22000000009083019081528351611d2a81601c8401602088016113d7565b7f222f3e0000000000000000000000000000000000000000000000000000000000601c9290910191820152601f01949350505050565b7f3c7376672076696577426f783d2230203020353132203531322220786d6c6e7381527f3d22687474703a2f2f7777772e77332e6f72672f323030302f737667223e000060208201527f3c636c6970506174682069643d22626f78223e3c7061746820643d224d302030603e8201527f683531327635313248307a222f3e3c2f636c6970506174683e00000000000000605e8201527f3c7376672076696577426f783d2230203020353132203531322220636c69702d60778201527f706174683d2275726c2823626f7829223e000000000000000000000000000000609782015260008251611e568160a88501602087016113d7565b7f3c2f7376673e3c2f7376673e000000000000000000000000000000000000000060a893909101928301525060b401919050565b7f226e616d65223a2022636861696e656c6c6174696f6e20576176657320230000815260008251611ec281601e8501602087016113d7565b7f222c000000000000000000000000000000000000000000000000000000000000601e9390910192830152507f226465736372697074696f6e223a20224120576176652053696c686f7565747460208201527f6520666f7220796f75722054776f204d6f6f6e73204e6967687420536b7922006040820152605f01919050565b7f7b00000000000000000000000000000000000000000000000000000000000000815260008351611f7a8160018501602088016113d7565b7f2c000000000000000000000000000000000000000000000000000000000000006001918401918201527f22696d616765223a20220000000000000000000000000000000000000000000060028201528351611fdd81600c8401602088016113d7565b7f2200000000000000000000000000000000000000000000000000000000000000600c92909101918201527f7d00000000000000000000000000000000000000000000000000000000000000600d820152600e01949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161207181601d8501602087016113d7565b91909101601d0192915050565b8082018082111561088b5761088b61193a565b6000826120a0576120a061198b565b500490565b808202811582820484141761088b5761088b61193a56fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220a87907a8e7d64d58b9ac202e17e22e47ecc56fc0aa3623c78405e6295315dc3864736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c80636352211e11610081578063960384e81161005b578063960384e8146101e8578063a574cea4146101fb578063c87b56dd1461020e57600080fd5b80636352211e1461015b57806370a08231146101935780637a181597146101b557600080fd5b80630daefed5116100b25780630daefed5146101225780630f567add146101355780633c03c2e31461014857600080fd5b806302e9dd09146100ce57806306febcba146100f7575b600080fd5b6100e16100dc366004611331565b610221565b6040516100ee91906113fb565b60405180910390f35b61012061010536600461142e565b6000908152602081905260409020805460ff19166001179055565b005b6100e161013036600461142e565b610278565b6100e161014336600461149c565b6103ee565b6100e16101563660046114c9565b610891565b61016e61016936600461142e565b503290565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ee565b6101a76101a1366004611530565b50600190565b6040519081526020016100ee565b6101d86101c336600461142e565b60006020819052908152604090205460ff1681565b60405190151581526020016100ee565b6100e16101f6366004611331565b610f30565b6100e161020936600461142e565b610f4e565b6100e161021c36600461142e565b610f7f565b6040805160608181018352855161ffff16825260646020830152601e9282019290925261024f9086906103ee565b60405160200161025f9190611589565b6040516020818303038152906040529050949350505050565b6060600073__$11e21e6c56ca563b85c74e3fd3a08242f9$__63974bec188473__$11e21e6c56ca563b85c74e3fd3a08242f9$__638f6aa355876040518263ffffffff1660e01b81526004016102d091815260200190565b602060405180830381865af41580156102ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103119190611774565b6040516001600160e01b031960e085901b168152600481019290925263ffffffff1660248201526000604482018190526064820152608401608060405180830381865af4158015610366573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038a919061179a565b9050600061039c848360006001610f30565b6040516020016103ac9190611801565b60405160208183030381529060405290506103c681610fe7565b6040516020016103d6919061181d565b60405160208183030381529060405292505050919050565b6040805160208082018352600080835283517f1c1ed559000000000000000000000000000000000000000000000000000000008152855161ffff9081166004830152928601518316602482015293850151909116604484015260609273__$11e21e6c56ca563b85c74e3fd3a08242f9$__90631c1ed55990606401606060405180830381865af4158015610486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104aa9190611862565b9050816040516020016104bd91906118b6565b60408051808303601f190181529082905263210636e960e01b825260048201879052610d5760248301526101186044830152600a6064830152925060009073__$11e21e6c56ca563b85c74e3fd3a08242f9$__9063210636e990608401602060405180830381865af4158015610537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055b919061191d565b9050601960326000805b60068161ffff161015610860576040517fdcaa2044000000000000000000000000000000000000000000000000000000008152600481018b905261ffff808316602483015286166044820152600a606482015273__$11e21e6c56ca563b85c74e3fd3a08242f9$__9063dcaa204490608401602060405180830381865af41580156105f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610618919061191d565b61062390601e611950565b6040517f3a20c87900000000000000000000000000000000000000000000000000000000815260048181018d905261ffff8416602483015291965073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90633a20c87990604401602060405180830381865af415801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be9190611972565b6106c891906119a1565b6106d3906003611950565b915073__$11e21e6c56ca563b85c74e3fd3a08242f9$__633329f04f856106fb846001611950565b6107069060016119b5565b6040516001600160e01b031960e085901b16815261ffff928316600482015291166024820152604401602060405180830381865af415801561074c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610770919061191d565b61ffff16602087015273__$11e21e6c56ca563b85c74e3fd3a08242f9$__633329f04f8461079f8460046119b5565b6107aa906003611950565b6040516001600160e01b031960e085901b16815261ffff928316600482015291166024820152604401602060405180830381865af41580156107f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610814919061191d565b61ffff1660408701528661082b8b88848987610891565b60405160200161083c9291906119db565b6040516020818303038152906040529650808061085890611a0a565b915050610565565b50856040516020016108729190611a2b565b60408051601f1981840301815291905296505050505050505b92915050565b6060600073__$11e21e6c56ca563b85c74e3fd3a08242f9$__63210636e988876108bd87610200611a53565b6040516001600160e01b031960e086901b168152600481019390935261ffff9182166024840152166044820152600a6064820152608401602060405180830381865af4158015610911573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610935919061191d565b604051631b0d4b4d60e01b815261ffff8616600482015290915060009073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90631b0d4b4d90602401600060405180830381865af415801561098e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109b69190810190611a74565b73__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d6109db600286611a53565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610a1a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a429190810190611a74565b60405163210636e960e01b8152600481018b905261ffff808a16602483015288166044820152604b606482015273__$11e21e6c56ca563b85c74e3fd3a08242f9$__90631b0d4b4d90829063210636e990608401602060405180830381865af4158015610ab3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad7919061191d565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610b16573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b3e9190810190611a74565b604051631b0d4b4d60e01b815261ffff8616600482015273__$11e21e6c56ca563b85c74e3fd3a08242f9$__90631b0d4b4d90602401600060405180830381865af4158015610b91573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bb99190810190611a74565b604051631b0d4b4d60e01b815261ffff8a16600482015273__$11e21e6c56ca563b85c74e3fd3a08242f9$__90631b0d4b4d90602401600060405180830381865af4158015610c0c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c349190810190611a74565b604051602001610c48959493929190611b21565b604051602081830303815290604052905060005b8461ffff168161ffff161015610db4578173__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d610c92846002611950565b610c9c90876119b5565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610cdb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d039190810190611a74565b604051631b0d4b4d60e01b815261ffff8916600482015273__$11e21e6c56ca563b85c74e3fd3a08242f9$__90631b0d4b4d90602401600060405180830381865af4158015610d56573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d7e9190810190611a74565b604051602001610d9093929190611c01565b60405160208183030381529060405291508080610dac90611a0a565b915050610c5c565b50604051631b0d4b4d60e01b815261ffff86166004820152819073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90631b0d4b4d90602401600060405180830381865af4158015610e0a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e329190810190611a74565b604051602001610e43929190611c7c565b60408051808303601f190181528282527f0fc5c9fc000000000000000000000000000000000000000000000000000000008352895161ffff908116600485015260208b015181166024850152918a015190911660448301529150819073__$11e21e6c56ca563b85c74e3fd3a08242f9$",
  "libraries": {
    "Color": "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8430,
        "contract": "contracts/chainellations/decos/Waves.sol:Waves",
        "label": "soulbound",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}