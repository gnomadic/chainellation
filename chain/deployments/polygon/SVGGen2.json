{
  "address": "0xB1e84Fc349D1431062AfBb37bA08De934e35D127",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "starSeed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "constellationSeed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gazes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "day",
          "type": "bool"
        }
      ],
      "name": "buildStars",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "baseColor",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "starSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "funkSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "circleSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "groundSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "constellationSeed",
              "type": "uint256"
            }
          ],
          "internalType": "struct Color.DNA",
          "name": "dna",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "gazes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "daytime",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "cloudDays",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "decorator",
          "type": "address"
        }
      ],
      "name": "generateSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "day",
          "type": "bool"
        }
      ],
      "name": "getBackgrounds",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        }
      ],
      "name": "getFilters",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "H",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "S",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "L",
              "type": "uint16"
            }
          ],
          "internalType": "struct Color.HSL",
          "name": "primary",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "cloudDays",
          "type": "uint8"
        }
      ],
      "name": "getGradients",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "starSeed",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "count",
          "type": "uint8"
        }
      ],
      "name": "getStars",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "psuedorandom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "first",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "second",
          "type": "uint16"
        }
      ],
      "name": "subZero",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x6ff06535a3c138450c155f14523fd85ac55b1546ffac71d5a2d8a6ce810eabfc",
  "receipt": {
    "to": null,
    "from": "0x0a12A6777fc7D65b1461070648dA9CAE6962fcEe",
    "contractAddress": "0xB1e84Fc349D1431062AfBb37bA08De934e35D127",
    "transactionIndex": 41,
    "gasUsed": "2482276",
    "logsBloom": "0x
    "blockHash": "0xe79c44f863fa1ff8c3a9f0a1c29e73c4f60abd9c912ed34b633d6d3050f1deb8",
    "transactionHash": "0x6ff06535a3c138450c155f14523fd85ac55b1546ffac71d5a2d8a6ce810eabfc",
    "logs": [
      {
        "transactionIndex": 41,
        "blockNumber": 43949412,
        "transactionHash": "0x6ff06535a3c138450c155f14523fd85ac55b1546ffac71d5a2d8a6ce810eabfc",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000a12a6777fc7d65b1461070648da9cae6962fcee",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000122040537e054600000000000000000000000000000000000000000000000007e44e17a097fdf4b0000000000000000000000000000000000000000000013e7b3b0d8f4968e96210000000000000000000000000000000000000000000000007d22dd74d19f8aeb0000000000000000000000000000000000000000000013e7b4d2dcf9ce6eea81",
        "logIndex": 155,
        "blockHash": "0xe79c44f863fa1ff8c3a9f0a1c29e73c4f60abd9c912ed34b633d6d3050f1deb8"
      }
    ],
    "blockNumber": 43949412,
    "cumulativeGasUsed": "8299309",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3e6973bac707de8cce66ea97621d2f00",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"starSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"constellationSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gazes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"day\",\"type\":\"bool\"}],\"name\":\"buildStars\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"baseColor\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"starSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funkSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circleSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"groundSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"constellationSeed\",\"type\":\"uint256\"}],\"internalType\":\"struct Color.DNA\",\"name\":\"dna\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"gazes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"daytime\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"cloudDays\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"decorator\",\"type\":\"address\"}],\"name\":\"generateSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"day\",\"type\":\"bool\"}],\"name\":\"getBackgrounds\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"getFilters\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"H\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"S\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"L\",\"type\":\"uint16\"}],\"internalType\":\"struct Color.HSL\",\"name\":\"primary\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"cloudDays\",\"type\":\"uint8\"}],\"name\":\"getGradients\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"starSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"count\",\"type\":\"uint8\"}],\"name\":\"getStars\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"psuedorandom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"first\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"second\",\"type\":\"uint16\"}],\"name\":\"subZero\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SVGGen2.sol\":\"SVGGen2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Color.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary Color {\\n    using Strings for uint256;\\n\\n    struct DNA {\\n        uint256 tokenId;\\n        uint16 baseColor;\\n        uint256 starSeed;\\n        uint256 funkSeed;\\n        uint256 circleSeed;\\n        uint256 groundSeed;\\n        uint256 constellationSeed;\\n    }\\n\\n    struct HSL {\\n        uint16 H;\\n        uint16 S;\\n        uint16 L;\\n    }\\n\\n    struct Point {\\n        uint16 x;\\n        uint16 y;\\n    }\\n\\n    struct Circle {\\n        uint16 x;\\n        uint16 y;\\n        uint16 r;\\n        uint8 count;\\n        uint16 stroke;\\n        bool active;\\n    }\\n\\n    function HSLtoString(HSL memory color) public pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"hsl(\\\",\\n                    ((uint256)(color.H)).toString(),\\n                    \\\",\\\",\\n                    ((uint256)(color.S)).toString(),\\n                    \\\"%,\\\",\\n                    ((uint256)(color.L)).toString(),\\n                    \\\"%)\\\"\\n                )\\n            );\\n    }\\n\\n    function toString(uint16 num) public pure returns (string memory) {\\n        return ((uint256)(num)).toString();\\n    }\\n\\n    function psuedorandom(\\n        uint256 tokenId,\\n        uint256 nonce\\n    ) public pure returns (uint256) {\\n        return uint(keccak256(abi.encodePacked(tokenId, nonce)));\\n    }\\n\\n    function wiggle(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        uint16 base,\\n        uint16 offset\\n    ) public pure returns (uint16) {\\n        uint16 wiggleAmount = (uint16)(psuedorandom(tokenId, nonce) % offset);\\n        if ((uint8)(psuedorandom(tokenId, nonce) % 2) == 0) {\\n            return base + wiggleAmount;\\n        } else {\\n            return subZero(base, wiggleAmount);\\n        }\\n    }\\n\\n    function wiggleString(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        uint16 base,\\n        uint16 offset\\n    ) public pure returns (string memory) {\\n        return toString(wiggle(tokenId, nonce, base, offset));\\n    }\\n\\n    function wiggleUp(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        uint16 base,\\n        uint16 offset\\n    ) public pure returns (uint16) {\\n        uint16 wiggleAmount = (uint16)(psuedorandom(tokenId, nonce) % offset);\\n        return base + wiggleAmount;\\n    }\\n\\n    function subZero(uint16 first, uint16 second) public pure returns (uint16) {\\n        if (first > second) {\\n            return first - second;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function flipColor(\\n        Color.HSL memory color\\n    ) public pure returns (Color.HSL memory) {\\n        uint16 newH = color.H + 180 > 360 ? color.H - 180 : color.H + 180;\\n        return Color.HSL(newH, color.S, color.L);\\n    }\\n\\n    function rotateColor(\\n        Color.HSL memory color,\\n        uint16 amount\\n    ) public pure returns (Color.HSL memory) {\\n        uint16 newH = color.H + amount > 360\\n            ? subZero(color.H, amount)\\n            : color.H + amount;\\n        return Color.HSL(newH, color.S, color.L);\\n    }\\n\\n    function genDNA(uint256 tokenId) public pure returns (DNA memory) {\\n        DNA memory dna;\\n        dna.tokenId = tokenId;\\n        dna.baseColor = uint16((tokenId % 16) * 10);\\n        dna.starSeed = psuedorandom(tokenId, 123);\\n        dna.funkSeed = psuedorandom(tokenId, 234);\\n        dna.circleSeed = psuedorandom(tokenId, 345);\\n        dna.groundSeed = psuedorandom(tokenId, 456);\\n        dna.constellationSeed = tokenId;\\n\\n        return dna;\\n    }\\n}\\n\",\"keccak256\":\"0xf666304c94ce23e23aef55bb5abe5cfb2be1b2dd031eda7ec5476495a5bbbc4c\",\"license\":\"MIT\"},\"contracts/Constellations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary Constellations {\\n    using Strings for uint256;\\n\\n    function getConstellation(\\n        uint256 constellationSeed,\\n        bool fullReveal,\\n        uint8 gazed\\n    ) public view returns (string memory, uint8 remaining) {\\n        uint8 seed = (uint8)(constellationSeed % 13);\\n        if (seed == 0) {\\n            return Aries(gazed, fullReveal);\\n        } else if (seed == 1) {\\n            return Sagittarius(gazed, fullReveal);\\n        } else if (seed == 2) {\\n            return Capricorn(gazed, fullReveal);\\n        } else if (seed == 3) {\\n            return Aquarius(gazed, fullReveal);\\n        } else if (seed == 4) {\\n            return Pisces(gazed, fullReveal);\\n        } else if (seed == 5) {\\n            return Scorpio(gazed, fullReveal);\\n        } else if (seed == 6) {\\n            return Libra(gazed, fullReveal);\\n        } else if (seed == 7) {\\n            return Virgo(gazed, fullReveal);\\n        } else if (seed == 8) {\\n            return Leo(gazed, fullReveal);\\n        } else if (seed == 9) {\\n            return Cancer(gazed, fullReveal);\\n        } else if (seed == 10) {\\n            return Gemini(gazed, fullReveal);\\n        } else if (seed == 11) {\\n            return Taurus(gazed, fullReveal);\\n        } else if (seed == 12) {\\n            return Pegasus(gazed, fullReveal);\\n        } else if (seed == 13) {\\n            return UrsaMinor(gazed, fullReveal);\\n        } else {\\n            return Cygnus(gazed, fullReveal);\\n        }\\n    }\\n\\n    function buildStar(\\n        string[] memory stars,\\n        string memory open,\\n        string memory close,\\n        uint8 show,\\n        bool fullReveal\\n    ) public pure returns (string memory, uint8 remaining) {\\n        if (fullReveal || show > stars.length) {\\n            show = (uint8)(stars.length);\\n        }\\n        uint8 left = show;\\n        string memory constellation = \\\"\\\";\\n        constellation = string.concat(constellation, open);\\n        for (uint8 i = 0; i < show; i++) {\\n            constellation = string.concat(constellation, stars[i]);\\n            left--;\\n        }\\n        if (show == stars.length) {\\n            constellation = string.concat(constellation, close);\\n        } else {\\n            constellation = string.concat(constellation, \\\"</g>\\\");\\n        }\\n        // return (constellation, ((uint8)(stars.length) - show));\\n        return (constellation, left);\\n    }\\n\\n    function Aries(\\n        uint8 show,\\n        bool fullReveal\\n    ) public view returns (string memory, uint8 remaining) {\\n        string[] memory stars = new string[](6);\\n\\n        string\\n            memory open = '<g transform=\\\"translate(316,133), rotate(0)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n\\n        stars[0] = '<circle cx=\\\"-30\\\" cy=\\\"60\\\" r=\\\"2\\\"/>';\\n        stars[1] = '<circle cx=\\\"-10\\\" cy=\\\"45\\\" r=\\\"2\\\"/>';\\n        stars[2] = '<circle cx=\\\"5\\\" cy=\\\"0\\\" r=\\\"2\\\"/>';\\n        stars[3] = '<circle cx=\\\"55\\\" cy=\\\"10\\\" r=\\\"2\\\"/>';\\n        stars[4] = '<circle cx=\\\"80\\\" cy=\\\"30\\\" r=\\\"2\\\"/>';\\n        stars[5] = '<circle cx=\\\"85\\\" cy=\\\"45\\\" r=\\\"2\\\"/>';\\n\\n        string\\n            memory close = '<path d=\\\"m -30 60 L -10 45 L 5 0 L 55 10 L 80 30 L 85 45\\\" fill=\\\"none\\\" stroke=\\\"white\\\" opacity=\\\".5\\\"/></g>';\\n        return buildStar(stars, open, close, show, fullReveal);\\n    }\\n\\n    function Sagittarius(\\n        uint8 show,\\n        bool fullReveal\\n    ) public view returns (string memory, uint8 remaining) {\\n        string\\n            memory open = '<g transform=\\\"translate(234,-290), rotate(0)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n        string[] memory stars = new string[](20);\\n\\n        stars[0] = '<circle r=\\\"2\\\" cx=\\\"169\\\" cy=\\\"447\\\"/>';\\n        stars[1] = '<circle r=\\\"2\\\" cx=\\\"148\\\" cy=\\\"462\\\"/>';\\n        stars[2] = '<circle r=\\\"2\\\" cx=\\\"139\\\" cy=\\\"482\\\"/>';\\n        stars[3] = '<circle r=\\\"2\\\" cx=\\\"136\\\" cy=\\\"419\\\"/>';\\n        stars[4] = '<circle r=\\\"2\\\" cx=\\\"134\\\" cy=\\\"457\\\"/>';\\n        stars[5] = '<circle r=\\\"2\\\" cx=\\\"132\\\" cy=\\\"475\\\"/>';\\n        stars[6] = '<circle r=\\\"2\\\" cx=\\\"128\\\" cy=\\\"441\\\"/>';\\n        stars[7] = '<circle r=\\\"2\\\" cx=\\\"110\\\" cy=\\\"449\\\"/>';\\n        stars[8] = '<circle r=\\\"2\\\" cx=\\\"100\\\" cy=\\\"446\\\"/>';\\n        stars[9] = '<circle r=\\\"2\\\" cx=\\\"97\\\" cy=\\\"460\\\"/>';\\n        stars[10] = '<circle r=\\\"2\\\" cx=\\\"97\\\" cy=\\\"421\\\"/>';\\n        stars[11] = '<circle r=\\\"2\\\" cx=\\\"91\\\" cy=\\\"519\\\"/>';\\n        stars[12] = '<circle r=\\\"2\\\" cx=\\\"91\\\" cy=\\\"453\\\"/>';\\n        stars[13] = '<circle r=\\\"2\\\" cx=\\\"90\\\" cy=\\\"426\\\"/>';\\n        stars[14] = '<circle r=\\\"2\\\" cx=\\\"88\\\" cy=\\\"507\\\"/>';\\n        stars[15] = '<circle r=\\\"2\\\" cx=\\\"81\\\" cy=\\\"424\\\"/>';\\n        stars[16] = '<circle r=\\\"2\\\" cx=\\\"71\\\" cy=\\\"515\\\"/>';\\n        stars[17] = '<circle r=\\\"2\\\" cx=\\\"66\\\" cy=\\\"415\\\"/>';\\n        stars[18] = '<circle r=\\\"2\\\" cx=\\\"62\\\" cy=\\\"446\\\"/>';\\n        stars[19] = '<circle r=\\\"2\\\" cx=\\\"42\\\" cy=\\\"468\\\"/>';\\n\\n        string\\n            memory close = '<path d=\\\"m169, 447 L 148, 462 L 134,457 L 132, 475 L 139, 482 M 134,457 L 128,441 L 136,419 M 128, 441 L 110, 449 L 100,446 L 90,426 L 97,421 M 90,426 L 81,424 L 66,415 M 110, 449 L 97, 460 L 91, 453 L 100,446 M 91,453 L 62, 446 L 42, 468 L 71, 515 L 88,507 M 71,515 L 91,519\\\" stroke=\\\"#fff\\\" opacity=\\\".5\\\" fill=\\\"none\\\"/></g>';\\n\\n        return buildStar(stars, open, close, show, fullReveal);\\n    }\\n\\n    function Capricorn(\\n        uint8 show,\\n        bool fullReveal\\n    ) public view returns (string memory, uint8 remaining) {\\n        string[] memory stars = new string[](11);\\n\\n        string\\n            memory open = '<g transform=\\\"translate(114,-300), rotate(0)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n        stars[0] = '<circle r=\\\"2\\\" cx=\\\"254\\\" cy=\\\"492\\\"/>';\\n        stars[1] = '<circle r=\\\"2\\\" cx=\\\"253\\\" cy=\\\"483\\\"/>';\\n        stars[2] = '<circle r=\\\"2\\\" cx=\\\"241\\\" cy=\\\"498\\\"/>';\\n        stars[3] = '<circle r=\\\"2\\\" cx=\\\"232\\\" cy=\\\"424\\\"/>';\\n        stars[4] = '<circle r=\\\"2\\\" cx=\\\"231\\\" cy=\\\"414\\\"/>';\\n        stars[5] = '<circle r=\\\"2\\\" cx=\\\"221\\\" cy=\\\"510\\\"/>';\\n        stars[6] = '<circle r=\\\"2\\\" cx=\\\"212\\\" cy=\\\"481\\\"/>';\\n        stars[7] = '<circle r=\\\"2\\\" cx=\\\"202\\\" cy=\\\"514\\\"/>';\\n        stars[8] = '<circle r=\\\"2\\\" cx=\\\"201\\\" cy=\\\"495\\\"/>';\\n        stars[9] = '<circle r=\\\"2\\\" cx=\\\"191\\\" cy=\\\"511\\\"/>';\\n        stars[10] = '<circle r=\\\"2\\\" cx=\\\"189\\\" cy=\\\"519\\\"/>';\\n        string\\n            memory close = '<path d=\\\"M 254, 492 L 241, 498 L 221, 510 L 202,514 L 189, 519 L 191, 511 L 201,495 L 212, 481 L 232, 424 L 231 414 M 232, 424 L 253, 483\\\" stroke=\\\"#fff\\\" opacity=\\\".5\\\" fill=\\\"none\\\"/></g>';\\n        return buildStar(stars, open, close, show, fullReveal);\\n    }\\n\\n    function Aquarius(\\n        uint8 show,\\n        bool fullReveal\\n    ) public view returns (string memory, uint8 remaining) {\\n        string[] memory stars = new string[](13);\\n        string\\n            memory open = '<g transform=\\\"translate(-6,-300), rotate(0)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n        stars[0] = '<circle r=\\\"2\\\" cx=\\\"378\\\" cy=\\\"406 \\\"/>';\\n        stars[1] = '<circle r=\\\"2\\\" cx=\\\"372\\\" cy=\\\"530 \\\"/>';\\n        stars[2] = '<circle r=\\\"2\\\" cx=\\\"354\\\" cy=\\\"517 \\\"/>';\\n        stars[3] = '<circle r=\\\"2\\\" cx=\\\"347\\\" cy=\\\"512 \\\"/>';\\n        stars[4] = '<circle r=\\\"2\\\" cx=\\\"339\\\" cy=\\\"435 \\\"/>';\\n        stars[5] = '<circle r=\\\"2\\\" cx=\\\"335\\\" cy=\\\"476 \\\"/>';\\n        stars[6] = '<circle r=\\\"2\\\" cx=\\\"325\\\" cy=\\\"515 \\\"/>';\\n        stars[7] = '<circle r=\\\"2\\\" cx=\\\"319\\\" cy=\\\"534 \\\"/>';\\n        stars[8] = '<circle r=\\\"2\\\" cx=\\\"302\\\" cy=\\\"459 \\\"/>';\\n        stars[9] = '<circle r=\\\"2\\\" cx=\\\"302\\\" cy=\\\"480 \\\"/>';\\n        stars[10] = '<circle r=\\\"2\\\" cx=\\\"292\\\" cy=\\\"484 \\\"/>';\\n        stars[11] = '<circle r=\\\"2\\\" cx=\\\"289\\\" cy=\\\"492 \\\"/>';\\n        stars[12] = '<circle r=\\\"2\\\" cx=\\\"365\\\" cy=\\\"472 \\\"/>';\\n        string\\n            memory close = '<path d=\\\"M378, 406 L 339, 435 L 302, 459 L 302, 480 L 292 484 L 289, 492 L 319 534 L 325,515 L 347,512 L 354,517 L 372,530 M 302,459 L 335,476 L 365 472\\\" fill=\\\"none\\\" stroke=\\\"#fff\\\" opacity=\\\".5\\\"/></g>';\\n        return buildStar(stars, open, close, show, fullReveal);\\n    }\\n\\n    function Pisces(\\n        uint8 show,\\n        bool fullReveal\\n    ) public view returns (string memory, uint8 remaining) {\\n        string[] memory stars = new string[](17);\\n\\n        string\\n            memory open = '<g transform=\\\"translate(14,-170), rotate(0) scale(0.7)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n        stars[0] = '<circle r=\\\"2.86\\\" cx=\\\"523\\\" cy=\\\"547 \\\"/>';\\n        stars[1] = '<circle r=\\\"2.86\\\" cx=\\\"502\\\" cy=\\\"526 \\\"/>';\\n        stars[2] = '<circle r=\\\"2.86\\\" cx=\\\"495\\\" cy=\\\"541 \\\"/>';\\n        stars[3] = '<circle r=\\\"2.86\\\" cx=\\\"482\\\" cy=\\\"502 \\\"/>';\\n        stars[4] = '<circle r=\\\"2.86\\\" cx=\\\"475\\\" cy=\\\"484 \\\"/>';\\n        stars[5] = '<circle r=\\\"2.86\\\" cx=\\\"474\\\" cy=\\\"417 \\\"/>';\\n        stars[6] = '<circle r=\\\"2.86\\\" cx=\\\"471\\\" cy=\\\"400 \\\"/>';\\n        stars[7] = '<circle r=\\\"2.86\\\" cx=\\\"468\\\" cy=\\\"427 \\\"/>';\\n        stars[8] = '<circle r=\\\"2.86\\\" cx=\\\"465\\\" cy=\\\"539 \\\"/>';\\n        stars[9] = '<circle r=\\\"2.86\\\" cx=\\\"459\\\" cy=\\\"445 \\\"/>';\\n        stars[10] = '<circle r=\\\"2.86\\\" cx=\\\"457\\\" cy=\\\"395 \\\"/>';\\n        stars[11] = '<circle r=\\\"2.86\\\" cx=\\\"454\\\" cy=\\\"425 \\\"/>';\\n        stars[12] = '<circle r=\\\"2.86\\\" cx=\\\"448\\\" cy=\\\"401 \\\"/>';\\n        stars[13] = '<circle r=\\\"2.86\\\" cx=\\\"445\\\" cy=\\\"413 \\\"/>';\\n        stars[14] = '<circle r=\\\"2.86\\\" cx=\\\"425\\\" cy=\\\"541 \\\"/>';\\n        stars[15] = '<circle r=\\\"2.86\\\" cx=\\\"415\\\" cy=\\\"553 \\\"/>';\\n        stars[16] = '<circle r=\\\"2.86\\\" cx=\\\"400\\\" cy=\\\"544 \\\"/>';\\n        string\\n            memory close = '<path d=\\\"m400, 544 L 415, 553 L 425,541 L465, 539 L 495, 541 L 523, 547 L 502, 526 L 482, 502 L 475, 484 L 459, 445 L 454, 425 L 445, 413 L 448, 401 L 457, 395 L 471, 400 L 474, 417 L 468, 427 L 454 425 \\\" stroke=\\\"#fff\\\" opacity=\\\".5\\\" fill=\\\"none\\\" stroke-width=\\\"1.43\\\"/></g>';\\n        return buildStar(stars, open, close, show, fullReveal);\\n    }\\n\\n    function Scorpio(\\n        uint8 show,\\n        bool fullReveal\\n    ) public view returns (string memory, uint8 remaining) {\\n        string[] memory stars = new string[](15);\\n\\n        string\\n            memory open = '<g transform=\\\"translate(-121,-120), rotate(0)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n        stars[0] = '<circle r=\\\"2\\\" cx=\\\"513\\\" cy=\\\"256 \\\"/>';\\n        stars[1] = '<circle r=\\\"2\\\" cx=\\\"513\\\" cy=\\\"268 \\\"/>';\\n        stars[2] = '<circle r=\\\"2\\\" cx=\\\"510\\\" cy=\\\"248 \\\"/>';\\n        stars[3] = '<circle r=\\\"2\\\" cx=\\\"489\\\" cy=\\\"264 \\\"/>';\\n        stars[4] = '<circle r=\\\"2\\\" cx=\\\"481\\\" cy=\\\"268 \\\"/>';\\n        stars[5] = '<circle r=\\\"2\\\" cx=\\\"475\\\" cy=\\\"274 \\\"/>';\\n        stars[6] = '<circle r=\\\"2\\\" cx=\\\"458\\\" cy=\\\"296 \\\"/>';\\n        stars[7] = '<circle r=\\\"2\\\" cx=\\\"456\\\" cy=\\\"314 \\\"/>';\\n        stars[8] = '<circle r=\\\"2\\\" cx=\\\"452\\\" cy=\\\"328 \\\"/>';\\n        stars[9] = '<circle r=\\\"2\\\" cx=\\\"435\\\" cy=\\\"333 \\\"/>';\\n        stars[10] = '<circle r=\\\"2\\\" cx=\\\"419\\\" cy=\\\"304 \\\"/>';\\n        stars[11] = '<circle r=\\\"2\\\" cx=\\\"415\\\" cy=\\\"332 \\\"/>';\\n        stars[12] = '<circle r=\\\"2\\\" cx=\\\"410\\\" cy=\\\"313 \\\"/>';\\n        stars[13] = '<circle r=\\\"2\\\" cx=\\\"405\\\" cy=\\\"320 \\\"/>';\\n        stars[14] = '<circle r=\\\"2\\\" cx=\\\"513\\\" cy=\\\"281 \\\"/>';\\n        string\\n            memory close = '<path d=\\\"m419, 304 L 410, 313 L 405, 320 L 415, 332 L 435, 333 L  452, 328 L 456, 314 L 458, 296 L 475, 274 L 481, 268 L 489, 264 L 513, 256 L 510, 248 M 513, 256 L 513, 268 L 513 281\\\" stroke=\\\"#fff\\\" opacity=\\\".5\\\" fill=\\\"none\\\"/></g>';\\n        return buildStar(stars, open, close, show, fullReveal);\\n    }\\n\\n    function Libra(\\n        uint8 show,\\n        bool fullReveal\\n    ) public view returns (string memory, uint8 remaining) {\\n        string[] memory stars = new string[](8);\\n        string\\n            memory open = '<g transform=\\\"translate(4,-120), rotate(0)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n        stars[0] = '<circle r=\\\"2\\\" cx=\\\"361\\\" cy=\\\"272 \\\"/>';\\n        stars[1] = '<circle r=\\\"2\\\" cx=\\\"356\\\" cy=\\\"307 \\\"/>';\\n        stars[2] = '<circle r=\\\"2\\\" cx=\\\"335\\\" cy=\\\"329 \\\"/>';\\n        stars[3] = '<circle r=\\\"2\\\" cx=\\\"335\\\" cy=\\\"321 \\\"/>';\\n        stars[4] = '<circle r=\\\"2\\\" cx=\\\"333\\\" cy=\\\"252 \\\"/>';\\n        stars[5] = '<circle r=\\\"2\\\" cx=\\\"324\\\" cy=\\\"276 \\\"/>';\\n        stars[6] = '<circle r=\\\"2\\\" cx=\\\"318\\\" cy=\\\"281 \\\"/>';\\n        stars[7] = '<circle r=\\\"2\\\" cx=\\\"309\\\" cy=\\\"287 \\\"/>';\\n        string\\n            memory close = '<path d=\\\"M 309, 287 L 318, 281 L 324, 276 L 333, 252 L 361, 272, 356, 307 L  335, 321 L 335, 329 M 356, 307 L 333, 252 \\\" stroke=\\\"#fff\\\" opacity=\\\".5\\\" fill=\\\"none\\\"/></g>';\\n        return buildStar(stars, open, close, show, fullReveal);\\n    }\\n\\n    function Virgo(\\n        uint8 show,\\n        bool fullReveal\\n    ) public view returns (string memory, uint8 remaining) {\\n        string[] memory stars = new string[](12);\\n        string\\n            memory open = '<g transform=\\\"translate(114,-114), rotate(0)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n        stars[0] = '<circle r=\\\"2\\\" cx=\\\"261\\\" cy=\\\"296 \\\"/>';\\n        stars[1] = '<circle r=\\\"2\\\" cx=\\\"251\\\" cy=\\\"225 \\\"/>';\\n        stars[2] = '<circle r=\\\"2\\\" cx=\\\"248\\\" cy=\\\"276 \\\"/>';\\n        stars[3] = '<circle r=\\\"2\\\" cx=\\\"246\\\" cy=\\\"244 \\\"/>';\\n        stars[4] = '<circle r=\\\"2\\\" cx=\\\"241\\\" cy=\\\"327 \\\"/>';\\n        stars[5] = '<circle r=\\\"2\\\" cx=\\\"231\\\" cy=\\\"324 \\\"/>';\\n        stars[6] = '<circle r=\\\"2\\\" cx=\\\"225\\\" cy=\\\"249 \\\"/>';\\n        stars[7] = '<circle r=\\\"2\\\" cx=\\\"223\\\" cy=\\\"285 \\\"/>';\\n        stars[8] = '<circle r=\\\"2\\\" cx=\\\"221\\\" cy=\\\"342 \\\"/>';\\n        stars[9] = '<circle r=\\\"2\\\" cx=\\\"207\\\" cy=\\\"299 \\\"/>';\\n        stars[10] = '<circle r=\\\"2\\\" cx=\\\"198\\\" cy=\\\"242 \\\"/>';\\n        stars[11] = '<circle r=\\\"2\\\" cx=\\\"188\\\" cy=\\\"330 \\\"/>';\\n        string\\n            memory close = '<path d=\\\"m221, 342 L 231, 324 L 241, 327 L 261, 296 L 248, 276 L  246, 244 L 251, 225 M 246, 244 L 225, 249 L 198, 242 M 225, 249 L 223, 285 L 261, 296 M 223, 285 L 207 299 L 188 330\\\" stroke=\\\"#fff\\\" opacity=\\\".5\\\" fill=\\\"none\\\"/></g>';\\n        return buildStar(stars, open, close, show, fullReveal);\\n    }\\n\\n    function Leo(\\n        uint8 show,\\n        bool fullReveal\\n    ) public view returns (string memory, uint8 remaining) {\\n        string[] memory stars = new string[](9);\\n\\n        string\\n            memory open = '<g transform=\\\"translate(254,-114), rotate(0)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n        stars[0] = '<circle r=\\\"2\\\" cx=\\\"136\\\" cy=\\\"276 \\\"/>';\\n        stars[1] = '<circle r=\\\"2\\\" cx=\\\"120\\\" cy=\\\"264 \\\"/>';\\n        stars[2] = '<circle r=\\\"2\\\" cx=\\\"108\\\" cy=\\\"224 \\\"/>';\\n        stars[3] = '<circle r=\\\"2\\\" cx=\\\"102\\\" cy=\\\"265 \\\"/>';\\n        stars[4] = '<circle r=\\\"2\\\" cx=\\\"94\\\" cy=\\\"226 \\\"/>';\\n        stars[5] = '<circle r=\\\"2\\\" cx=\\\"92\\\" cy=\\\"253 \\\"/>';\\n        stars[6] = '<circle r=\\\"2\\\" cx=\\\"80\\\" cy=\\\"324 \\\"/>';\\n        stars[7] = '<circle r=\\\"2\\\" cx=\\\"64\\\" cy=\\\"307 \\\"/>';\\n        stars[8] = '<circle r=\\\"2\\\" cx=\\\"61\\\" cy=\\\"344 \\\"/>';\\n        string\\n            memory close = '<path d=\\\"m108,224 L 94, 226 L 92, 253 L 102, 265 L 120 264 L  136 276 L 80 324 L 61 344L 64 307 L 102 265 M 80 324 L 120 264\\\" stroke=\\\"#fff\\\" opacity=\\\".5\\\" fill=\\\"none\\\"/></g>';\\n        return buildStar(stars, open, close, show, fullReveal);\\n    }\\n\\n    function Cancer(\\n        uint8 show,\\n        bool fullReveal\\n    ) public view returns (string memory, uint8 remaining) {\\n        string[] memory stars = new string[](5);\\n\\n        string\\n            memory open = '<g transform=\\\"translate(-106,50), rotate(0)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n        stars[0] = '<circle r=\\\"2\\\" cx=\\\"491\\\" cy=\\\"143 \\\"/>';\\n        stars[1] = '<circle r=\\\"2\\\" cx=\\\"443\\\" cy=\\\"123 \\\"/>';\\n        stars[2] = '<circle r=\\\"2\\\" cx=\\\"440\\\" cy=\\\"157 \\\"/>';\\n        stars[3] = '<circle r=\\\"2\\\" cx=\\\"437\\\" cy=\\\"112 \\\"/>';\\n        stars[4] = '<circle r=\\\"2\\\" cx=\\\"418\\\" cy=\\\"88 \\\"/>';\\n        string\\n            memory close = '<path d=\\\"m491 143 L 443, 123 L 437 112 L 418 88 M 442 123 L 440 157   \\\" stroke=\\\"#fff\\\" opacity=\\\".5\\\" fill=\\\"none\\\"/></g>';\\n        return buildStar(stars, open, close, show, fullReveal);\\n    }\\n\\n    function Gemini(\\n        uint8 show,\\n        bool fullReveal\\n    ) public view returns (string memory, uint8 remaining) {\\n        string[] memory stars = new string[](13);\\n\\n        string\\n            memory open = '<g transform=\\\"translate(4,50), rotate(0)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n        stars[0] = '<circle r=\\\"2\\\" cx=\\\"386\\\" cy=\\\"116 \\\"/>';\\n        stars[1] = '<circle r=\\\"2\\\" cx=\\\"377\\\" cy=\\\"115 \\\"/>';\\n        stars[2] = '<circle r=\\\"2\\\" cx=\\\"374\\\" cy=\\\"128 \\\"/>';\\n        stars[3] = '<circle r=\\\"2\\\" cx=\\\"365\\\" cy=\\\"144 \\\"/>';\\n        stars[4] = '<circle r=\\\"2\\\" cx=\\\"359\\\" cy=\\\"109 \\\"/>';\\n        stars[5] = '<circle r=\\\"2\\\" cx=\\\"359\\\" cy=\\\"162 \\\"/>';\\n        stars[6] = '<circle r=\\\"2\\\" cx=\\\"334\\\" cy=\\\"132 \\\"/>';\\n        stars[7] = '<circle r=\\\"2\\\" cx=\\\"324\\\" cy=\\\"89 \\\"/>';\\n        stars[8] = '<circle r=\\\"2\\\" cx=\\\"319\\\" cy=\\\"125 \\\"/>';\\n        stars[9] = '<circle r=\\\"2\\\" cx=\\\"315\\\" cy=\\\"87 \\\"/>';\\n        stars[10] = '<circle r=\\\"2\\\" cx=\\\"306\\\" cy=\\\"86 \\\"/>';\\n        stars[11] = '<circle r=\\\"2\\\" cx=\\\"297\\\" cy=\\\"116 \\\"/>';\\n        stars[12] = '<circle r=\\\"2\\\" cx=\\\"295\\\" cy=\\\"106 \\\"/>';\\n        string\\n            memory close = '<path d=\\\"m386 , 116 L 377, 115 L 374, 128 L 365, 144 L 334, 132 L  319, 125 L 297 116 L 295 106 L 306 86 L 315 87 L 324 89 L 359 109 L 377 115 M 365 144 L 359 162\\\" stroke=\\\"#fff\\\" opacity=\\\".5\\\" fill=\\\"none\\\"/></g>';\\n        return buildStar(stars, open, close, show, fullReveal);\\n    }\\n\\n    function Taurus(\\n        uint8 show,\\n        bool fullReveal\\n    ) public view returns (string memory, uint8 remaining) {\\n        string[] memory stars = new string[](12);\\n\\n        string\\n            memory open = '<g transform=\\\"translate(194,80), rotate(0) scale(0.7)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n        stars[0] = '<circle r=\\\"2.86\\\" cx=\\\"262\\\" cy=\\\"184 \\\"/>';\\n        stars[1] = '<circle r=\\\"2.86\\\" cx=\\\"259\\\" cy=\\\"175 \\\"/>';\\n        stars[2] = '<circle r=\\\"2.86\\\" cx=\\\"228\\\" cy=\\\"154 \\\"/>';\\n        stars[3] = '<circle r=\\\"2.86\\\" cx=\\\"214\\\" cy=\\\"139 \\\"/>';\\n        stars[4] = '<circle r=\\\"2.86\\\" cx=\\\"214\\\" cy=\\\"129 \\\"/>';\\n        stars[5] = '<circle r=\\\"2.86\\\" cx=\\\"210\\\" cy=\\\"127 \\\"/>';\\n        stars[6] = '<circle r=\\\"2.86\\\" cx=\\\"210\\\" cy=\\\"121 \\\"/>';\\n        stars[7] = '<circle r=\\\"2.86\\\" cx=\\\"207\\\" cy=\\\"135 \\\"/>';\\n        stars[8] = '<circle r=\\\"2.86\\\" cx=\\\"203\\\" cy=\\\"100 \\\"/>';\\n        stars[9] = '<circle r=\\\"2.86\\\" cx=\\\"201\\\" cy=\\\"131 \\\"/>';\\n        stars[10] = '<circle r=\\\"2.86\\\" cx=\\\"184\\\" cy=\\\"67 \\\"/>';\\n        stars[11] = '<circle r=\\\"2.86\\\" cx=\\\"164\\\" cy=\\\"93 \\\"/>';\\n        string\\n            memory close = '<path d=\\\"m262 184 L 259 175 L 228 154 L 214 139 L 214 129 L 210 127 L 210 121 L 203 100 L 184 67 M 214 139 L 207 135 L 201 131 L 164 93\\\" stroke=\\\"#fff\\\" opacity=\\\".5\\\" fill=\\\"none\\\" stroke-width=\\\"1.43\\\"/></g>';\\n        return buildStar(stars, open, close, show, fullReveal);\\n    }\\n\\n    function Pegasus(\\n        uint8 show,\\n        bool fullReveal\\n    ) public view returns (string memory, uint8 remaining) {\\n        string[] memory stars = new string[](12);\\n\\n        string\\n            memory open = '<g transform=\\\"translate(322 150)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n\\n        stars[0] = '<circle cx=\\\"-13\\\" r=\\\"2\\\"/>';\\n        stars[1] = '<circle cx=\\\"22\\\" cy=\\\"6\\\" r=\\\"2\\\"/>';\\n        stars[2] = '<circle cx=\\\"34\\\" cy=\\\"1\\\" r=\\\"2\\\"/>';\\n        stars[3] = '<circle cx=\\\"51\\\" cy=\\\"-7\\\" r=\\\"2\\\"/>';\\n        stars[4] = '<circle cx=\\\"-21\\\" cy=\\\"35\\\" r=\\\"2\\\"/>';\\n        stars[5] = '<circle cx=\\\"20\\\" cy=\\\"38\\\" r=\\\"2\\\"/>';\\n        stars[6] = '<circle cx=\\\"35\\\" cy=\\\"50\\\" r=\\\"2\\\"/>';\\n        stars[7] = '<circle cx=\\\"54\\\" cy=\\\"60\\\" r=\\\"2\\\"/>';\\n        stars[8] = '<circle cx=\\\"70\\\" cy=\\\"50\\\" r=\\\"2\\\"/>';\\n        stars[9] = '<circle cx=\\\"31\\\" cy=\\\"18\\\" r=\\\"2\\\"/>';\\n        stars[10] = '<circle cx=\\\"54\\\" cy=\\\"13\\\" r=\\\"2\\\"/>';\\n        stars[11] = '<circle cx=\\\"66\\\" cy=\\\"12\\\" r=\\\"2\\\"/>';\\n        string\\n            memory close = '<path d=\\\"M70 50 54 60 35 50 20 38l-41-3 8-35 35 6-2 32m46-26-12 1-23 5-9-12 12-5 17-8\\\" fill=\\\"none\\\" stroke=\\\"#fff\\\" opacity=\\\".5\\\"/></g>';\\n\\n        return buildStar(stars, open, close, show, fullReveal);\\n    }\\n\\n    function UrsaMinor(\\n        uint8 show,\\n        bool fullReveal\\n    ) public view returns (string memory, uint8 remaining) {\\n        string[] memory stars = new string[](7);\\n\\n        string\\n            memory open = '<g transform=\\\"translate(320,130), rotate(-30)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n        stars[0] = '<circle cx=\\\"0\\\" cy=\\\"00\\\" r=\\\"2\\\" />';\\n        stars[1] = '<circle cx=\\\"-6\\\" cy=\\\"20\\\" r=\\\"2\\\" />';\\n        stars[2] = '<circle cx=\\\"-9\\\" cy=\\\"40\\\" r=\\\"2\\\" />';\\n        stars[3] = '<circle cx=\\\"-3\\\" cy=\\\"60\\\" r=\\\"2\\\" />';\\n        stars[4] = '<circle cx=\\\"-18\\\" cy=\\\"70\\\" r=\\\"2\\\"/>';\\n        stars[5] = '<circle cx=\\\"-12\\\" cy=\\\"92\\\" r=\\\"2\\\"/>';\\n        stars[6] = '<circle cx=\\\"8\\\" cy=\\\"91\\\" r=\\\"2\\\" />';\\n        string\\n            memory close = '<path d=\\\"m 0 00 L -6 20 L -9 40 L -3 60 L -18 70 L -12 92 L 8 91 L -3 60\\\" fill=\\\"none\\\" stroke=\\\"white\\\" opacity=\\\".5\\\"/></g>';\\n        return buildStar(stars, open, close, show, fullReveal);\\n    }\\n\\n    function Cygnus(\\n        uint8 show,\\n        bool fullReveal\\n    ) public view returns (string memory, uint8 remaining) {\\n        string[] memory stars = new string[](6);\\n        string\\n            memory open = '<g transform=\\\"translate(134, -70) scale(3)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n        stars[0] = '<circle r=\\\"0.66\\\" cx=\\\"87.000\\\" cy=\\\"76.000\\\"/>';\\n        stars[1] = '<circle r=\\\"0.66\\\" cx=\\\"72.000\\\" cy=\\\"76.000\\\"/>';\\n        stars[2] = '<circle r=\\\"0.66\\\" cx=\\\"62.000\\\" cy=\\\"93.000\\\"/>';\\n        stars[3] = '<circle r=\\\"0.66\\\" cx=\\\"61.000\\\" cy=\\\"64.000\\\"/>';\\n        stars[4] = '<circle r=\\\"0.66\\\" cx=\\\"59.000\\\" cy=\\\"80.000\\\"/>';\\n        stars[5] = '<circle r=\\\"0.66\\\" cx=\\\"49.000\\\" cy=\\\"79.000\\\"/>';\\n        string\\n            memory close = '<path d=\\\"m87 76 L 72 76 L 59 80 L 49 79 M 62 93 L 59 80 L 61 64\\\" stroke-width=\\\"0.333\\\" fill=\\\"none\\\" stroke=\\\"#fff\\\" opacity=\\\".5\\\"/></g>';\\n        return buildStar(stars, open, close, show, fullReveal);\\n    }\\n}\\n\",\"keccak256\":\"0xe49dd7b4abf70cfdb0b85ee6f7ee6f9eceb2fba75a28c3055564d95d34555a8a\",\"license\":\"MIT\"},\"contracts/IDecorations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./decos/IDeco.sol\\\";\\n\\ninterface IDecorations {\\n    function getSilhouette(\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) external view returns (string memory);\\n\\n    function getSkyMath(\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) external view returns (string memory);\\n\\n    function getDecorationOne(\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6cbd09a78389221fdb7ed0903a6389950052202a3c35beaeaf335fb93f3ba821\",\"license\":\"MIT\"},\"contracts/SVGGen2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"./Color.sol\\\";\\nimport \\\"./Constellations.sol\\\";\\nimport \\\"./IDecorations.sol\\\";\\n\\ncontract SVGGen2 {\\n    function generateSVG(\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime,\\n        uint8 cloudDays,\\n        address decorator\\n    ) public view returns (string memory) {\\n        Color.HSL memory primary = Color.HSL(dna.baseColor, 100, 30);\\n\\n        string memory svg = string.concat(\\n            '<svg viewBox=\\\"0 0 512 512\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><clipPath id=\\\"box\\\"><path d=\\\"M0 0h512v512H0z\\\"/></clipPath><defs>',\\n            getGradients(dna.starSeed, primary, cloudDays),\\n            getFilters(dna.funkSeed),\\n            '</defs><svg viewBox=\\\"0 0 512 512\\\" clip-path=\\\"url(#box)\\\">',\\n            getBackgrounds(daytime),\\n            // '<path d=\\\"M 0, 340 h 512\\\" stroke=\\\"white\\\" opacity=\\\"0.4\\\"/>',\\n            // '<path d=\\\"M 0, 170 h 512\\\" stroke=\\\"white\\\" opacity=\\\"0.4\\\"/>',\\n            // '<path d=\\\"M 170, 0 v 512\\\" stroke=\\\"white\\\" opacity=\\\"0.4\\\"/>',\\n            // '<path d=\\\"M 340, 0 v 512\\\" stroke=\\\"white\\\" opacity=\\\"0.4\\\"/>',\\n            // '<path d=\\\"M250 80 h 180 v 180 h -180 v-180\\\" stroke=\\\"white\\\" fill=\\\"none\\\"/>',\\n\\n            buildStars(dna.starSeed, dna.constellationSeed, gazes, daytime),\\n            getSkyMath(decorator, dna, gazes, daytime),\\n            getDecorationOne(decorator, dna, gazes, daytime),\\n            getSilhouette(decorator, dna, gazes, daytime),\\n            \\\"</svg>\\\",\\n            \\\"</svg>\\\"\\n        );\\n        return svg;\\n    }\\n\\n    function getGradients(\\n        uint256 seed,\\n        Color.HSL memory primary,\\n        uint8 cloudDays\\n    ) public pure returns (string memory) {\\n        string memory rotation = Color.toString(\\n            (uint16)(Color.psuedorandom(seed, 123) % 45)\\n        );\\n        string memory sky = string.concat(\\n            '<linearGradient id=\\\"skyGradient\\\" gradientTransform=\\\"rotate(',\\n            rotation,\\n            ')\\\">'\\n        );\\n\\n        sky = string.concat(\\n            sky,\\n            '<stop offset=\\\"0%\\\"',\\n            ' stop-color=\\\"',\\n            Color.HSLtoString(Color.rotateColor(primary, 60)),\\n            '\\\"/>'\\n        );\\n\\n        sky = string.concat(\\n            sky,\\n            '<stop offset=\\\"100%\\\"',\\n            ' stop-color=\\\"',\\n            Color.HSLtoString(primary),\\n            '\\\"/>'\\n        );\\n\\n        sky = string.concat(\\n            sky,\\n            '</linearGradient><linearGradient id=\\\"cloudGradient\\\" gradientTransform=\\\"rotate(',\\n            rotation,\\n            ')\\\"><stop stop-opacity=\\\".',\\n            Color.toString(cloudDays == 0 ? 1 : cloudDays),\\n            '\\\" offset=\\\"15%\\\"/><stop stop-opacity=\\\".5\\\" offset=\\\"30%\\\"/>',\\n            '<stop stop-opacity=\\\".',\\n            Color.toString(cloudDays == 0 ? 1 : cloudDays),\\n            '\\\" offset=\\\"50%\\\"/></linearGradient>'\\n        );\\n\\n        Color.HSL memory bright = Color.rotateColor(primary, 240);\\n        bright.L = 90;\\n        sky = string.concat(\\n            sky,\\n            '<linearGradient id=\\\"dayGradient\\\" gradientTransform=\\\"rotate(13)\\\">',\\n            '<stop offset=\\\"0%\\\" stop-color=\\\"',\\n            Color.HSLtoString(bright),\\n            '\\\"/>',\\n            '<stop offset=\\\"100%\\\" stop-color=\\\"',\\n            Color.HSLtoString(Color.rotateColor(primary, 180)),\\n            '\\\"/>',\\n            \\\"</linearGradient>\\\"\\n        );\\n\\n        return sky;\\n    }\\n\\n    function getBackgrounds(bool day) public pure returns (string memory) {\\n        string memory bg = \\\"\\\";\\n\\n        bg = string.concat(\\n            '<rect width=\\\"100%\\\" height=\\\"100%\\\" filter=\\\"url(#stars)\\\" opacity=\\\"',\\n            Color.toString(day ? 0 : 1),\\n            '\\\"/>',\\n            '<path fill=\\\"url(#dayGradient)\\\" d=\\\"M0 0h512v512H0z\\\" opacity=\\\"',\\n            Color.toString(day ? 1 : 0),\\n            '\\\"  filter=\\\"url(#light)\\\"/>',\\n            '<path fill=\\\"url(#skyGradient)\\\"  d=\\\"M0 0h512v512H0z\\\" opacity=\\\".',\\n            Color.toString(day ? 0 : 7),\\n            '\\\"/>',\\n            '<path fill=\\\"url(#cloudGradient)\\\" filter=\\\"url(#clouds)\\\" d=\\\"M0 0h565v512H0z\\\"/>'\\n        );\\n\\n        return bg;\\n    }\\n\\n    function getFilters(uint256 seed) public pure returns (string memory) {\\n        string memory filters = \\\"\\\";\\n        filters = string.concat(\\n            filters,\\n            '<filter id=\\\"stars\\\"><feTurbulence baseFrequency=\\\".35\\\" seed=\\\"',\\n            Color.toString((uint16)(Color.psuedorandom(seed, 123) % 10000)),\\n            '\\\"/>',\\n            '<feColorMatrix values=\\\"0 0 0 9 -4 0 0 0 9 -4 0 0 0 9 -4 0 0 0 0 1\\\"/></filter>'\\n        );\\n        filters = string.concat(\\n            filters,\\n            '<filter id=\\\"clouds\\\" x=\\\"-50%\\\" y=\\\"-50%\\\" height=\\\"200%\\\" width=\\\"200%\\\"><feGaussianBlur in=\\\"sky\\\" stdDeviation=\\\"20\\\" result=\\\"skyblur\\\"/>',\\n            '<feTurbulence type=\\\"fractalNoise\\\" baseFrequency=\\\".01\\\" numOctaves=\\\"5\\\" result=\\\"skynoise\\\" seed=\\\"',\\n            Color.toString((uint16)(Color.psuedorandom(seed, 123) % 10000)),\\n            '\\\"/>',\\n            '<feColorMatrix values=\\\"1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 3 -1 -1 0 0\\\"/>',\\n            '<feComposite operator=\\\"in\\\" in2=\\\"SourceGraphic\\\"/></filter>'\\n        );\\n\\n        filters = string.concat(\\n            filters,\\n            '<filter id=\\\"light\\\"><feSpecularLighting result=\\\"specOut\\\" specularExponent=\\\"100\\\" lighting-color=\\\"white\\\">',\\n            '<fePointLight x=\\\"10\\\" y=\\\"70\\\" z=\\\"300\\\"/></feSpecularLighting>',\\n            '<feComposite in=\\\"SourceGraphic\\\" in2=\\\"specOut\\\" operator=\\\"arithmetic\\\" k1=\\\"0\\\" k2=\\\"1\\\" k3=\\\"1\\\" k4=\\\"0\\\"/></filter>'\\n        );\\n\\n        return filters;\\n    }\\n\\n    function buildStars(\\n        uint256 starSeed,\\n        uint256 constellationSeed,\\n        uint256 gazes,\\n        bool day\\n    ) public view returns (string memory) {\\n        if (day) {\\n            return \\\"\\\";\\n        }\\n        string memory stars = \\\"\\\";\\n        //determine how many are random and how many are constellation\\n        uint8 starCount = 0;\\n        uint8 constellationCount = 0;\\n        if (gazes >= 30) {\\n            constellationCount = 30;\\n            starCount = 25;\\n        } else {\\n            while (starCount + constellationCount < gazes) {\\n                if (\\n                    Color.psuedorandom(\\n                        starSeed,\\n                        starCount + constellationCount\\n                    ) %\\n                        5 ==\\n                    2\\n                ) {\\n                    constellationCount++;\\n                } else {\\n                    starCount++;\\n                }\\n            }\\n        }\\n        (string memory const, uint8 remaining) = Constellations\\n            .getConstellation(\\n                constellationSeed,\\n                (constellationCount == 30),\\n                constellationCount\\n            );\\n\\n        stars = string.concat(stars, const, '<g fill=\\\"white\\\" opacity=\\\"0.7\\\">');\\n\\n        stars = string.concat(\\n            stars,\\n            getStars(starSeed, starCount + (remaining == 30 ? 0 : remaining)),\\n            \\\"</g>\\\"\\n        );\\n\\n        return stars;\\n    }\\n\\n    function getStars(\\n        uint256 starSeed,\\n        uint8 count\\n    ) public pure returns (string memory) {\\n        string memory stars = \\\"\\\";\\n        string memory x = \\\"\\\";\\n        string memory y = \\\"\\\";\\n        uint8 seed = 0;\\n        for (uint8 i = 0; i < count; i++) {\\n            x = Color.toString(\\n                (uint16)(Color.psuedorandom(starSeed, i) % 462) + 25\\n            );\\n\\n            y = Color.toString(\\n                (uint16)(Color.psuedorandom(starSeed, i) % 255) + 25\\n            );\\n            seed = (uint8)(Color.psuedorandom(starSeed, i) % 3);\\n            if (seed == 0) {\\n                stars = string.concat(\\n                    stars,\\n                    '<circle r=\\\"1\\\" cx=\\\"',\\n                    x,\\n                    '\\\" cy=\\\"',\\n                    y,\\n                    '\\\" fill=\\\"white\\\"  opacity=\\\"1\\\"/>'\\n                );\\n            } else if (seed == 1) {\\n                stars = string.concat(\\n                    stars,\\n                    '<path d=\\\"M ',\\n                    x,\\n                    \\\",\\\",\\n                    y,\\n                    'c 5,0 5,0 5,-5 c 0,5 0,5 5,5 c -5,0 -5,0 -5,5 c 0,-5 0,-5 -5,-5\\\"/>'\\n                );\\n            } else if (seed == 2) {\\n                stars = string.concat(\\n                    stars,\\n                    '<circle r=\\\"3\\\" cx=\\\"',\\n                    x,\\n                    '\\\" cy=\\\"',\\n                    y,\\n                    '\\\" opacity=\\\"0.3\\\"/>',\\n                    '<circle r=\\\"1\\\" cx=\\\"',\\n                    x,\\n                    '\\\" cy=\\\"',\\n                    y,\\n                    '\\\"/>'\\n                );\\n            }\\n        }\\n        return stars;\\n    }\\n\\n    function psuedorandom(\\n        uint256 tokenId,\\n        uint256 nonce\\n    ) public pure returns (uint256) {\\n        return Color.psuedorandom(tokenId, nonce);\\n    }\\n\\n    function subZero(uint16 first, uint16 second) public pure returns (uint16) {\\n        return Color.subZero(first, second);\\n    }\\n\\n    function getSilhouette(\\n        address decorator,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) private view returns (string memory) {\\n        if (decorator == address(0)) return \\\"\\\";\\n        IDecorations deco = IDecorations(decorator);\\n        return deco.getSilhouette(dna, gazes, daytime);\\n    }\\n\\n    function getSkyMath(\\n        address decorator,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) private view returns (string memory) {\\n        if (decorator == address(0)) return \\\"\\\";\\n        IDecorations deco = IDecorations(decorator);\\n        return deco.getSkyMath(dna, gazes, daytime);\\n    }\\n\\n    function getDecorationOne(\\n        address decorator,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) private view returns (string memory) {\\n        if (decorator == address(0)) return \\\"\\\";\\n        IDecorations deco = IDecorations(decorator);\\n        return deco.getDecorationOne(dna, gazes, daytime);\\n    }\\n}\\n\",\"keccak256\":\"0xd159f290e6118dd056f145c6eb99ee10499c925e6a4bb4061ab3683764d81a87\",\"license\":\"MIT\"},\"contracts/decos/IDeco.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\nimport \\\"../Color.sol\\\";\\n\\ninterface IDeco {\\n    function getDeco(\\n        uint256 tokenId,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) external view returns (string memory);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x06c882081a5140f3a38162f7542cbfd8d028739f75181879744c87faaa392eb0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c806354bd3f881161005b57806354bd3f88146101105780636e6e0cf014610123578063e2fe026314610136578063f75e9ad51461014957600080fd5b8063176a29a51461008d5780633329f04f146100b65780633a20c879146100dc5780633af5e6ba146100fd575b600080fd5b6100a061009b366004611633565b61015c565b6040516100ad9190611672565b60405180910390f35b6100c96100c43660046116b8565b610344565b60405161ffff90911681526020016100ad565b6100ef6100ea3660046116f1565b6103e8565b6040519081526020016100ad565b6100a061010b36600461172d565b610466565b6100a061011e366004611752565b6107e3565b6100a0610131366004611791565b610a21565b6100a061014436600461180c565b610c7a565b6100a06101573660046118a9565b6112e4565b60408051602081019091526000815260609073__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d84610194576001610197565b60005b6040516001600160e01b031960e084901b16815260ff9091166004820152602401600060405180830381865af41580156101d5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101fd91908101906119e5565b73__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d85610223576000610226565b60015b6040516001600160e01b031960e084901b16815260ff9091166004820152602401600060405180830381865af4158015610264573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261028c91908101906119e5565b73__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d866102b25760076102b5565b60005b6040516001600160e01b031960e084901b16815260ff9091166004820152602401600060405180830381865af41580156102f3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261031b91908101906119e5565b60405160200161032d93929190611a36565b60408051601f198184030181529190529392505050565b6040517f3329f04f00000000000000000000000000000000000000000000000000000000815261ffff80841660048301528216602482015260009073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90633329f04f90604401602060405180830381865af41580156103bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103df9190611c0d565b90505b92915050565b604051633a20c87960e01b8152600481018390526024810182905260009073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90633a20c87990604401602060405180830381865af4158015610442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103df9190611c31565b604080516020808201835260008083528351808301855281815284519283019094528082526060939190805b8660ff168160ff1610156107d757604051633a20c87960e01b81526004810189905260ff8216602482015273__$11e21e6c56ca563b85c74e3fd3a08242f9$__90631b0d4b4d906101ce908390633a20c87990604401602060405180830381865af4158015610505573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105299190611c31565b6105339190611c4a565b61053e906019611c82565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af415801561057d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105a591908101906119e5565b604051633a20c87960e01b8152600481018a905260ff838116602483015291955073__$11e21e6c56ca563b85c74e3fd3a08242f9$__91631b0d4b4d918390633a20c87990604401602060405180830381865af415801561060a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062e9190611c31565b6106389190611c4a565b610643906019611c82565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610682573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106aa91908101906119e5565b604051633a20c87960e01b8152600481018a905260ff8316602482015290935060039073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90633a20c87990604401602060405180830381865af4158015610709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072d9190611c31565b6107379190611c4a565b91508160ff1660000361076f5784848460405160200161075993929190611ca4565b60405160208183030381529060405294506107c5565b8160ff1660010361078f5784848460405160200161075993929190611d4e565b8160ff166002036107c55784848486866040516020016107b3959493929190611e5b565b60405160208183030381529060405294505b806107cf81611f70565b915050610492565b50929695505050505050565b606081156108005750604080516020810190915260008152610a19565b6040805160208101909152600080825280601e8610610825575060199050601e6108fd565b856108308284611f8f565b60ff1610156108fd57600573__$11e21e6c56ca563b85c74e3fd3a08242f9$__633a20c8798a6108608587611f8f565b6040516001600160e01b031960e085901b168152600481019290925260ff166024820152604401602060405180830381865af41580156108a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c89190611c31565b6108d29190611c4a565b6002036108eb57806108e381611f70565b915050610825565b816108f581611f70565b925050610825565b6040517f9560162f0000000000000000000000000000000000000000000000000000000081526004810188905260ff8216601e811460248301526044820152600090819073__$00bbbf98e0f0139f358cfbb4fb86c8766f$__90639560162f90606401600060405180830381865af415801561097d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109a59190810190611fa8565b9150915084826040516020016109bc929190611fef565b6040516020818303038152906040529450846109f08b8360ff16601e146109e357836109e6565b60005b61010b9088611f8f565b604051602001610a01929190612046565b60408051601f19818403018152919052955050505050505b949350505050565b60408051602081018252600081529051633a20c87960e01b815260048101839052607b602482015260609190819073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90631b0d4b4d90612710908390633a20c87990604401602060405180830381865af4158015610a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abb9190611c31565b610ac59190611c4a565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610b04573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b2c91908101906119e5565b604051602001610b3d92919061209d565b60408051601f1981840301815290829052633a20c87960e01b825260048201859052607b60248301529150819073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90631b0d4b4d90612710908390633a20c87990604401602060405180830381865af4158015610bb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd69190611c31565b610be09190611c4a565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610c1f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c4791908101906119e5565b604051602001610c5892919061219e565b60405160208183030381529060405290508060405160200161032d9190612390565b604051633a20c87960e01b815260048101849052607b602482015260609060009073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90631b0d4b4d90602d908390633a20c87990604401602060405180830381865af4158015610ce2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d069190611c31565b610d109190611c4a565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610d4f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d7791908101906119e5565b9050600081604051602001610d8c9190612529565b60405160208183030381529060405290508073__$11e21e6c56ca563b85c74e3fd3a08242f9$__630fc5c9fc73__$11e21e6c56ca563b85c74e3fd3a08242f9$__63d9081a5889603c6040518363ffffffff1660e01b8152600401610df29291906125bb565b606060405180830381865af4158015610e0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3391906125f7565b6040518263ffffffff1660e01b8152600401610e4f919061264b565b600060405180830381865af4158015610e6c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e9491908101906119e5565b604051602001610ea5929190612676565b60408051601f19818403018152908290526303f1727f60e21b82529150819073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90630fc5c9fc90610eee90899060040161264b565b600060405180830381865af4158015610f0b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f3391908101906119e5565b604051602001610f449291906126f4565b6040516020818303038152906040529050808273__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d8760ff16600014610f825787610f85565b60015b6040516001600160e01b031960e084901b16815260ff9091166004820152602401600060405180830381865af4158015610fc3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610feb91908101906119e5565b73__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d60ff8916156110145788611017565b60015b6040516001600160e01b031960e084901b16815260ff9091166004820152602401600060405180830381865af4158015611055573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261107d91908101906119e5565b6040516020016110909493929190612773565b60408051601f19818403018152908290527fd9081a58000000000000000000000000000000000000000000000000000000008252915060009073__$11e21e6c56ca563b85c74e3fd3a08242f9$__9063d9081a58906110f690899060f0906004016125bb565b606060405180830381865af4158015611113573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113791906125f7565b605a604080830191909152516303f1727f60e21b8152909150829073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90630fc5c9fc9061117c90859060040161264b565b600060405180830381865af4158015611199573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111c191908101906119e5565b73__$11e21e6c56ca563b85c74e3fd3a08242f9$__630fc5c9fc73__$11e21e6c56ca563b85c74e3fd3a08242f9$",
  "libraries": {
    "Color": "0xd795DE79b46792928a386EAcddE5Ef173146509F",
    "Constellations": "0x384ad7A74153FC21467BC77cac5528DcA0c56F4f"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}