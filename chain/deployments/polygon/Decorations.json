{
  "address": "0xf7dC791b5219e134B28E4ce10A55E61b6f44b33b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "chainellation",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HoldChainellation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HoldDecoration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDecoType",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DECORATION_ONE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SILHOUTTE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SKY_MATH",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allDecorations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllDecorations",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAvailableDecorations",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "baseColor",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "starSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "funkSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "circleSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "groundSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "constellationSeed",
              "type": "uint256"
            }
          ],
          "internalType": "struct Color.DNA",
          "name": "dna",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "gazes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "daytime",
          "type": "bool"
        }
      ],
      "name": "getDecorationOne",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "baseColor",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "starSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "funkSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "circleSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "groundSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "constellationSeed",
              "type": "uint256"
            }
          ],
          "internalType": "struct Color.DNA",
          "name": "dna",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "gazes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "daytime",
          "type": "bool"
        }
      ],
      "name": "getSilhouette",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "baseColor",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "starSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "funkSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "circleSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "groundSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "constellationSeed",
              "type": "uint256"
            }
          ],
          "internalType": "struct Color.DNA",
          "name": "dna",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "gazes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "daytime",
          "type": "bool"
        }
      ],
      "name": "getSkyMath",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_deco",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "spot",
          "type": "uint8"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "decoType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "deco",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "decoId",
          "type": "uint256"
        }
      ],
      "name": "setDecoration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "decoTypes",
          "type": "uint8[]"
        },
        {
          "internalType": "address[]",
          "name": "decos",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "decoIds",
          "type": "uint256[]"
        }
      ],
      "name": "setDecorationBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_deco",
          "type": "address"
        }
      ],
      "name": "unregister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6ebabc63f83eb576a61296b30ca1ac13869faaddb8ec52e129794416ca180cd0",
  "receipt": {
    "to": null,
    "from": "0x0a12A6777fc7D65b1461070648dA9CAE6962fcEe",
    "contractAddress": "0xf7dC791b5219e134B28E4ce10A55E61b6f44b33b",
    "transactionIndex": 51,
    "gasUsed": "1461941",
    "logsBloom": "0x00100000080000000000000000000000000000000000000000800000000000000000000000000000000000000000020000008000000000000000000000000000000000000000000000000000000000800001000000000000000100000000000000000000020000000000000000000800000000000000000080000000000000400000000000000000000000000000000000000002000000000000000000000000200000000000000000000000000000000000000000000000020000000000004000800000000000000001000000808000000000000000000000100000000020000000020000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x1fab2eb71003e003976d6a04465517893a5a55ae1e1270d9480c35b394479185",
    "transactionHash": "0x6ebabc63f83eb576a61296b30ca1ac13869faaddb8ec52e129794416ca180cd0",
    "logs": [
      {
        "transactionIndex": 51,
        "blockNumber": 43949421,
        "transactionHash": "0x6ebabc63f83eb576a61296b30ca1ac13869faaddb8ec52e129794416ca180cd0",
        "address": "0xf7dC791b5219e134B28E4ce10A55E61b6f44b33b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000a12a6777fc7d65b1461070648da9cae6962fcee"
        ],
        "data": "0x",
        "logIndex": 260,
        "blockHash": "0x1fab2eb71003e003976d6a04465517893a5a55ae1e1270d9480c35b394479185"
      },
      {
        "transactionIndex": 51,
        "blockNumber": 43949421,
        "transactionHash": "0x6ebabc63f83eb576a61296b30ca1ac13869faaddb8ec52e129794416ca180cd0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000a12a6777fc7d65b1461070648da9cae6962fcee",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x000000000000000000000000000000000000000000000000008fc4e43d5525c3000000000000000000000000000000000000000000000000728050b25fcec52f0000000000000000000000000000000000000000000013e7f241ffe9f22aa94c00000000000000000000000000000000000000000000000071f08bce22799f6c0000000000000000000000000000000000000000000013e7f2d1c4ce2f7fcf0f",
        "logIndex": 261,
        "blockHash": "0x1fab2eb71003e003976d6a04465517893a5a55ae1e1270d9480c35b394479185"
      }
    ],
    "blockNumber": 43949421,
    "cumulativeGasUsed": "10121438",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbcE1b660Ee52F5b378b7A8f0e01A3dd4EC5c590A"
  ],
  "numDeployments": 1,
  "solcInputHash": "017c1ee9e5326ad7f899b5b4c635f957",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"chainellation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HoldChainellation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HoldDecoration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDecoType\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECORATION_ONE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SILHOUTTE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SKY_MATH\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allDecorations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllDecorations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAvailableDecorations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"baseColor\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"starSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funkSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circleSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"groundSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"constellationSeed\",\"type\":\"uint256\"}],\"internalType\":\"struct Color.DNA\",\"name\":\"dna\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"gazes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"daytime\",\"type\":\"bool\"}],\"name\":\"getDecorationOne\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"baseColor\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"starSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funkSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circleSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"groundSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"constellationSeed\",\"type\":\"uint256\"}],\"internalType\":\"struct Color.DNA\",\"name\":\"dna\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"gazes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"daytime\",\"type\":\"bool\"}],\"name\":\"getSilhouette\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"baseColor\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"starSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funkSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circleSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"groundSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"constellationSeed\",\"type\":\"uint256\"}],\"internalType\":\"struct Color.DNA\",\"name\":\"dna\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"gazes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"daytime\",\"type\":\"bool\"}],\"name\":\"getSkyMath\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deco\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"spot\",\"type\":\"uint8\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decoType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"deco\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decoId\",\"type\":\"uint256\"}],\"name\":\"setDecoration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"decoTypes\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"decos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"decoIds\",\"type\":\"uint256[]\"}],\"name\":\"setDecorationBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deco\",\"type\":\"address\"}],\"name\":\"unregister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Decorations.sol\":\"Decorations\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Color.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary Color {\\n    using Strings for uint256;\\n\\n    struct DNA {\\n        uint256 tokenId;\\n        uint16 baseColor;\\n        uint256 starSeed;\\n        uint256 funkSeed;\\n        uint256 circleSeed;\\n        uint256 groundSeed;\\n        uint256 constellationSeed;\\n    }\\n\\n    struct HSL {\\n        uint16 H;\\n        uint16 S;\\n        uint16 L;\\n    }\\n\\n    struct Point {\\n        uint16 x;\\n        uint16 y;\\n    }\\n\\n    struct Circle {\\n        uint16 x;\\n        uint16 y;\\n        uint16 r;\\n        uint8 count;\\n        uint16 stroke;\\n        bool active;\\n    }\\n\\n    function HSLtoString(HSL memory color) public pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"hsl(\\\",\\n                    ((uint256)(color.H)).toString(),\\n                    \\\",\\\",\\n                    ((uint256)(color.S)).toString(),\\n                    \\\"%,\\\",\\n                    ((uint256)(color.L)).toString(),\\n                    \\\"%)\\\"\\n                )\\n            );\\n    }\\n\\n    function toString(uint16 num) public pure returns (string memory) {\\n        return ((uint256)(num)).toString();\\n    }\\n\\n    function psuedorandom(\\n        uint256 tokenId,\\n        uint256 nonce\\n    ) public pure returns (uint256) {\\n        return uint(keccak256(abi.encodePacked(tokenId, nonce)));\\n    }\\n\\n    function wiggle(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        uint16 base,\\n        uint16 offset\\n    ) public pure returns (uint16) {\\n        uint16 wiggleAmount = (uint16)(psuedorandom(tokenId, nonce) % offset);\\n        if ((uint8)(psuedorandom(tokenId, nonce) % 2) == 0) {\\n            return base + wiggleAmount;\\n        } else {\\n            return subZero(base, wiggleAmount);\\n        }\\n    }\\n\\n    function wiggleString(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        uint16 base,\\n        uint16 offset\\n    ) public pure returns (string memory) {\\n        return toString(wiggle(tokenId, nonce, base, offset));\\n    }\\n\\n    function wiggleUp(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        uint16 base,\\n        uint16 offset\\n    ) public pure returns (uint16) {\\n        uint16 wiggleAmount = (uint16)(psuedorandom(tokenId, nonce) % offset);\\n        return base + wiggleAmount;\\n    }\\n\\n    function subZero(uint16 first, uint16 second) public pure returns (uint16) {\\n        if (first > second) {\\n            return first - second;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function flipColor(\\n        Color.HSL memory color\\n    ) public pure returns (Color.HSL memory) {\\n        uint16 newH = color.H + 180 > 360 ? color.H - 180 : color.H + 180;\\n        return Color.HSL(newH, color.S, color.L);\\n    }\\n\\n    function rotateColor(\\n        Color.HSL memory color,\\n        uint16 amount\\n    ) public pure returns (Color.HSL memory) {\\n        uint16 newH = color.H + amount > 360\\n            ? subZero(color.H, amount)\\n            : color.H + amount;\\n        return Color.HSL(newH, color.S, color.L);\\n    }\\n\\n    function genDNA(uint256 tokenId) public pure returns (DNA memory) {\\n        DNA memory dna;\\n        dna.tokenId = tokenId;\\n        dna.baseColor = uint16((tokenId % 16) * 10);\\n        dna.starSeed = psuedorandom(tokenId, 123);\\n        dna.funkSeed = psuedorandom(tokenId, 234);\\n        dna.circleSeed = psuedorandom(tokenId, 345);\\n        dna.groundSeed = psuedorandom(tokenId, 456);\\n        dna.constellationSeed = tokenId;\\n\\n        return dna;\\n    }\\n}\\n\",\"keccak256\":\"0xf666304c94ce23e23aef55bb5abe5cfb2be1b2dd031eda7ec5476495a5bbbc4c\",\"license\":\"MIT\"},\"contracts/Decorations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./decos/IDeco.sol\\\";\\nimport \\\"./IDecorations.sol\\\";\\n\\ncontract Decorations is Ownable, IDecorations {\\n    struct Decoration {\\n        address silhouette;\\n        address skyMath;\\n        address decorationOne;\\n    }\\n    uint8 public constant SILHOUTTE = 1;\\n    uint8 public constant SKY_MATH = 2;\\n    uint8 public constant DECORATION_ONE = 3;\\n\\n    address private _chainellation;\\n\\n    mapping(address => uint8) private _registered;\\n    address[] public allDecorations;\\n\\n    mapping(uint256 => Decoration) private _decorations;\\n\\n    constructor(address chainellation) {\\n        _chainellation = chainellation;\\n    }\\n\\n    function getAllDecorations() public view returns (address[] memory) {\\n        return allDecorations;\\n    }\\n\\n    function getAvailableDecorations(\\n        address user\\n    ) public view returns (address[] memory, uint256[] memory) {\\n        address[] memory availableDecorations = new address[](\\n            allDecorations.length\\n        );\\n        uint256[] memory ids = new uint256[](allDecorations.length);\\n        uint8 count = 0;\\n        for (uint8 i = 0; i < allDecorations.length; i++) {\\n            if (IDeco(allDecorations[i]).balanceOf(user) > 0) {\\n                availableDecorations[count] = allDecorations[i];\\n                ids[count] = _registered[allDecorations[i]];\\n                count++;\\n            }\\n        }\\n        return (availableDecorations, ids);\\n    }\\n\\n    function register(address _deco, uint8 spot) public onlyOwner {\\n        if (_registered[_deco] != 0) revert AlreadyRegistered();\\n\\n        _registered[_deco] = spot;\\n        allDecorations.push(_deco);\\n    }\\n\\n    function unregister(address _deco) public onlyOwner {\\n        _registered[_deco] = 0;\\n\\n        uint256 index = 0;\\n\\n        for (uint i = index; i < allDecorations.length - 1; i++) {\\n            if (allDecorations[i] == _deco) {\\n                index = i;\\n                break;\\n            }\\n        }\\n\\n        for (uint i = index; i < allDecorations.length - 1; i++) {\\n            allDecorations[i] = allDecorations[i + 1];\\n        }\\n        delete allDecorations[allDecorations.length - 1];\\n        allDecorations.pop();\\n    }\\n\\n    function setDecorationBatch(\\n        uint256[] memory tokenIds,\\n        uint8[] memory decoTypes,\\n        address[] memory decos,\\n        uint256[] memory decoIds\\n    ) public {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            setDecoration(tokenIds[i], decoTypes[i], decos[i], decoIds[i]);\\n        }\\n    }\\n\\n    function setDecoration(\\n        uint256 tokenId,\\n        uint8 decoType,\\n        address deco,\\n        uint256 decoId\\n    ) public {\\n        if (IDeco(_chainellation).ownerOf(tokenId) != msg.sender)\\n            revert HoldChainellation();\\n\\n        if (IDeco(deco).ownerOf(decoId) != msg.sender) revert HoldDecoration();\\n\\n        //check if deco is registered\\n        if (_registered[deco] != decoType) revert InvalidDecoType();\\n\\n        //check if allowance to burn deco from this contract\\n        IDeco nft = IDeco(deco);\\n        // address owner = nft.ownerOf(tokenId);\\n        address spender = address(this);\\n        require(\\n            nft.getApproved(tokenId) == spender,\\n            \\\"Caller is not approved to burn this NFT\\\"\\n        );\\n        nft.burn(tokenId);\\n        //burn deco from this contract\\n\\n        if (decoType == SILHOUTTE) {\\n            _decorations[tokenId].silhouette = deco;\\n        } else if (decoType == SKY_MATH) {\\n            _decorations[tokenId].skyMath = deco;\\n        } else if (decoType == DECORATION_ONE) {\\n            _decorations[tokenId].decorationOne = deco;\\n        } else {\\n            revert InvalidDecoType();\\n        }\\n    }\\n\\n    function getSilhouette(\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) public view returns (string memory) {\\n        if (_decorations[dna.tokenId].silhouette == address(0)) {\\n            return '<g id=\\\"silhouette\\\"></g>';\\n        }\\n        return\\n            IDeco(_decorations[dna.tokenId].silhouette).getDeco(\\n                dna.tokenId,\\n                dna,\\n                gazes,\\n                daytime\\n            );\\n    }\\n\\n    function getSkyMath(\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) public view returns (string memory) {\\n        if (_decorations[dna.tokenId].skyMath == address(0)) {\\n            return '<g id=\\\"skymath\\\"></g>';\\n        }\\n        return\\n            IDeco(_decorations[dna.tokenId].skyMath).getDeco(\\n                dna.tokenId,\\n                dna,\\n                gazes,\\n                daytime\\n            );\\n    }\\n\\n    function getDecorationOne(\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) public view returns (string memory) {\\n        if (_decorations[dna.tokenId].decorationOne == address(0)) {\\n            return '<g id=\\\"deco\\\"></g>';\\n        }\\n        return\\n            IDeco(_decorations[dna.tokenId].decorationOne).getDeco(\\n                dna.tokenId,\\n                dna,\\n                gazes,\\n                daytime\\n            );\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        payable(address(_msgSender())).transfer(address(this).balance);\\n    }\\n\\n    function withdrawToken(\\n        address _tokenContract,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        IERC20(_tokenContract).transfer(msg.sender, _amount);\\n    }\\n\\n    error AlreadyRegistered();\\n    error HoldChainellation();\\n    error HoldDecoration();\\n    error InvalidDecoType();\\n}\\n\\ninterface IERC20 {\\n    function transfer(address _to, uint256 _amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x6816de7c1728bbaf61752571198779f803c497cdbf388222f09f26c954c5b9df\",\"license\":\"MIT\"},\"contracts/IDecorations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./decos/IDeco.sol\\\";\\n\\ninterface IDecorations {\\n    function getSilhouette(\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) external view returns (string memory);\\n\\n    function getSkyMath(\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) external view returns (string memory);\\n\\n    function getDecorationOne(\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6cbd09a78389221fdb7ed0903a6389950052202a3c35beaeaf335fb93f3ba821\",\"license\":\"MIT\"},\"contracts/decos/IDeco.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\nimport \\\"../Color.sol\\\";\\n\\ninterface IDeco {\\n    function getDeco(\\n        uint256 tokenId,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) external view returns (string memory);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x06c882081a5140f3a38162f7542cbfd8d028739f75181879744c87faaa392eb0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161199138038061199183398101604081905261002f916100ad565b6100383361005d565b600180546001600160a01b0319166001600160a01b03929092169190911790556100dd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100bf57600080fd5b81516001600160a01b03811681146100d657600080fd5b9392505050565b6118a5806100ec6000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c8063546faa06116100b25780638da5cb5b11610081578063ac7c0ae711610066578063ac7c0ae71461026a578063d145c88414610272578063f2fde38b1461029357600080fd5b80638da5cb5b146102465780639e281a981461025757600080fd5b8063546faa06146102055780635a3eadd114610218578063692577331461022b578063715018a61461023e57600080fd5b80633942a6b91161010957806342a64f04116100ee57806342a64f04146101c857806343341500146101dd5780634fd0685a146101e557600080fd5b80633942a6b9146101955780633ccfd60b146101c057600080fd5b806307e495981461013b578063139885dd14610150578063291d4386146101635780632ec2c24614610182575b600080fd5b61014e6101493660046111db565b6102a6565b005b61014e61015e366004611210565b610370565b61016b600381565b60405160ff90911681526020015b60405180910390f35b61014e610190366004611256565b610753565b6101a86101a3366004611273565b6108f2565b6040516001600160a01b039091168152602001610179565b61014e61091c565b6101d0610953565b60405161017991906112d0565b61016b600281565b6101f86101f336600461136c565b6109b5565b6040516101799190611431565b6101f861021336600461136c565b610af9565b61014e610226366004611557565b610bf2565b6101f861023936600461136c565b610c87565b61014e610d7a565b6000546001600160a01b03166101a8565b61014e61026536600461165f565b610d8e565b61016b600181565b610285610280366004611256565b610e25565b60405161017992919061168b565b61014e6102a1366004611256565b611079565b6102ae611106565b6001600160a01b03821660009081526002602052604090205460ff1615610301576040517f3a81d6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03919091166000818152600260205260408120805460ff191660ff909416939093179092556003805460018101825592527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90910180546001600160a01b0319169091179055565b6001546040516331a9108f60e11b81526004810186905233916001600160a01b031690636352211e90602401602060405180830381865afa1580156103b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103dd91906116e2565b6001600160a01b03161461041d576040517f31e11db100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516331a9108f60e11b81526004810182905233906001600160a01b03841690636352211e90602401602060405180830381865afa158015610464573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048891906116e2565b6001600160a01b0316146104c8576040517f5113308600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03821660009081526002602052604090205460ff8481169116146105065760405163ec64f18d60e01b815260040160405180910390fd5b6040517f081812fc000000000000000000000000000000000000000000000000000000008152600481018590528290309081906001600160a01b0384169063081812fc90602401602060405180830381865afa15801561056a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058e91906116e2565b6001600160a01b03161461060f5760405162461bcd60e51b815260206004820152602760248201527f43616c6c6572206973206e6f7420617070726f76656420746f206275726e207460448201527f686973204e46540000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6040517f42966c68000000000000000000000000000000000000000000000000000000008152600481018790526001600160a01b038316906342966c6890602401600060405180830381600087803b15801561066a57600080fd5b505af115801561067e573d6000803e3d6000fd5b50505050600160ff168560ff16036106bc57600086815260046020526040902080546001600160a01b0319166001600160a01b03861617905561074b565b60011960ff8616016106f757600086815260046020526040902060010180546001600160a01b0319166001600160a01b03861617905561074b565b60021960ff86160161073257600086815260046020526040902060020180546001600160a01b0319166001600160a01b03861617905561074b565b60405163ec64f18d60e01b815260040160405180910390fd5b505050505050565b61075b611106565b6001600160a01b0381166000908152600260205260408120805460ff19169055805b60035461078c90600190611715565b8110156107e457826001600160a01b0316600382815481106107b0576107b061172e565b6000918252602090912001546001600160a01b0316036107d2578091506107e4565b806107dc81611744565b91505061077d565b50805b6003546107f690600190611715565b81101561088157600361080a82600161175d565b8154811061081a5761081a61172e565b600091825260209091200154600380546001600160a01b0390921691839081106108465761084661172e565b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790558061087981611744565b9150506107e7565b506003805461089290600190611715565b815481106108a2576108a261172e565b600091825260209091200180546001600160a01b031916905560038054806108cc576108cc611770565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b6003818154811061090257600080fd5b6000918252602090912001546001600160a01b0316905081565b610924611106565b60405133904780156108fc02916000818181858888f19350505050158015610950573d6000803e3d6000fd5b50565b606060038054806020026020016040519081016040528092919081815260200182805480156109ab57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161098d575b5050505050905090565b82516000908152600460205260409020600101546060906001600160a01b0316610a13575060408051808201909152601481527f3c672069643d22736b796d617468223e3c2f673e0000000000000000000000006020820152610af2565b8351600090815260046020818152604092839020600101548751845163e3366c9960e01b815293840152875160248401529087015161ffff16604483015291860151606482015260608601516084820152608086015160a482015260a086015160c482015260c086015160e482015261010481018590528315156101248201526001600160a01b039091169063e3366c9990610144015b600060405180830381865afa158015610ac7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610aef9190810190611786565b90505b9392505050565b82516000908152600460205260409020600201546060906001600160a01b0316610b57575060408051808201909152601181527f3c672069643d226465636f223e3c2f673e0000000000000000000000000000006020820152610af2565b8351600090815260046020818152604092839020600201548751845163e3366c9960e01b815293840152875160248401529087015161ffff16604483015291860151606482015260608601516084820152608086015160a482015260a086015160c482015260c086015160e482015261010481018590528315156101248201526001600160a01b039091169063e3366c999061014401610aaa565b60005b8451811015610c8057610c6e858281518110610c1357610c1361172e565b6020026020010151858381518110610c2d57610c2d61172e565b6020026020010151858481518110610c4757610c4761172e565b6020026020010151858581518110610c6157610c6161172e565b6020026020010151610370565b80610c7881611744565b915050610bf5565b5050505050565b82516000908152600460205260409020546060906001600160a01b0316610ce2575060408051808201909152601781527f3c672069643d2273696c686f7565747465223e3c2f673e0000000000000000006020820152610af2565b8351600090815260046020818152604092839020548751845163e3366c9960e01b815293840152875160248401529087015161ffff16604483015291860151606482015260608601516084820152608086015160a482015260a086015160c482015260c086015160e482015261010481018590528315156101248201526001600160a01b039091169063e3366c999061014401610aaa565b610d82611106565b610d8c6000611160565b565b610d96611106565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af1158015610dfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e20919061181a565b505050565b606080600060038054905067ffffffffffffffff811115610e4857610e486112e3565b604051908082528060200260200182016040528015610e71578160200160208202803683370190505b5060035490915060009067ffffffffffffffff811115610e9357610e936112e3565b604051908082528060200260200182016040528015610ebc578160200160208202803683370190505b5090506000805b60035460ff8216101561106d57600060038260ff1681548110610ee857610ee861172e565b6000918252602090912001546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038a81166004830152909116906370a0823190602401602060405180830381865afa158015610f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f789190611837565b111561105b5760038160ff1681548110610f9457610f9461172e565b9060005260206000200160009054906101000a90046001600160a01b0316848360ff1681518110610fc757610fc761172e565b60200260200101906001600160a01b031690816001600160a01b0316815250506002600060038360ff16815481106110015761100161172e565b60009182526020808320909101546001600160a01b03168352820192909252604001902054835160ff9182169185919085169081106110425761104261172e565b60209081029190910101528161105781611850565b9250505b8061106581611850565b915050610ec3565b50919590945092505050565b611081611106565b6001600160a01b0381166110fd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610606565b61095081611160565b6000546001600160a01b03163314610d8c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610606565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461095057600080fd5b803560ff811681146111d657600080fd5b919050565b600080604083850312156111ee57600080fd5b82356111f9816111b0565b9150611207602084016111c5565b90509250929050565b6000806000806080858703121561122657600080fd5b84359350611236602086016111c5565b92506040850135611246816111b0565b9396929550929360600135925050565b60006020828403121561126857600080fd5b8135610af2816111b0565b60006020828403121561128557600080fd5b5035919050565b600081518084526020808501945080840160005b838110156112c55781516001600160a01b0316875295820195908201906001016112a0565b509495945050505050565b602081526000610af2602083018461128c565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff8111828210171561131c5761131c6112e3565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561134b5761134b6112e3565b604052919050565b801515811461095057600080fd5b80356111d681611353565b600080600083850361012081121561138357600080fd5b60e081121561139157600080fd5b5061139a6112f9565b84358152602085013561ffff811681146113b357600080fd5b8060208301525060408501356040820152606085013560608201526080850135608082015260a085013560a082015260c085013560c08201528093505060e084013591506114046101008501611361565b90509250925092565b60005b83811015611428578181015183820152602001611410565b50506000910152565b602081526000825180602084015261145081604085016020870161140d565b601f01601f19169190910160400192915050565b600067ffffffffffffffff82111561147e5761147e6112e3565b5060051b60200190565b600082601f83011261149957600080fd5b813560206114ae6114a983611464565b611322565b82815260059290921b840181019181810190868411156114cd57600080fd5b8286015b848110156114e857803583529183019183016114d1565b509695505050505050565b600082601f83011261150457600080fd5b813560206115146114a983611464565b82815260059290921b8401810191818101908684111561153357600080fd5b8286015b848110156114e857803561154a816111b0565b8352918301918301611537565b6000806000806080858703121561156d57600080fd5b843567ffffffffffffffff8082111561158557600080fd5b61159188838901611488565b95506020915081870135818111156115a857600080fd5b8701601f810189136115b957600080fd5b80356115c76114a982611464565b81815260059190911b8201840190848101908b8311156115e657600080fd5b928501925b8284101561160b576115fc846111c5565b825292850192908501906115eb565b9750505050604087013591508082111561162457600080fd5b611630888389016114f3565b9350606087013591508082111561164657600080fd5b5061165387828801611488565b91505092959194509250565b6000806040838503121561167257600080fd5b823561167d816111b0565b946020939093013593505050565b60408152600061169e604083018561128c565b82810360208481019190915284518083528582019282019060005b818110156116d5578451835293830193918301916001016116b9565b5090979650505050505050565b6000602082840312156116f457600080fd5b8151610af2816111b0565b634e487b7160e01b600052601160045260246000fd5b81810381811115611728576117286116ff565b92915050565b634e487b7160e01b600052603260045260246000fd5b600060018201611756576117566116ff565b5060010190565b80820180821115611728576117286116ff565b634e487b7160e01b600052603160045260246000fd5b60006020828403121561179857600080fd5b815167ffffffffffffffff808211156117b057600080fd5b818401915084601f8301126117c457600080fd5b8151818111156117d6576117d66112e3565b6117e9601f8201601f1916602001611322565b915080825285602082850101111561180057600080fd5b61181181602084016020860161140d565b50949350505050565b60006020828403121561182c57600080fd5b8151610af281611353565b60006020828403121561184957600080fd5b5051919050565b600060ff821660ff8103611866576118666116ff565b6001019291505056fea26469706673582212204ad9e3647686c10ce53b06c493dc55a059846edc117eaff05ad827efb30b48e864736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c8063546faa06116100b25780638da5cb5b11610081578063ac7c0ae711610066578063ac7c0ae71461026a578063d145c88414610272578063f2fde38b1461029357600080fd5b80638da5cb5b146102465780639e281a981461025757600080fd5b8063546faa06146102055780635a3eadd114610218578063692577331461022b578063715018a61461023e57600080fd5b80633942a6b91161010957806342a64f04116100ee57806342a64f04146101c857806343341500146101dd5780634fd0685a146101e557600080fd5b80633942a6b9146101955780633ccfd60b146101c057600080fd5b806307e495981461013b578063139885dd14610150578063291d4386146101635780632ec2c24614610182575b600080fd5b61014e6101493660046111db565b6102a6565b005b61014e61015e366004611210565b610370565b61016b600381565b60405160ff90911681526020015b60405180910390f35b61014e610190366004611256565b610753565b6101a86101a3366004611273565b6108f2565b6040516001600160a01b039091168152602001610179565b61014e61091c565b6101d0610953565b60405161017991906112d0565b61016b600281565b6101f86101f336600461136c565b6109b5565b6040516101799190611431565b6101f861021336600461136c565b610af9565b61014e610226366004611557565b610bf2565b6101f861023936600461136c565b610c87565b61014e610d7a565b6000546001600160a01b03166101a8565b61014e61026536600461165f565b610d8e565b61016b600181565b610285610280366004611256565b610e25565b60405161017992919061168b565b61014e6102a1366004611256565b611079565b6102ae611106565b6001600160a01b03821660009081526002602052604090205460ff1615610301576040517f3a81d6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03919091166000818152600260205260408120805460ff191660ff909416939093179092556003805460018101825592527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90910180546001600160a01b0319169091179055565b6001546040516331a9108f60e11b81526004810186905233916001600160a01b031690636352211e90602401602060405180830381865afa1580156103b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103dd91906116e2565b6001600160a01b03161461041d576040517f31e11db100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516331a9108f60e11b81526004810182905233906001600160a01b03841690636352211e90602401602060405180830381865afa158015610464573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048891906116e2565b6001600160a01b0316146104c8576040517f5113308600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03821660009081526002602052604090205460ff8481169116146105065760405163ec64f18d60e01b815260040160405180910390fd5b6040517f081812fc000000000000000000000000000000000000000000000000000000008152600481018590528290309081906001600160a01b0384169063081812fc90602401602060405180830381865afa15801561056a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058e91906116e2565b6001600160a01b03161461060f5760405162461bcd60e51b815260206004820152602760248201527f43616c6c6572206973206e6f7420617070726f76656420746f206275726e207460448201527f686973204e46540000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6040517f42966c68000000000000000000000000000000000000000000000000000000008152600481018790526001600160a01b038316906342966c6890602401600060405180830381600087803b15801561066a57600080fd5b505af115801561067e573d6000803e3d6000fd5b50505050600160ff168560ff16036106bc57600086815260046020526040902080546001600160a01b0319166001600160a01b03861617905561074b565b60011960ff8616016106f757600086815260046020526040902060010180546001600160a01b0319166001600160a01b03861617905561074b565b60021960ff86160161073257600086815260046020526040902060020180546001600160a01b0319166001600160a01b03861617905561074b565b60405163ec64f18d60e01b815260040160405180910390fd5b505050505050565b61075b611106565b6001600160a01b0381166000908152600260205260408120805460ff19169055805b60035461078c90600190611715565b8110156107e457826001600160a01b0316600382815481106107b0576107b061172e565b6000918252602090912001546001600160a01b0316036107d2578091506107e4565b806107dc81611744565b91505061077d565b50805b6003546107f690600190611715565b81101561088157600361080a82600161175d565b8154811061081a5761081a61172e565b600091825260209091200154600380546001600160a01b0390921691839081106108465761084661172e565b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790558061087981611744565b9150506107e7565b506003805461089290600190611715565b815481106108a2576108a261172e565b600091825260209091200180546001600160a01b031916905560038054806108cc576108cc611770565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b6003818154811061090257600080fd5b6000918252602090912001546001600160a01b0316905081565b610924611106565b60405133904780156108fc02916000818181858888f19350505050158015610950573d6000803e3d6000fd5b50565b606060038054806020026020016040519081016040528092919081815260200182805480156109ab57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161098d575b5050505050905090565b82516000908152600460205260409020600101546060906001600160a01b0316610a13575060408051808201909152601481527f3c672069643d22736b796d617468223e3c2f673e0000000000000000000000006020820152610af2565b8351600090815260046020818152604092839020600101548751845163e3366c9960e01b815293840152875160248401529087015161ffff16604483015291860151606482015260608601516084820152608086015160a482015260a086015160c482015260c086015160e482015261010481018590528315156101248201526001600160a01b039091169063e3366c9990610144015b600060405180830381865afa158015610ac7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610aef9190810190611786565b90505b9392505050565b82516000908152600460205260409020600201546060906001600160a01b0316610b57575060408051808201909152601181527f3c672069643d226465636f223e3c2f673e0000000000000000000000000000006020820152610af2565b8351600090815260046020818152604092839020600201548751845163e3366c9960e01b815293840152875160248401529087015161ffff16604483015291860151606482015260608601516084820152608086015160a482015260a086015160c482015260c086015160e482015261010481018590528315156101248201526001600160a01b039091169063e3366c999061014401610aaa565b60005b8451811015610c8057610c6e858281518110610c1357610c1361172e565b6020026020010151858381518110610c2d57610c2d61172e565b6020026020010151858481518110610c4757610c4761172e565b6020026020010151858581518110610c6157610c6161172e565b6020026020010151610370565b80610c7881611744565b915050610bf5565b5050505050565b82516000908152600460205260409020546060906001600160a01b0316610ce2575060408051808201909152601781527f3c672069643d2273696c686f7565747465223e3c2f673e0000000000000000006020820152610af2565b8351600090815260046020818152604092839020548751845163e3366c9960e01b815293840152875160248401529087015161ffff16604483015291860151606482015260608601516084820152608086015160a482015260a086015160c482015260c086015160e482015261010481018590528315156101248201526001600160a01b039091169063e3366c999061014401610aaa565b610d82611106565b610d8c6000611160565b565b610d96611106565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af1158015610dfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e20919061181a565b505050565b606080600060038054905067ffffffffffffffff811115610e4857610e486112e3565b604051908082528060200260200182016040528015610e71578160200160208202803683370190505b5060035490915060009067ffffffffffffffff811115610e9357610e936112e3565b604051908082528060200260200182016040528015610ebc578160200160208202803683370190505b5090506000805b60035460ff8216101561106d57600060038260ff1681548110610ee857610ee861172e565b6000918252602090912001546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038a81166004830152909116906370a0823190602401602060405180830381865afa158015610f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f789190611837565b111561105b5760038160ff1681548110610f9457610f9461172e565b9060005260206000200160009054906101000a90046001600160a01b0316848360ff1681518110610fc757610fc761172e565b60200260200101906001600160a01b031690816001600160a01b0316815250506002600060038360ff16815481106110015761100161172e565b60009182526020808320909101546001600160a01b03168352820192909252604001902054835160ff9182169185919085169081106110425761104261172e565b60209081029190910101528161105781611850565b9250505b8061106581611850565b915050610ec3565b50919590945092505050565b611081611106565b6001600160a01b0381166110fd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610606565b61095081611160565b6000546001600160a01b03163314610d8c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610606565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461095057600080fd5b803560ff811681146111d657600080fd5b919050565b600080604083850312156111ee57600080fd5b82356111f9816111b0565b9150611207602084016111c5565b90509250929050565b6000806000806080858703121561122657600080fd5b84359350611236602086016111c5565b92506040850135611246816111b0565b9396929550929360600135925050565b60006020828403121561126857600080fd5b8135610af2816111b0565b60006020828403121561128557600080fd5b5035919050565b600081518084526020808501945080840160005b838110156112c55781516001600160a01b0316875295820195908201906001016112a0565b509495945050505050565b602081526000610af2602083018461128c565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff8111828210171561131c5761131c6112e3565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561134b5761134b6112e3565b604052919050565b801515811461095057600080fd5b80356111d681611353565b600080600083850361012081121561138357600080fd5b60e081121561139157600080fd5b5061139a6112f9565b84358152602085013561ffff811681146113b357600080fd5b8060208301525060408501356040820152606085013560608201526080850135608082015260a085013560a082015260c085013560c08201528093505060e084013591506114046101008501611361565b90509250925092565b60005b83811015611428578181015183820152602001611410565b50506000910152565b602081526000825180602084015261145081604085016020870161140d565b601f01601f19169190910160400192915050565b600067ffffffffffffffff82111561147e5761147e6112e3565b5060051b60200190565b600082601f83011261149957600080fd5b813560206114ae6114a983611464565b611322565b82815260059290921b840181019181810190868411156114cd57600080fd5b8286015b848110156114e857803583529183019183016114d1565b509695505050505050565b600082601f83011261150457600080fd5b813560206115146114a983611464565b82815260059290921b8401810191818101908684111561153357600080fd5b8286015b848110156114e857803561154a816111b0565b8352918301918301611537565b6000806000806080858703121561156d57600080fd5b843567ffffffffffffffff8082111561158557600080fd5b61159188838901611488565b95506020915081870135818111156115a857600080fd5b8701601f810189136115b957600080fd5b80356115c76114a982611464565b81815260059190911b8201840190848101908b8311156115e657600080fd5b928501925b8284101561160b576115fc846111c5565b825292850192908501906115eb565b9750505050604087013591508082111561162457600080fd5b611630888389016114f3565b9350606087013591508082111561164657600080fd5b5061165387828801611488565b91505092959194509250565b6000806040838503121561167257600080fd5b823561167d816111b0565b946020939093013593505050565b60408152600061169e604083018561128c565b82810360208481019190915284518083528582019282019060005b818110156116d5578451835293830193918301916001016116b9565b5090979650505050505050565b6000602082840312156116f457600080fd5b8151610af2816111b0565b634e487b7160e01b600052601160045260246000fd5b81810381811115611728576117286116ff565b92915050565b634e487b7160e01b600052603260045260246000fd5b600060018201611756576117566116ff565b5060010190565b80820180821115611728576117286116ff565b634e487b7160e01b600052603160045260246000fd5b60006020828403121561179857600080fd5b815167ffffffffffffffff808211156117b057600080fd5b818401915084601f8301126117c457600080fd5b8151818111156117d6576117d66112e3565b6117e9601f8201601f1916602001611322565b915080825285602082850101111561180057600080fd5b61181181602084016020860161140d565b50949350505050565b60006020828403121561182c57600080fd5b8151610af281611353565b60006020828403121561184957600080fd5b5051919050565b600060ff821660ff8103611866576118666116ff565b6001019291505056fea26469706673582212204ad9e3647686c10ce53b06c493dc55a059846edc117eaff05ad827efb30b48e864736f6c63430008120033",
  "libraries": {
    "Color": "0xd795DE79b46792928a386EAcddE5Ef173146509F"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Decorations.sol:Decorations",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1614,
        "contract": "contracts/Decorations.sol:Decorations",
        "label": "_chainellation",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1618,
        "contract": "contracts/Decorations.sol:Decorations",
        "label": "_registered",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint8)"
      },
      {
        "astId": 1621,
        "contract": "contracts/Decorations.sol:Decorations",
        "label": "allDecorations",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1626,
        "contract": "contracts/Decorations.sol:Decorations",
        "label": "_decorations",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Decoration)1603_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_uint256,t_struct(Decoration)1603_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Decorations.Decoration)",
        "numberOfBytes": "32",
        "value": "t_struct(Decoration)1603_storage"
      },
      "t_struct(Decoration)1603_storage": {
        "encoding": "inplace",
        "label": "struct Decorations.Decoration",
        "members": [
          {
            "astId": 1598,
            "contract": "contracts/Decorations.sol:Decorations",
            "label": "silhouette",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1600,
            "contract": "contracts/Decorations.sol:Decorations",
            "label": "skyMath",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1602,
            "contract": "contracts/Decorations.sol:Decorations",
            "label": "decorationOne",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}