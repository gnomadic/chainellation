{
  "address": "0x5ba6A18680604E1153Be2abc6418F9b4DEB47f5a",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "groundSeed",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "H",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "S",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "L",
              "type": "uint16"
            }
          ],
          "internalType": "struct Color.HSL",
          "name": "primary",
          "type": "tuple"
        }
      ],
      "name": "buildMountains",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "generateCharacter",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "baseColor",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "starSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "funkSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "circleSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "groundSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "constellationSeed",
              "type": "uint256"
            }
          ],
          "internalType": "struct Color.DNA",
          "name": "dna",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "gazes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "daytime",
          "type": "bool"
        }
      ],
      "name": "getDeco",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "groundSeed",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "nonce",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "height",
          "type": "uint16"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "H",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "S",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "L",
              "type": "uint16"
            }
          ],
          "internalType": "struct Color.HSL",
          "name": "background",
          "type": "tuple"
        }
      ],
      "name": "getSingleMountain",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "groundSeed",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "nonce",
          "type": "uint16"
        }
      ],
      "name": "getXCoordsArray",
      "outputs": [
        {
          "internalType": "uint16[]",
          "name": "",
          "type": "uint16[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "groundSeed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "height",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "inputArray",
          "type": "uint16[]"
        }
      ],
      "name": "getYCoords2",
      "outputs": [
        {
          "internalType": "uint16[]",
          "name": "",
          "type": "uint16[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "baseColor",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "starSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "funkSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "circleSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "groundSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "constellationSeed",
              "type": "uint256"
            }
          ],
          "internalType": "struct Color.DNA",
          "name": "dna",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "gazes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "daytime",
          "type": "bool"
        }
      ],
      "name": "packageAsSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xea1f624c0ec132cc43feea3ebda7e5fe4ee838423f4d1ae14ee358a024df21f6",
  "receipt": {
    "to": null,
    "from": "0x0a12A6777fc7D65b1461070648dA9CAE6962fcEe",
    "contractAddress": "0x5ba6A18680604E1153Be2abc6418F9b4DEB47f5a",
    "transactionIndex": 53,
    "gasUsed": "2263341",
    "logsBloom": "0x
    "blockHash": "0x1ada09a41497621265f19607032e73aa5c2ad049cb138767a7a674663f8ce6d4",
    "transactionHash": "0xea1f624c0ec132cc43feea3ebda7e5fe4ee838423f4d1ae14ee358a024df21f6",
    "logs": [
      {
        "transactionIndex": 53,
        "blockNumber": 43949428,
        "transactionHash": "0xea1f624c0ec132cc43feea3ebda7e5fe4ee838423f4d1ae14ee358a024df21f6",
        "address": "0x5ba6A18680604E1153Be2abc6418F9b4DEB47f5a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000a12a6777fc7d65b1461070648da9cae6962fcee"
        ],
        "data": "0x",
        "logIndex": 203,
        "blockHash": "0x1ada09a41497621265f19607032e73aa5c2ad049cb138767a7a674663f8ce6d4"
      },
      {
        "transactionIndex": 53,
        "blockNumber": 43949428,
        "transactionHash": "0xea1f624c0ec132cc43feea3ebda7e5fe4ee838423f4d1ae14ee358a024df21f6",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000a12a6777fc7d65b1461070648da9cae6962fcee",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000b8ed81f299746d0000000000000000000000000000000000000000000000006f3735af70bb236800000000000000000000000000000000000000000002245bc9be482af08a1df10000000000000000000000000000000000000000000000006e7e482d7e21aefb00000000000000000000000000000000000000000002245bca7735ace323925e",
        "logIndex": 204,
        "blockHash": "0x1ada09a41497621265f19607032e73aa5c2ad049cb138767a7a674663f8ce6d4"
      }
    ],
    "blockNumber": 43949428,
    "cumulativeGasUsed": "9963211",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5c9dd798b896730c892dbd999afd44b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"groundSeed\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"H\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"S\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"L\",\"type\":\"uint16\"}],\"internalType\":\"struct Color.HSL\",\"name\":\"primary\",\"type\":\"tuple\"}],\"name\":\"buildMountains\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"generateCharacter\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"baseColor\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"starSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funkSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circleSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"groundSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"constellationSeed\",\"type\":\"uint256\"}],\"internalType\":\"struct Color.DNA\",\"name\":\"dna\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"gazes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"daytime\",\"type\":\"bool\"}],\"name\":\"getDeco\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"groundSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"nonce\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"height\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"H\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"S\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"L\",\"type\":\"uint16\"}],\"internalType\":\"struct Color.HSL\",\"name\":\"background\",\"type\":\"tuple\"}],\"name\":\"getSingleMountain\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"groundSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"nonce\",\"type\":\"uint16\"}],\"name\":\"getXCoordsArray\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"groundSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"height\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"inputArray\",\"type\":\"uint16[]\"}],\"name\":\"getYCoords2\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"baseColor\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"starSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funkSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circleSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"groundSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"constellationSeed\",\"type\":\"uint256\"}],\"internalType\":\"struct Color.DNA\",\"name\":\"dna\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"gazes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"daytime\",\"type\":\"bool\"}],\"name\":\"packageAsSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/decos/MountainLine.sol\":\"MountainLine\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Color.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary Color {\\n    using Strings for uint256;\\n\\n    struct DNA {\\n        uint256 tokenId;\\n        uint16 baseColor;\\n        uint256 starSeed;\\n        uint256 funkSeed;\\n        uint256 circleSeed;\\n        uint256 groundSeed;\\n        uint256 constellationSeed;\\n    }\\n\\n    struct HSL {\\n        uint16 H;\\n        uint16 S;\\n        uint16 L;\\n    }\\n\\n    struct Point {\\n        uint16 x;\\n        uint16 y;\\n    }\\n\\n    struct Circle {\\n        uint16 x;\\n        uint16 y;\\n        uint16 r;\\n        uint8 count;\\n        uint16 stroke;\\n        bool active;\\n    }\\n\\n    function HSLtoString(HSL memory color) public pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"hsl(\\\",\\n                    ((uint256)(color.H)).toString(),\\n                    \\\",\\\",\\n                    ((uint256)(color.S)).toString(),\\n                    \\\"%,\\\",\\n                    ((uint256)(color.L)).toString(),\\n                    \\\"%)\\\"\\n                )\\n            );\\n    }\\n\\n    function toString(uint16 num) public pure returns (string memory) {\\n        return ((uint256)(num)).toString();\\n    }\\n\\n    function psuedorandom(\\n        uint256 tokenId,\\n        uint256 nonce\\n    ) public pure returns (uint256) {\\n        return uint(keccak256(abi.encodePacked(tokenId, nonce)));\\n    }\\n\\n    function wiggle(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        uint16 base,\\n        uint16 offset\\n    ) public pure returns (uint16) {\\n        uint16 wiggleAmount = (uint16)(psuedorandom(tokenId, nonce) % offset);\\n        if ((uint8)(psuedorandom(tokenId, nonce) % 2) == 0) {\\n            return base + wiggleAmount;\\n        } else {\\n            return subZero(base, wiggleAmount);\\n        }\\n    }\\n\\n    function wiggleString(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        uint16 base,\\n        uint16 offset\\n    ) public pure returns (string memory) {\\n        return toString(wiggle(tokenId, nonce, base, offset));\\n    }\\n\\n    function wiggleUp(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        uint16 base,\\n        uint16 offset\\n    ) public pure returns (uint16) {\\n        uint16 wiggleAmount = (uint16)(psuedorandom(tokenId, nonce) % offset);\\n        return base + wiggleAmount;\\n    }\\n\\n    function subZero(uint16 first, uint16 second) public pure returns (uint16) {\\n        if (first > second) {\\n            return first - second;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function flipColor(\\n        Color.HSL memory color\\n    ) public pure returns (Color.HSL memory) {\\n        uint16 newH = color.H + 180 > 360 ? color.H - 180 : color.H + 180;\\n        return Color.HSL(newH, color.S, color.L);\\n    }\\n\\n    function rotateColor(\\n        Color.HSL memory color,\\n        uint16 amount\\n    ) public pure returns (Color.HSL memory) {\\n        uint16 newH = color.H + amount > 360\\n            ? subZero(color.H, amount)\\n            : color.H + amount;\\n        return Color.HSL(newH, color.S, color.L);\\n    }\\n\\n    function genDNA(uint256 tokenId) public pure returns (DNA memory) {\\n        DNA memory dna;\\n        dna.tokenId = tokenId;\\n        dna.baseColor = uint16((tokenId % 16) * 10);\\n        dna.starSeed = psuedorandom(tokenId, 123);\\n        dna.funkSeed = psuedorandom(tokenId, 234);\\n        dna.circleSeed = psuedorandom(tokenId, 345);\\n        dna.groundSeed = psuedorandom(tokenId, 456);\\n        dna.constellationSeed = tokenId;\\n\\n        return dna;\\n    }\\n}\\n\",\"keccak256\":\"0xf666304c94ce23e23aef55bb5abe5cfb2be1b2dd031eda7ec5476495a5bbbc4c\",\"license\":\"MIT\"},\"contracts/decos/IDeco.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\nimport \\\"../Color.sol\\\";\\n\\ninterface IDeco {\\n    function getDeco(\\n        uint256 tokenId,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) external view returns (string memory);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x06c882081a5140f3a38162f7542cbfd8d028739f75181879744c87faaa392eb0\",\"license\":\"MIT\"},\"contracts/decos/MountainLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"./IDeco.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\ncontract MountainLine is IDeco, Ownable {\\n    using Strings for uint256;\\n\\n    function ownerOf(uint256 tokenId) external view returns (address) {\\n        return _msgSender();\\n    }\\n\\n    function balanceOf(address owner) external view returns (uint256) {\\n        return 1;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\\n        bytes memory dataURI = abi.encodePacked(\\n            \\\"{\\\",\\n            '\\\"name\\\": \\\"chainellation Mountains #',\\n            tokenId.toString(),\\n            '\\\",',\\n            '\\\"description\\\": \\\"chainellation Mountains\\\",',\\n            '\\\"image\\\": \\\"',\\n            generateCharacter(tokenId),\\n            '\\\"',\\n            \\\"}\\\"\\n        );\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(dataURI)\\n                )\\n            );\\n    }\\n\\n    function generateCharacter(\\n        uint256 tokenId\\n    ) public view returns (string memory) {\\n        Color.DNA memory dna = Color.genDNA(tokenId);\\n        bytes memory svg = abi.encodePacked(\\n            packageAsSVG(tokenId, dna, 0, true)\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:image/svg+xml;base64,\\\",\\n                    Base64.encode(svg)\\n                )\\n            );\\n    }\\n\\n    function packageAsSVG(\\n        uint256 tokenId,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) public view returns (string memory) {\\n        return\\n            string.concat(\\n                '<svg viewBox=\\\"0 0 512 512\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">',\\n                getDeco(tokenId, dna, gazes, daytime),\\n                \\\"</svg>\\\"\\n            );\\n    }\\n\\n    function getDeco(\\n        uint256 tokenId,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) public pure returns (string memory) {\\n        return\\n            string.concat(\\n                '<g id=\\\"silhouette\\\">',\\n                '<filter id=\\\"g\\\"><feDropShadow dy=\\\"-5\\\" stdDeviation=\\\"5\\\" flood-color=\\\"#fff\\\" flood-opacity=\\\".1\\\"/></filter>',\\n                buildMountains(\\n                    dna.groundSeed,\\n                    Color.HSL(dna.baseColor, 100, 30)\\n                ),\\n                \\\"</g>\\\"\\n            );\\n    }\\n\\n    function buildMountains(\\n        uint256 groundSeed,\\n        Color.HSL memory primary\\n    ) public pure returns (string memory) {\\n        Color.HSL memory background = primary;\\n\\n        string memory mountains = \\\"\\\";\\n        uint16 baseS = 50;\\n        uint16 baseL = 20; //24;\\n\\n        background.S = baseS;\\n        background.L = baseL;\\n\\n        for (uint16 i = 1; i < 4; i++) {\\n            background.L = Color.subZero(baseL, (5 * (i + 1)));\\n\\n            mountains = string.concat(\\n                mountains,\\n                getSingleMountain(\\n                    groundSeed,\\n                    i,\\n                    270 + Color.wiggleUp(groundSeed, i, (i * 50), 20),\\n                    background\\n                )\\n            );\\n        }\\n        background.L = 0;\\n\\n        return mountains;\\n    }\\n\\n    function getSingleMountain(\\n        uint256 groundSeed,\\n        uint16 nonce,\\n        uint16 height,\\n        Color.HSL memory background\\n    ) public pure returns (string memory) {\\n        uint16[] memory xCoords = getXCoordsArray(groundSeed, nonce);\\n\\n        uint16[] memory yCoords = getYCoords2(\\n            groundSeed,\\n            nonce,\\n            height,\\n            xCoords\\n        );\\n\\n        uint16 distance = (uint16)(512 / xCoords[xCoords.length - 1]) + 1;\\n\\n        string memory land = string.concat(\\n            '<path  d=\\\"M ',\\n            Color.toString((xCoords[0]) * distance),\\n            \\\", \\\",\\n            Color.toString(yCoords[0])\\n        );\\n\\n        for (uint16 i = 1; i < xCoords.length; i++) {\\n            land = string.concat(\\n                land,\\n                \\\" C \\\",\\n                Color.toString(\\n                    (xCoords[i - 1] * distance) +\\n                        (((xCoords[i] * distance) -\\n                            (xCoords[i - 1] * distance)) / 2)\\n                ),\\n                \\\", \\\",\\n                Color.toString(yCoords[i] - (distance / 2)),\\n                \\\" \\\",\\n                Color.toString(\\n                    (xCoords[i - 1] * distance) +\\n                        (((xCoords[i] * distance) -\\n                            (xCoords[i - 1] * distance)) / 2)\\n                ),\\n                \\\", \\\",\\n                Color.toString(yCoords[i] - (distance / 2)),\\n                \\\" \\\",\\n                Color.toString((xCoords[i] + 0) * distance),\\n                \\\", \\\",\\n                Color.toString(yCoords[i]),\\n                \\\" \\\"\\n            );\\n        }\\n\\n        land = string.concat(\\n            land,\\n            \\\" L 512, \\\",\\n            Color.wiggleString(\\n                groundSeed,\\n                nonce,\\n                yCoords[yCoords.length - 1],\\n                10\\n            )\\n        );\\n\\n        land = string.concat(\\n            land,\\n            ' L 512, 512 L 0 512 z\\\" fill=\\\"',\\n            Color.HSLtoString(background),\\n            '\\\" filter=\\\"url(#g)\\\"/>'\\n        );\\n\\n        return land;\\n    }\\n\\n    function getXCoordsArray(\\n        uint256 groundSeed,\\n        uint16 nonce\\n    ) public pure returns (uint16[] memory) {\\n        uint16 valleyCount = (uint16)(\\n            (Color.psuedorandom(groundSeed, nonce) % 20) + 18\\n        );\\n\\n        uint16[] memory valleys = new uint16[](valleyCount);\\n        valleys[0] = 0;\\n\\n        for (uint16 i = 1; i < valleyCount; i++) {\\n            valleys[i] =\\n                Color.wiggleUp(groundSeed, nonce * i, valleys[i - 1] + 1, 5) +\\n                1;\\n        }\\n\\n        return (valleys);\\n    }\\n\\n    function getYCoords2(\\n        uint256 groundSeed,\\n        uint256 nonce,\\n        uint16 height,\\n        uint16[] memory inputArray\\n    ) public pure returns (uint16[] memory) {\\n        uint16[] memory outputArray = new uint16[](inputArray.length);\\n\\n        uint16 midpoint = Color.wiggle(\\n            groundSeed,\\n            nonce,\\n            (uint16)(inputArray.length / 2),\\n            2\\n        );\\n\\n        uint8 groupSize = 0;\\n\\n        uint16 currentNum = (uint16)(height);\\n\\n        bool add = true;\\n\\n        outputArray[0] = height;\\n        for (uint16 i = 1; i < inputArray.length; i++) {\\n            if (i == midpoint) {\\n                outputArray[i] = currentNum + 5;\\n            } else {\\n                if (i < midpoint) {\\n                    add = true;\\n                } else if (i > midpoint) {\\n                    add = false;\\n                }\\n\\n                if (\\n                    i == 0 ||\\n                    (inputArray[i] - inputArray[i - 1] < 2) ||\\n                    groupSize < 4\\n                ) {\\n                    outputArray[i] =\\n                        Color.wiggle(groundSeed, nonce * i, currentNum, 5) +\\n                        3;\\n                    groupSize++;\\n                } else {\\n                    if (add) {\\n                        currentNum = currentNum + 10;\\n                    } else {\\n                        currentNum = currentNum - 10;\\n                    }\\n\\n                    outputArray[i] =\\n                        Color.wiggle(groundSeed, nonce * i, currentNum, 7) +\\n                        8;\\n                    groupSize = 0;\\n                }\\n            }\\n        }\\n        return outputArray;\\n    }\\n\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view override returns (address) {\\n        return _msgSender();\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external override {}\\n\\n    function burn(uint256 tokenId) external override {}\\n}\\n\",\"keccak256\":\"0x80a71611ccc90afc8e6650cd8cd9d934d71944006a76ff0bfc8bb887d80e3da6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6127a28061007e6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063e3366c9911610066578063e3366c991461020f578063e87e3a2b14610222578063e8b5bef614610235578063f2fde38b1461024857600080fd5b80638da5cb5b146101b85780639ffab72a146101c9578063b3dcf5da146101e9578063c87b56dd146101fc57600080fd5b80636352211e116100d35780636352211e1461010557806370a082311461017b578063715018a61461019d5780638036d135146101a557600080fd5b8063081812fc146101055780630daefed51461013557806342842e0e1461015557806342966c681461016a575b600080fd5b6101186101133660046119e9565b61025b565b6040516001600160a01b0390911681526020015b60405180910390f35b6101486101433660046119e9565b610265565b60405161012c9190611a26565b610168610163366004611a75565b505050565b005b6101686101783660046119e9565b50565b61018f610189366004611ab1565b50600190565b60405190815260200161012c565b61016861035c565b6101486101b3366004611bc9565b610370565b6000546001600160a01b0316610118565b6101dc6101d7366004611c1b565b610c72565b60405161012c9190611cf3565b6101dc6101f7366004611d3b565b61109c565b61014861020a3660046119e9565b6112f9565b61014861021d366004611d7b565b611361565b610148610230366004611e19565b6113c6565b610148610243366004611d7b565b6115a2565b610168610256366004611ab1565b6115c0565b6000335b92915050565b6040517f761fc4030000000000000000000000000000000000000000000000000000000081526004810182905260609060009073d795DE79b46792928a386EAcddE5Ef173146509F9063761fc4039060240160e060405180830381865af41580156102d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f89190611e46565b9050600061030a8483600060016115a2565b60405160200161031a9190611ed1565b604051602081830303815290604052905061033481611652565b6040516020016103449190611eed565b60405160208183030381529060405292505050919050565b6103646117a5565b61036e60006117ff565b565b6060600061037e868661109c565b90506000610392878761ffff168785610c72565b9050600082600184516103a59190611f48565b815181106103b5576103b5611f5b565b60200260200101516102006103ca9190611f87565b6103d5906001611fa8565b9050600073d795DE79b46792928a386EAcddE5Ef173146509F631b0d4b4d838660008151811061040757610407611f5b565b60200260200101516104199190611fca565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610458573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104809190810190611ff0565b73d795DE79b46792928a386EAcddE5Ef173146509F631b0d4b4d856000815181106104ad576104ad611f5b565b60200260200101516040518263ffffffff1660e01b81526004016104db919061ffff91909116815260200190565b600060405180830381865af41580156104f8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105209190810190611ff0565b60405160200161053192919061207b565b60408051601f19818403018152919052905060015b84518161ffff161015610aaf578173d795DE79b46792928a386EAcddE5Ef173146509F631b0d4b4d6002868961057d6001886120e1565b61ffff168151811061059157610591611f5b565b60200260200101516105a39190611fca565b878a8761ffff16815181106105ba576105ba611f5b565b60200260200101516105cc9190611fca565b6105d691906120e1565b6105e09190611f87565b86896105ed6001886120e1565b61ffff168151811061060157610601611f5b565b60200260200101516106139190611fca565b61061d9190611fa8565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af415801561065c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106849190810190611ff0565b73d795DE79b46792928a386EAcddE5Ef173146509F631b0d4b4d6106a9600288611f87565b888661ffff16815181106106bf576106bf611f5b565b60200260200101516106d191906120e1565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610710573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107389190810190611ff0565b73d795DE79b46792928a386EAcddE5Ef173146509F631b0d4b4d6002888b61076160018a6120e1565b61ffff168151811061077557610775611f5b565b60200260200101516107879190611fca565b898c8961ffff168151811061079e5761079e611f5b565b60200260200101516107b09190611fca565b6107ba91906120e1565b6107c49190611f87565b888b6107d160018a6120e1565b61ffff16815181106107e5576107e5611f5b565b60200260200101516107f79190611fca565b6108019190611fa8565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610840573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108689190810190611ff0565b73d795DE79b46792928a386EAcddE5Ef173146509F631b0d4b4d61088d60028a611f87565b8a8861ffff16815181106108a3576108a3611f5b565b60200260200101516108b591906120e1565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af41580156108f4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261091c9190810190611ff0565b73d795DE79b46792928a386EAcddE5Ef173146509F631b0d4b4d898c8961ffff168151811061094d5761094d611f5b565b602002602001015160006109619190611fa8565b61096b9190611fca565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af41580156109aa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109d29190810190611ff0565b73d795DE79b46792928a386EAcddE5Ef173146509F631b0d4b4d8b8961ffff1681518110610a0257610a02611f5b565b60200260200101516040518263ffffffff1660e01b8152600401610a30919061ffff91909116815260200190565b600060405180830381865af4158015610a4d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a759190810190611ff0565b604051602001610a8b97969594939291906120fc565b60405160208183030381529060405291508080610aa7906121f1565b915050610546565b508073d795DE79b46792928a386EAcddE5Ef173146509F63d7ec08e78b8b8760018951610adc9190611f48565b81518110610aec57610aec611f5b565b60209081029190910101516040516001600160e01b031960e086901b168152600481019390935261ffff9182166024840152166044820152600a6064820152608401600060405180830381865af4158015610b4b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b739190810190611ff0565b604051602001610b84929190612212565b60408051808303601f190181528282527f0fc5c9fc000000000000000000000000000000000000000000000000000000008352885161ffff908116600485015260208a0151811660248501529189015190911660448301529150819073d795DE79b46792928a386EAcddE5Ef173146509F90630fc5c9fc90606401600060405180830381865af4158015610c1c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c449190810190611ff0565b604051602001610c5592919061226a565b60408051808303601f190181529190529998505050505050505050565b60606000825167ffffffffffffffff811115610c9057610c90611ae3565b604051908082528060200260200182016040528015610cb9578160200160208202803683370190505b509050600073d795DE79b46792928a386EAcddE5Ef173146509F63210636e9888860028851610ce891906122ec565b6040516001600160e01b031960e086901b1681526004810193909352602483019190915261ffff16604482015260026064820152608401602060405180830381865af4158015610d3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d609190612300565b90506000808690506000600190508785600081518110610d8257610d82611f5b565b61ffff9092166020928302919091019091015260015b87518161ffff16101561108d578461ffff168161ffff1603610df057610dbf836005611fa8565b868261ffff1681518110610dd557610dd5611f5b565b602002602001019061ffff16908161ffff168152505061107b565b8461ffff168161ffff161015610e095760019150610e1e565b8461ffff168161ffff161115610e1e57600091505b61ffff81161580610e825750600288610e386001846120e1565b61ffff1681518110610e4c57610e4c611f5b565b6020026020010151898361ffff1681518110610e6a57610e6a611f5b565b6020026020010151610e7c91906120e1565b61ffff16105b80610e90575060048460ff16105b15610f7a5773d795DE79b46792928a386EAcddE5Ef173146509F63210636e98c610ebe61ffff85168e61231d565b6040516001600160e01b031960e085901b1681526004810192909252602482015261ffff8616604482015260056064820152608401602060405180830381865af4158015610f10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f349190612300565b610f3f906003611fa8565b868261ffff1681518110610f5557610f55611f5b565b61ffff9092166020928302919091019091015283610f7281612334565b94505061107b565b8115610f9257610f8b83600a611fa8565b9250610fa0565b610f9d600a846120e1565b92505b73d795DE79b46792928a386EAcddE5Ef173146509F63210636e98c610fc961ffff85168e61231d565b6040516001600160e01b031960e085901b1681526004810192909252602482015261ffff8616604482015260076064820152608401602060405180830381865af415801561101b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103f9190612300565b61104a906008611fa8565b868261ffff168151811061106057611060611f5b565b602002602001019061ffff16908161ffff1681525050600093505b80611085816121f1565b915050610d98565b50939998505050505050505050565b6040517f3a20c8790000000000000000000000000000000000000000000000000000000081526004810183905261ffff8216602482015260609060009060149073d795DE79b46792928a386EAcddE5Ef173146509F90633a20c87990604401602060405180830381865af4158015611118573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113c9190612353565b611146919061236c565b611151906012612380565b905060008161ffff1667ffffffffffffffff81111561117257611172611ae3565b60405190808252806020026020018201604052801561119b578160200160208202803683370190505b5090506000816000815181106111b3576111b3611f5b565b61ffff9092166020928302919091019091015260015b8261ffff168161ffff1610156112f05773d795DE79b46792928a386EAcddE5Ef173146509F63dcaa2044876111fe8489611fca565b8561120a6001876120e1565b61ffff168151811061121e5761121e611f5b565b602002602001015160016112329190611fa8565b6040516001600160e01b031960e086901b168152600481019390935261ffff918216602484015216604482015260056064820152608401602060405180830381865af4158015611286573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112aa9190612300565b6112b5906001611fa8565b828261ffff16815181106112cb576112cb611f5b565b61ffff90921660209283029190910190910152806112e8816121f1565b9150506111c9565b50949350505050565b6060600061130683611867565b61130f84610265565b604051602001611320929190612393565b604051602081830303815290604052905061133a81611652565b60405160200161134a9190612522565b604051602081830303815290604052915050919050565b606061139d8460a001516040518060600160405280876020015161ffff168152602001606461ffff168152602001601e61ffff168152506113c6565b6040516020016113ad9190612567565b6040516020818303038152906040529050949350505050565b604080516020808201835260008252603290840181905260149284018390526060928492919060015b60048161ffff16101561158c5773d795DE79b46792928a386EAcddE5Ef173146509F633329f04f83611422846001611fa8565b61142d906005611fca565b6040516001600160e01b031960e085901b16815261ffff928316600482015291166024820152604401602060405180830381865af4158015611473573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114979190612300565b61ffff16604086015283611557898373d795DE79b46792928a386EAcddE5Ef173146509F63dcaa204483836114cd816032611fca565b6040516001600160e01b031960e086901b168152600481019390935261ffff918216602484015216604482015260146064820152608401602060405180830381865af4158015611521573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115459190612300565b6115519061010e611fa8565b89610370565b60405160200161156892919061266b565b60405160208183030381529060405293508080611584906121f1565b9150506113ef565b5050600060409093019290925291505092915050565b60606115b085858585611361565b6040516020016113ad919061269a565b6115c86117a5565b6001600160a01b0381166116495760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610178816117ff565b6060815160000361167157505060408051602081019091526000815290565b600060405180606001604052806040815260200161272d60409139905060006003845160026116a09190612380565b6116aa91906122ec565b6116b590600461231d565b67ffffffffffffffff8111156116cd576116cd611ae3565b6040519080825280601f01601f1916602001820160405280156116f7576020820181803683370190505b509050600182016020820185865187015b80821015611763576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845350600183019250611708565b505060038651066001811461177f57600281146117925761179a565b603d6001830353603d600283035361179a565b603d60018303535b509195945050505050565b6000546001600160a01b0316331461036e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611640565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060600061187483611907565b600101905060008167ffffffffffffffff81111561189457611894611ae3565b6040519080825280601f01601f1916602001820160405280156118be576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846118c857509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611950577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831061197c576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061199a57662386f26fc10000830492506010015b6305f5e10083106119b2576305f5e100830492506008015b61271083106119c657612710830492506004015b606483106119d8576064830492506002015b600a831061025f5760010192915050565b6000602082840312156119fb57600080fd5b5035919050565b60005b83811015611a1d578181015183820152602001611a05565b50506000910152565b6020815260008251806020840152611a45816040850160208701611a02565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114611a7057600080fd5b919050565b600080600060608486031215611a8a57600080fd5b611a9384611a59565b9250611aa160208501611a59565b9150604084013590509250925092565b600060208284031215611ac357600080fd5b611acc82611a59565b9392505050565b61ffff8116811461017857600080fd5b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff81118282101715611b1c57611b1c611ae3565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611b4b57611b4b611ae3565b604052919050565b600060608284031215611b6557600080fd5b6040516060810181811067ffffffffffffffff82111715611b8857611b88611ae3565b6040529050808235611b9981611ad3565b81526020830135611ba981611ad3565b60208201526040830135611bbc81611ad3565b6040919091015292915050565b60008060008060c08587031215611bdf57600080fd5b843593506020850135611bf181611ad3565b92506040850135611c0181611ad3565b9150611c108660608701611b53565b905092959194509250565b60008060008060808587031215611c3157600080fd5b8435935060208086013593506040860135611c4b81611ad3565b9250606086013567ffffffffffffffff80821115611c6857600080fd5b818801915088601f830112611c7c57600080fd5b813581811115611c8e57611c8e611ae3565b8060051b9150611c9f848301611b22565b818152918301840191848101908b841115611cb957600080fd5b938501935b83851015611ce35784359250611cd383611ad3565b8282529385019390850190611cbe565b989b979a50959850505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611d2f57835161ffff1683529284019291840191600101611d0f565b50909695505050505050565b60008060408385031215611d4e57600080fd5b823591506020830135611d6081611ad3565b809150509250929050565b80358015158114611a7057600080fd5b600080600080848603610140811215611d9357600080fd5b8535945060e0601f1982011215611da957600080fd5b50611db2611af9565b602086013581526040860135611dc781611ad3565b80602083015250606086013560408201526080860135606082015260a0860135608082015260c086013560a082015260e086013560c0820152809350506101008501359150611c106101208601611d6b565b60008060808385031215611e2c57600080fd5b82359150611e3d8460208501611b53565b90509250929050565b600060e08284031215611e5857600080fd5b611e60611af9565b825181526020830151611e7281611ad3565b8060208301525060408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201528091505092915050565b60008151611ec7818560208601611a02565b9290920192915050565b60008251611ee3818460208701611a02565b9190910192915050565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000815260008251611f2581601a850160208701611a02565b91909101601a0192915050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561025f5761025f611f32565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600061ffff80841680611f9c57611f9c611f71565b92169190910492915050565b61ffff818116838216019080821115611fc357611fc3611f32565b5092915050565b61ffff818116838216028082169190828114611fe857611fe8611f32565b505092915050565b60006020828403121561200257600080fd5b815167ffffffffffffffff8082111561201a57600080fd5b818401915084601f83011261202e57600080fd5b81518181111561204057612040611ae3565b612053601f8201601f1916602001611b22565b915080825285602082850101111561206a57600080fd5b6112f0816020840160208601611a02565b7f3c706174682020643d224d2000000000000000000000000000000000000000008152600083516120b381600c850160208801611a02565b61016160f51b600c9184019182015283516120d581600e840160208801611a02565b01600e01949350505050565b61ffff828116828216039080821115611fc357611fc3611f32565b6000885161210e818460208d01611a02565b7f20432000000000000000000000000000000000000000000000000000000000009083019081528851612148816003840160208d01611a02565b61016160f51b60039290910191820152875161216b816005840160208c01611a02565b600160fd1b60059290910191820152865161218d816006840160208b01611a02565b0161219f6006820161016160f51b9052565b6121ac6008820187611eb5565b600160fd1b815290506121c26001820186611eb5565b61016160f51b815290506121d96002820185611eb5565b600160fd1b81526001019a9950505050505050505050565b600061ffff80831681810361220857612208611f32565b6001019392505050565b60008351612224818460208801611a02565b7f204c203531322c20000000000000000000000000000000000000000000000000908301908152835161225e816008840160208801611a02565b01600801949350505050565b6000835161227c818460208801611a02565b7f204c203531322c20353132204c203020353132207a222066696c6c3d2200000090830190815283516122b681601d840160208801611a02565b7f222066696c7465723d2275726c28236729222f3e000000000000000000000000601d9290910191820152603101949350505050565b6000826122fb576122fb611f71565b500490565b60006020828403121561231257600080fd5b8151611acc81611ad3565b808202811582820484141761025f5761025f611f32565b600060ff821660ff810361234a5761234a611f32565b60010192915050565b60006020828403121561236557600080fd5b5051919050565b60008261237b5761237b611f71565b500690565b8082018082111561025f5761025f611f32565b7f7b0000000000000000000000000000000000000000000000000000000000000081527f226e616d65223a2022636861696e656c6c6174696f6e204d6f756e7461696e7360018201527f2023000000000000000000000000000000000000000000000000000000000000602182015260008351612417816023850160208801611a02565b7f222c0000000000000000000000000000000000000000000000000000000000006023918401918201527f226465736372697074696f6e223a2022636861696e656c6c6174696f6e204d6f60258201527f756e7461696e73222c000000000000000000000000000000000000000000000060458201527f22696d616765223a202200000000000000000000000000000000000000000000604e82015283516124c6816058840160208801611a02565b7f2200000000000000000000000000000000000000000000000000000000000000605892909101918201527f7d000000000000000000000000000000000000000000000000000000000000006059820152605a01949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161255a81601d850160208701611a02565b91909101601d0192915050565b7f3c672069643d2273696c686f7565747465223e0000000000000000000000000081527f3c66696c7465722069643d2267223e3c666544726f70536861646f772064793d60138201527f222d352220737464446576696174696f6e3d22352220666c6f6f642d636f6c6f60338201527f723d22236666662220666c6f6f642d6f7061636974793d222e31222f3e3c2f6660538201527f696c7465723e0000000000000000000000000000000000000000000000000000607382015260008251612637816079850160208701611a02565b7f3c2f673e000000000000000000000000000000000000000000000000000000006079939091019283015250607d01919050565b6000835161267d818460208801611a02565b835190830190612691818360208801611a02565b01949350505050565b7f3c7376672076696577426f783d2230203020353132203531322220786d6c6e7381527f3d22687474703a2f2f7777772e77332e6f72672f323030302f737667223e00006020820152600082516126f881603e850160208701611a02565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000603e93909101928301525060440191905056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220412734a9f444eb8acc7a6677db36c1cca48bac9b2cc819cffc504bb58e74bd6864736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063e3366c9911610066578063e3366c991461020f578063e87e3a2b14610222578063e8b5bef614610235578063f2fde38b1461024857600080fd5b80638da5cb5b146101b85780639ffab72a146101c9578063b3dcf5da146101e9578063c87b56dd146101fc57600080fd5b80636352211e116100d35780636352211e1461010557806370a082311461017b578063715018a61461019d5780638036d135146101a557600080fd5b8063081812fc146101055780630daefed51461013557806342842e0e1461015557806342966c681461016a575b600080fd5b6101186101133660046119e9565b61025b565b6040516001600160a01b0390911681526020015b60405180910390f35b6101486101433660046119e9565b610265565b60405161012c9190611a26565b610168610163366004611a75565b505050565b005b6101686101783660046119e9565b50565b61018f610189366004611ab1565b50600190565b60405190815260200161012c565b61016861035c565b6101486101b3366004611bc9565b610370565b6000546001600160a01b0316610118565b6101dc6101d7366004611c1b565b610c72565b60405161012c9190611cf3565b6101dc6101f7366004611d3b565b61109c565b61014861020a3660046119e9565b6112f9565b61014861021d366004611d7b565b611361565b610148610230366004611e19565b6113c6565b610148610243366004611d7b565b6115a2565b610168610256366004611ab1565b6115c0565b6000335b92915050565b6040517f761fc4030000000000000000000000000000000000000000000000000000000081526004810182905260609060009073__$11e21e6c56ca563b85c74e3fd3a08242f9$__9063761fc4039060240160e060405180830381865af41580156102d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f89190611e46565b9050600061030a8483600060016115a2565b60405160200161031a9190611ed1565b604051602081830303815290604052905061033481611652565b6040516020016103449190611eed565b60405160208183030381529060405292505050919050565b6103646117a5565b61036e60006117ff565b565b6060600061037e868661109c565b90506000610392878761ffff168785610c72565b9050600082600184516103a59190611f48565b815181106103b5576103b5611f5b565b60200260200101516102006103ca9190611f87565b6103d5906001611fa8565b9050600073__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d838660008151811061040757610407611f5b565b60200260200101516104199190611fca565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610458573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104809190810190611ff0565b73__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d856000815181106104ad576104ad611f5b565b60200260200101516040518263ffffffff1660e01b81526004016104db919061ffff91909116815260200190565b600060405180830381865af41580156104f8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105209190810190611ff0565b60405160200161053192919061207b565b60408051601f19818403018152919052905060015b84518161ffff161015610aaf578173__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d6002868961057d6001886120e1565b61ffff168151811061059157610591611f5b565b60200260200101516105a39190611fca565b878a8761ffff16815181106105ba576105ba611f5b565b60200260200101516105cc9190611fca565b6105d691906120e1565b6105e09190611f87565b86896105ed6001886120e1565b61ffff168151811061060157610601611f5b565b60200260200101516106139190611fca565b61061d9190611fa8565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af415801561065c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106849190810190611ff0565b73__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d6106a9600288611f87565b888661ffff16815181106106bf576106bf611f5b565b60200260200101516106d191906120e1565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610710573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107389190810190611ff0565b73__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d6002888b61076160018a6120e1565b61ffff168151811061077557610775611f5b565b60200260200101516107879190611fca565b898c8961ffff168151811061079e5761079e611f5b565b60200260200101516107b09190611fca565b6107ba91906120e1565b6107c49190611f87565b888b6107d160018a6120e1565b61ffff16815181106107e5576107e5611f5b565b60200260200101516107f79190611fca565b6108019190611fa8565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610840573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108689190810190611ff0565b73__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d61088d60028a611f87565b8a8861ffff16815181106108a3576108a3611f5b565b60200260200101516108b591906120e1565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af41580156108f4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261091c9190810190611ff0565b73__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d898c8961ffff168151811061094d5761094d611f5b565b602002602001015160006109619190611fa8565b61096b9190611fca565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af41580156109aa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109d29190810190611ff0565b73__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d8b8961ffff1681518110610a0257610a02611f5b565b60200260200101516040518263ffffffff1660e01b8152600401610a30919061ffff91909116815260200190565b600060405180830381865af4158015610a4d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a759190810190611ff0565b604051602001610a8b97969594939291906120fc565b60405160208183030381529060405291508080610aa7906121f1565b915050610546565b508073__$11e21e6c56ca563b85c74e3fd3a08242f9$__63d7ec08e78b8b8760018951610adc9190611f48565b81518110610aec57610aec611f5b565b60209081029190910101516040516001600160e01b031960e086901b168152600481019390935261ffff9182166024840152166044820152600a6064820152608401600060405180830381865af4158015610b4b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b739190810190611ff0565b604051602001610b84929190612212565b60408051808303601f190181528282527f0fc5c9fc000000000000000000000000000000000000000000000000000000008352885161ffff908116600485015260208a0151811660248501529189015190911660448301529150819073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90630fc5c9fc90606401600060405180830381865af4158015610c1c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c449190810190611ff0565b604051602001610c5592919061226a565b60408051808303601f190181529190529998505050505050505050565b60606000825167ffffffffffffffff811115610c9057610c90611ae3565b604051908082528060200260200182016040528015610cb9578160200160208202803683370190505b509050600073__$11e21e6c56ca563b85c74e3fd3a08242f9$__63210636e9888860028851610ce891906122ec565b6040516001600160e01b031960e086901b1681526004810193909352602483019190915261ffff16604482015260026064820152608401602060405180830381865af4158015610d3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d609190612300565b90506000808690506000600190508785600081518110610d8257610d82611f5b565b61ffff9092166020928302919091019091015260015b87518161ffff16101561108d578461ffff168161ffff1603610df057610dbf836005611fa8565b868261ffff1681518110610dd557610dd5611f5b565b602002602001019061ffff16908161ffff168152505061107b565b8461ffff168161ffff161015610e095760019150610e1e565b8461ffff168161ffff161115610e1e57600091505b61ffff81161580610e825750600288610e386001846120e1565b61ffff1681518110610e4c57610e4c611f5b565b6020026020010151898361ffff1681518110610e6a57610e6a611f5b565b6020026020010151610e7c91906120e1565b61ffff16105b80610e90575060048460ff16105b15610f7a5773__$11e21e6c56ca563b85c74e3fd3a08242f9$__63210636e98c610ebe61ffff85168e61231d565b6040516001600160e01b031960e085901b1681526004810192909252602482015261ffff8616604482015260056064820152608401602060405180830381865af4158015610f10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f349190612300565b610f3f906003611fa8565b868261ffff1681518110610f5557610f55611f5b565b61ffff9092166020928302919091019091015283610f7281612334565b94505061107b565b8115610f9257610f8b83600a611fa8565b9250610fa0565b610f9d600a846120e1565b92505b73__$11e21e6c56ca563b85c74e3fd3a08242f9$__63210636e98c610fc961ffff85168e61231d565b6040516001600160e01b031960e085901b1681526004810192909252602482015261ffff8616604482015260076064820152608401602060405180830381865af415801561101b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103f9190612300565b61104a906008611fa8565b868261ffff168151811061106057611060611f5b565b602002602001019061ffff16908161ffff1681525050600093505b80611085816121f1565b915050610d98565b50939998505050505050505050565b6040517f3a20c8790000000000000000000000000000000000000000000000000000000081526004810183905261ffff8216602482015260609060009060149073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90633a20c87990604401602060405180830381865af4158015611118573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113c9190612353565b611146919061236c565b611151906012612380565b905060008161ffff1667ffffffffffffffff81111561117257611172611ae3565b60405190808252806020026020018201604052801561119b578160200160208202803683370190505b5090506000816000815181106111b3576111b3611f5b565b61ffff9092166020928302919091019091015260015b8261ffff168161ffff1610156112f05773__$11e21e6c56ca563b85c74e3fd3a08242f9$__63dcaa2044876111fe8489611fca565b8561120a6001876120e1565b61ffff168151811061121e5761121e611f5b565b602002602001015160016112329190611fa8565b6040516001600160e01b031960e086901b168152600481019390935261ffff918216602484015216604482015260056064820152608401602060405180830381865af4158015611286573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112aa9190612300565b6112b5906001611fa8565b828261ffff16815181106112cb576112cb611f5b565b61ffff90921660209283029190910190910152806112e8816121f1565b9150506111c9565b50949350505050565b6060600061130683611867565b61130f84610265565b604051602001611320929190612393565b604051602081830303815290604052905061133a81611652565b60405160200161134a9190612522565b604051602081830303815290604052915050919050565b606061139d8460a001516040518060600160405280876020015161ffff168152602001606461ffff168152602001601e61ffff168152506113c6565b6040516020016113ad9190612567565b6040516020818303038152906040529050949350505050565b604080516020808201835260008252603290840181905260149284018390526060928492919060015b60048161ffff16101561158c5773__$11e21e6c56ca563b85c74e3fd3a08242f9$__633329f04f83611422846001611fa8565b61142d906005611fca565b6040516001600160e01b031960e085901b16815261ffff928316600482015291166024820152604401602060405180830381865af4158015611473573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114979190612300565b61ffff16604086015283611557898373__$11e21e6c56ca563b85c74e3fd3a08242f9$__63dcaa204483836114cd816032611fca565b6040516001600160e01b031960e086901b168152600481019390935261ffff918216602484015216604482015260146064820152608401602060405180830381865af4158015611521573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115459190612300565b6115519061010e611fa8565b89610370565b60405160200161156892919061266b565b60405160208183030381529060405293508080611584906121f1565b9150506113ef565b5050600060409093019290925291505092915050565b60606115b085858585611361565b6040516020016113ad919061269a565b6115c86117a5565b6001600160a01b0381166116495760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610178816117ff565b6060815160000361167157505060408051602081019091526000815290565b600060405180606001604052806040815260200161272d60409139905060006003845160026116a09190612380565b6116aa91906122ec565b6116b590600461231d565b67ffffffffffffffff8111156116cd576116cd611ae3565b6040519080825280601f01601f1916602001820160405280156116f7576020820181803683370190505b509050600182016020820185865187015b80821015611763576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845350600183019250611708565b505060038651066001811461177f57600281146117925761179a565b603d6001830353603d600283035361179a565b603d60018303535b509195945050505050565b6000546001600160a01b0316331461036e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611640565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060600061187483611907565b600101905060008167ffffffffffffffff81111561189457611894611ae3565b6040519080825280601f01601f1916602001820160405280156118be576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846118c857509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611950577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831061197c576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061199a57662386f26fc10000830492506010015b6305f5e10083106119b2576305f5e100830492506008015b61271083106119c657612710830492506004015b606483106119d8576064830492506002015b600a831061025f5760010192915050565b6000602082840312156119fb57600080fd5b5035919050565b60005b83811015611a1d578181015183820152602001611a05565b50506000910152565b6020815260008251806020840152611a45816040850160208701611a02565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114611a7057600080fd5b919050565b600080600060608486031215611a8a57600080fd5b611a9384611a59565b9250611aa160208501611a59565b9150604084013590509250925092565b600060208284031215611ac357600080fd5b611acc82611a59565b9392505050565b61ffff8116811461017857600080fd5b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff81118282101715611b1c57611b1c611ae3565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611b4b57611b4b611ae3565b604052919050565b600060608284031215611b6557600080fd5b6040516060810181811067ffffffffffffffff82111715611b8857611b88611ae3565b6040529050808235611b9981611ad3565b81526020830135611ba981611ad3565b60208201526040830135611bbc81611ad3565b6040919091015292915050565b60008060008060c08587031215611bdf57600080fd5b843593506020850135611bf181611ad3565b92506040850135611c0181611ad3565b9150611c108660608701611b53565b905092959194509250565b60008060008060808587031215611c3157600080fd5b8435935060208086013593506040860135611c4b81611ad3565b9250606086013567ffffffffffffffff80821115611c6857600080fd5b818801915088601f830112611c7c57600080fd5b813581811115611c8e57611c8e611ae3565b8060051b9150611c9f848301611b22565b818152918301840191848101908b841115611cb957600080fd5b938501935b83851015611ce35784359250611cd383611ad3565b8282529385019390850190611cbe565b989b979a50959850505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611d2f57835161ffff1683529284019291840191600101611d0f565b50909695505050505050565b60008060408385031215611d4e57600080fd5b823591506020830135611d6081611ad3565b809150509250929050565b80358015158114611a7057600080fd5b600080600080848603610140811215611d9357600080fd5b8535945060e0601f1982011215611da957600080fd5b50611db2611af9565b602086013581526040860135611dc781611ad3565b80602083015250606086013560408201526080860135606082015260a0860135608082015260c086013560a082015260e086013560c0820152809350506101008501359150611c106101208601611d6b565b60008060808385031215611e2c57600080fd5b82359150611e3d8460208501611b53565b90509250929050565b600060e08284031215611e5857600080fd5b611e60611af9565b825181526020830151611e7281611ad3565b8060208301525060408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201528091505092915050565b60008151611ec7818560208601611a02565b9290920192915050565b60008251611ee3818460208701611a02565b9190910192915050565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000815260008251611f2581601a850160208701611a02565b91909101601a0192915050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561025f5761025f611f32565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600061ffff80841680611f9c57611f9c611f71565b92169190910492915050565b61ffff818116838216019080821115611fc357611fc3611f32565b5092915050565b61ffff818116838216028082169190828114611fe857611fe8611f32565b505092915050565b60006020828403121561200257600080fd5b815167ffffffffffffffff8082111561201a57600080fd5b818401915084601f83011261202e57600080fd5b81518181111561204057612040611ae3565b612053601f8201601f1916602001611b22565b915080825285602082850101111561206a57600080fd5b6112f0816020840160208601611a02565b7f3c706174682020643d224d2000000000000000000000000000000000000000008152600083516120b381600c850160208801611a02565b61016160f51b600c9184019182015283516120d581600e840160208801611a02565b01600e01949350505050565b61ffff828116828216039080821115611fc357611fc3611f32565b6000885161210e818460208d01611a02565b7f20432000000000000000000000000000000000000000000000000000000000009083019081528851612148816003840160208d01611a02565b61016160f51b60039290910191820152875161216b816005840160208c01611a02565b600160fd1b60059290910191820152865161218d816006840160208b01611a02565b0161219f6006820161016160f51b9052565b6121ac6008820187611eb5565b600160fd1b815290506121c26001820186611eb5565b61016160f51b815290506121d96002820185611eb5565b600160fd1b81526001019a9950505050505050505050565b600061ffff80831681810361220857612208611f32565b6001019392505050565b60008351612224818460208801611a02565b7f204c203531322c20000000000000000000000000000000000000000000000000908301908152835161225e816008840160208801611a02565b01600801949350505050565b6000835161227c818460208801611a02565b7f204c203531322c20353132204c203020353132207a222066696c6c3d2200000090830190815283516122b681601d840160208801611a02565b7f222066696c7465723d2275726c28236729222f3e000000000000000000000000601d9290910191820152603101949350505050565b6000826122fb576122fb611f71565b500490565b60006020828403121561231257600080fd5b8151611acc81611ad3565b808202811582820484141761025f5761025f611f32565b600060ff821660ff810361234a5761234a611f32565b60010192915050565b60006020828403121561236557600080fd5b5051919050565b60008261237b5761237b611f71565b500690565b8082018082111561025f5761025f611f32565b7f7b0000000000000000000000000000000000000000000000000000000000000081527f226e616d65223a2022636861696e656c6c6174696f6e204d6f756e7461696e7360018201527f2023000000000000000000000000000000000000000000000000000000000000602182015260008351612417816023850160208801611a02565b7f222c0000000000000000000000000000000000000000000000000000000000006023918401918201527f226465736372697074696f6e223a2022636861696e656c6c6174696f6e204d6f60258201527f756e7461696e73222c000000000000000000000000000000000000000000000060458201527f22696d616765223a202200000000000000000000000000000000000000000000604e82015283516124c6816058840160208801611a02565b7f2200000000000000000000000000000000000000000000000000000000000000605892909101918201527f7d000000000000000000000000000000000000000000000000000000000000006059820152605a01949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161255a81601d850160208701611a02565b91909101601d0192915050565b7f3c672069643d2273696c686f7565747465223e0000000000000000000000000081527f3c66696c7465722069643d2267223e3c666544726f70536861646f772064793d60138201527f222d352220737464446576696174696f6e3d22352220666c6f6f642d636f6c6f60338201527f723d22236666662220666c6f6f642d6f7061636974793d222e31222f3e3c2f6660538201527f696c7465723e0000000000000000000000000000000000000000000000000000607382015260008251612637816079850160208701611a02565b7f3c2f673e000000000000000000000000000000000000000000000000000000006079939091019283015250607d01919050565b6000835161267d818460208801611a02565b835190830190612691818360208801611a02565b01949350505050565b7f3c7376672076696577426f783d2230203020353132203531322220786d6c6e7381527f3d22687474703a2f2f7777772e77332e6f72672f323030302f737667223e00006020820152600082516126f881603e850160208701611a02565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000603e93909101928301525060440191905056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220412734a9f444eb8acc7a6677db36c1cca48bac9b2cc819cffc504bb58e74bd6864736f6c63430008120033",
  "libraries": {
    "Color": "0xd795DE79b46792928a386EAcddE5Ef173146509F"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/decos/MountainLine.sol:MountainLine",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}