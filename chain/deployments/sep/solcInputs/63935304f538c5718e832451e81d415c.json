{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\n\n        if (batchSize > 1) {\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\n            revert(\"ERC721Enumerable: consecutive transfers not supported\");\n        }\n\n        uint256 tokenId = firstTokenId;\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides a set of functions to operate with Base64 strings.\n *\n * _Available since v4.5._\n */\nlibrary Base64 {\n    /**\n     * @dev Base64 Encoding/Decoding Table\n     */\n    string internal constant _TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\n     */\n    function encode(bytes memory data) internal pure returns (string memory) {\n        /**\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\n         */\n        if (data.length == 0) return \"\";\n\n        // Loads the table into memory\n        string memory table = _TABLE;\n\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\n        // and split into 4 numbers of 6 bits.\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\n        // - `data.length + 2`  -> Round up\n        // - `/ 3`              -> Number of 3-bytes chunks\n        // - `4 *`              -> 4 characters for each chunk\n        string memory result = new string(4 * ((data.length + 2) / 3));\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Prepare the lookup table (skip the first \"length\" byte)\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 32)\n\n            // Run over the input, 3 bytes at a time\n            for {\n                let dataPtr := data\n                let endPtr := add(data, mload(data))\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // Advance 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // To write each character, shift the 3 bytes (18 bits) chunk\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\n                // and apply logical AND with 0x3F which is the number of\n                // the previous character in the ASCII table prior to the Base64 Table\n                // The result is then added to the table to get the character to write,\n                // and finally write it in the result pointer but with a left shift\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n            }\n\n            // When data `bytes` is not exactly 3 bytes long\n            // it is padded with `=` characters at the end\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n                mstore8(sub(resultPtr, 2), 0x3d)\n            }\n            case 2 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/Chainellation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./SVGGen2.sol\";\nimport \"./Color.sol\";\n\ncontract Chainellation is ERC721, ERC721Enumerable, Ownable {\n    using Strings for uint256;\n    using Counters for Counters.Counter;\n\n    Counters.Counter private _tokenIds;\n    uint256 public maxSupply = 500;\n    uint256 public mintCost = 0; // 5 * 10 ** 16;\n\n    mapping(uint256 => Color.DNA) public dnas;\n\n    mapping(uint256 => uint16) public timeZoneOffset;\n    mapping(uint256 => uint16) public gazes;\n    mapping(uint256 => uint256) public lastGaze;\n\n    mapping(uint256 => uint256) public lastGust;\n\n    address private _decorator;\n\n    constructor() ERC721(\"chainellation\", \"STARS\") {}\n\n    function tokenURI(\n        uint256 tokenId\n    ) public view virtual override returns (string memory) {\n        if (tokenId > _tokenIds.current()) revert NotMinted();\n\n        bytes memory dataURI = abi.encodePacked(\n            \"{\",\n            '\"name\": \"chainellation #',\n            tokenId.toString(),\n            '\",',\n            '\"description\": \"chainellation\",',\n            '\"image\": \"',\n            generateCharacter(tokenId),\n            '\"',\n            \"}\"\n        );\n        return\n            string(\n                abi.encodePacked(\n                    \"data:application/json;base64,\",\n                    Base64.encode(dataURI)\n                )\n            );\n    }\n\n    // This is awkward because I don't want to deal with negative numbers.\n    // if the timezone offset is negative, we're gonna pretend like it's a day in the future\n    // this doesn't matter because the timezone offset is only used to determine the time of day\n    // and not the actual day.\n    function mint(uint16 timezoneOffset) public payable {\n        if (msg.value < mintCost) revert Cost();\n\n        _tokenIds.increment();\n        if (_tokenIds.current() >= maxSupply) revert MaxSupplyReached();\n        uint256 newItemId = _tokenIds.current();\n        timeZoneOffset[newItemId] = timezoneOffset;\n        _safeMint(msg.sender, newItemId);\n        lastGust[newItemId] = systemTimeOffsetWithUser(newItemId);\n    }\n\n    function generateCharacter(\n        uint256 tokenId\n    ) public view returns (string memory) {\n        uint8 daysSince = uint8(daysSinceLastGust(tokenId));\n        uint16 gazeSub = gazeSubGusts(tokenId);\n\n        bytes memory svg = abi.encodePacked(\n            generateSVG(tokenId, gazeSub, daysSince, !isNight(tokenId))\n        );\n\n        return\n            string(\n                abi.encodePacked(\n                    \"data:image/svg+xml;base64,\",\n                    Base64.encode(svg)\n                )\n            );\n    }\n\n    function generateSVG(\n        uint256 tokenId,\n        uint256 gazed,\n        uint8 cloudsAt,\n        bool sunUp\n    ) public view returns (string memory) {\n        return\n            SVGGen2.generateSVG(\n                Color.genDNA(tokenId),\n                gazed,\n                sunUp,\n                cloudsAt,\n                _decorator\n            );\n    }\n\n    function starGaze(uint256 tokenId) public {\n        if (ownerOf(tokenId) != msg.sender) revert NotTheOwner();\n        if (!isNight(tokenId)) revert NotNight();\n        if (systemTimeOffsetWithUser(tokenId) - lastGaze[tokenId] < 14 hours)\n            revert NotEnoughTimePassed();\n        if (daysSinceLastGust(tokenId) > 6) revert TooCloudy();\n        gazes[tokenId] = gazes[tokenId] + 1;\n        lastGaze[tokenId] = systemTimeOffsetWithUser(tokenId);\n    }\n\n    function gust(uint256 tokenId) public {\n        if (ownerOf(tokenId) != msg.sender) revert NotTheOwner();\n        gazes[tokenId] = gazeSubGusts(tokenId);\n        lastGust[tokenId] = systemTimeOffsetWithUser(tokenId);\n    }\n\n    function gazeSubGusts(uint256 tokenId) public view returns (uint16) {\n        uint8 daysSince = uint8(daysSinceLastGust(tokenId));\n        uint16 gazeSub = SVGGen2.subZero(\n            gazes[tokenId],\n            (SVGGen2.subZero(daysSince, 6))\n        );\n        return gazeSub;\n    }\n\n    function daysSinceLastGust(uint256 tokenId) public view returns (uint256) {\n        return (systemTimeOffsetWithUser(tokenId) - lastGust[tokenId]) / 1 days;\n    }\n\n    function setMaxSupply(uint256 _maxSupply) public onlyOwner {\n        maxSupply = _maxSupply;\n    }\n\n    function setMintCost(uint256 _newMintCost) public onlyOwner {\n        mintCost = _newMintCost;\n    }\n\n    function currentSupply() public view returns (uint256) {\n        return _tokenIds.current();\n    }\n\n    function setDecorator(address decorator) public onlyOwner {\n        _decorator = decorator;\n    }\n\n    function systemTimeOffsetWithUser(\n        uint256 tokenId\n    ) public view returns (uint256) {\n        return systemTime() + (timeZoneOffset[tokenId]);\n    }\n\n    function systemTime() public view virtual returns (uint256) {\n        return block.timestamp;\n    }\n\n    function isNight(uint256 tokenId) public view returns (bool) {\n        uint8 hour = (uint8)(\n            (systemTimeOffsetWithUser(tokenId) / 60 / 60) % 24\n        );\n        return hour < 6 || hour > 18;\n    }\n\n    function withdraw() external onlyOwner {\n        payable(address(_msgSender())).transfer(address(this).balance);\n    }\n\n    function withdrawToken(\n        address _tokenContract,\n        uint256 _amount\n    ) external onlyOwner {\n        IERC20(_tokenContract).transfer(msg.sender, _amount);\n    }\n\n    error NotTheOwner();\n    error NotEnoughTimePassed();\n    error MaxSupplyReached();\n    error NotNight();\n    error Cost();\n    error TooCloudy();\n    error NotMinted();\n\n    //------------------------------------------------------ Solidity Overrides\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 batchSize\n    ) internal override(ERC721, ERC721Enumerable) {\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\n    }\n\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view override(ERC721, ERC721Enumerable) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n}\n\ninterface IERC20 {\n    function transfer(address _to, uint256 _amount) external returns (bool);\n}\n"
    },
    "contracts/Color.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nlibrary Color {\n    using Strings for uint256;\n\n    struct DNA {\n        uint256 tokenId;\n        uint16 baseColor;\n        uint256 starSeed;\n        uint256 funkSeed;\n        uint256 circleSeed;\n        uint256 groundSeed;\n        uint256 constellationSeed;\n    }\n\n    struct HSL {\n        uint16 H;\n        uint16 S;\n        uint16 L;\n    }\n\n    struct Point {\n        uint16 x;\n        uint16 y;\n    }\n\n    struct Circle {\n        uint16 x;\n        uint16 y;\n        uint16 r;\n        uint8 count;\n        uint16 stroke;\n        bool active;\n    }\n\n    function HSLtoString(HSL memory color) public pure returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    \"hsl(\",\n                    ((uint256)(color.H)).toString(),\n                    \",\",\n                    ((uint256)(color.S)).toString(),\n                    \"%,\",\n                    ((uint256)(color.L)).toString(),\n                    \"%)\"\n                )\n            );\n    }\n\n    function toString(uint16 num) public pure returns (string memory) {\n        return ((uint256)(num)).toString();\n    }\n\n    function psuedorandom(\n        uint256 tokenId,\n        uint256 nonce\n    ) public pure returns (uint256) {\n        return uint(keccak256(abi.encodePacked(tokenId, nonce)));\n    }\n\n    function wiggle(\n        uint256 tokenId,\n        uint256 nonce,\n        uint16 base,\n        uint16 offset\n    ) public pure returns (uint16) {\n        uint16 wiggleAmount = (uint16)(psuedorandom(tokenId, nonce) % offset);\n        if ((uint8)(psuedorandom(tokenId, nonce) % 2) == 0) {\n            return base + wiggleAmount;\n        } else {\n            return subZero(base, wiggleAmount);\n        }\n    }\n\n    function wiggleString(\n        uint256 tokenId,\n        uint256 nonce,\n        uint16 base,\n        uint16 offset\n    ) public pure returns (string memory) {\n        return toString(wiggle(tokenId, nonce, base, offset));\n    }\n\n    function wiggleUp(\n        uint256 tokenId,\n        uint256 nonce,\n        uint16 base,\n        uint16 offset\n    ) public pure returns (uint16) {\n        uint16 wiggleAmount = (uint16)(psuedorandom(tokenId, nonce) % offset);\n        return base + wiggleAmount;\n    }\n\n    function subZero(uint16 first, uint16 second) public pure returns (uint16) {\n        if (first > second) {\n            return first - second;\n        } else {\n            return 0;\n        }\n    }\n\n    function flipColor(\n        Color.HSL memory color\n    ) public pure returns (Color.HSL memory) {\n        uint16 newH = color.H + 180 > 360 ? color.H - 180 : color.H + 180;\n        return Color.HSL(newH, color.S, color.L);\n    }\n\n    function rotateColor(\n        Color.HSL memory color,\n        uint16 amount\n    ) public pure returns (Color.HSL memory) {\n        uint16 newH = color.H + amount > 360\n            ? subZero(color.H, amount)\n            : color.H + amount;\n        return Color.HSL(newH, color.S, color.L);\n    }\n\n    function genDNA(uint256 tokenId) public pure returns (DNA memory) {\n        DNA memory dna;\n        dna.tokenId = tokenId;\n        dna.baseColor = uint16((tokenId % 16) * 10);\n        dna.starSeed = psuedorandom(tokenId, 123);\n        dna.funkSeed = psuedorandom(tokenId, 234);\n        dna.circleSeed = psuedorandom(tokenId, 345);\n        dna.groundSeed = psuedorandom(tokenId, 456);\n        dna.constellationSeed = tokenId;\n\n        return dna;\n    }\n}\n"
    },
    "contracts/Constellations.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nlibrary Constellations {\n    using Strings for uint256;\n\n    function getConstellation(\n        uint256 constellationSeed,\n        bool fullReveal,\n        uint8 gazed\n    ) public view returns (string memory, uint8 remaining) {\n        uint8 seed = (uint8)(constellationSeed % 13);\n        if (seed == 0) {\n            return Aries(gazed, fullReveal);\n        } else if (seed == 1) {\n            return Sagittarius(gazed, fullReveal);\n        } else if (seed == 2) {\n            return Capricorn(gazed, fullReveal);\n        } else if (seed == 3) {\n            return Aquarius(gazed, fullReveal);\n        } else if (seed == 4) {\n            return Pisces(gazed, fullReveal);\n        } else if (seed == 5) {\n            return Scorpio(gazed, fullReveal);\n        } else if (seed == 6) {\n            return Libra(gazed, fullReveal);\n        } else if (seed == 7) {\n            return Virgo(gazed, fullReveal);\n        } else if (seed == 8) {\n            return Leo(gazed, fullReveal);\n        } else if (seed == 9) {\n            return Cancer(gazed, fullReveal);\n        } else if (seed == 10) {\n            return Gemini(gazed, fullReveal);\n        } else if (seed == 11) {\n            return Taurus(gazed, fullReveal);\n        } else if (seed == 12) {\n            return Pegasus(gazed, fullReveal);\n        } else if (seed == 13) {\n            return UrsaMinor(gazed, fullReveal);\n        } else {\n            return Cygnus(gazed, fullReveal);\n        }\n    }\n\n    function buildStar(\n        string[] memory stars,\n        string memory open,\n        string memory close,\n        uint8 show,\n        bool fullReveal\n    ) public pure returns (string memory, uint8 remaining) {\n        if (fullReveal || show > stars.length) {\n            show = (uint8)(stars.length);\n        }\n        uint8 left = show;\n        string memory constellation = \"\";\n        constellation = string.concat(constellation, open);\n        for (uint8 i = 0; i < show; i++) {\n            constellation = string.concat(constellation, stars[i]);\n            left--;\n        }\n        if (show == stars.length) {\n            constellation = string.concat(constellation, close);\n        } else {\n            constellation = string.concat(constellation, \"</g>\");\n        }\n        // return (constellation, ((uint8)(stars.length) - show));\n        return (constellation, left);\n    }\n\n    function Aries(\n        uint8 show,\n        bool fullReveal\n    ) public view returns (string memory, uint8 remaining) {\n        string[] memory stars = new string[](6);\n\n        string\n            memory open = '<g transform=\"translate(316,133), rotate(0)\" fill=\"#fff\" opacity=\"0.8\">';\n\n        stars[0] = '<circle cx=\"-30\" cy=\"60\" r=\"2\"/>';\n        stars[1] = '<circle cx=\"-10\" cy=\"45\" r=\"2\"/>';\n        stars[2] = '<circle cx=\"5\" cy=\"0\" r=\"2\"/>';\n        stars[3] = '<circle cx=\"55\" cy=\"10\" r=\"2\"/>';\n        stars[4] = '<circle cx=\"80\" cy=\"30\" r=\"2\"/>';\n        stars[5] = '<circle cx=\"85\" cy=\"45\" r=\"2\"/>';\n\n        string\n            memory close = '<path d=\"m -30 60 L -10 45 L 5 0 L 55 10 L 80 30 L 85 45\" fill=\"none\" stroke=\"white\" opacity=\".5\"/></g>';\n        return buildStar(stars, open, close, show, fullReveal);\n    }\n\n    function Sagittarius(\n        uint8 show,\n        bool fullReveal\n    ) public view returns (string memory, uint8 remaining) {\n        string\n            memory open = '<g transform=\"translate(234,-290), rotate(0)\" fill=\"#fff\" opacity=\"0.8\">';\n        string[] memory stars = new string[](20);\n\n        stars[0] = '<circle r=\"2\" cx=\"169\" cy=\"447\"/>';\n        stars[1] = '<circle r=\"2\" cx=\"148\" cy=\"462\"/>';\n        stars[2] = '<circle r=\"2\" cx=\"139\" cy=\"482\"/>';\n        stars[3] = '<circle r=\"2\" cx=\"136\" cy=\"419\"/>';\n        stars[4] = '<circle r=\"2\" cx=\"134\" cy=\"457\"/>';\n        stars[5] = '<circle r=\"2\" cx=\"132\" cy=\"475\"/>';\n        stars[6] = '<circle r=\"2\" cx=\"128\" cy=\"441\"/>';\n        stars[7] = '<circle r=\"2\" cx=\"110\" cy=\"449\"/>';\n        stars[8] = '<circle r=\"2\" cx=\"100\" cy=\"446\"/>';\n        stars[9] = '<circle r=\"2\" cx=\"97\" cy=\"460\"/>';\n        stars[10] = '<circle r=\"2\" cx=\"97\" cy=\"421\"/>';\n        stars[11] = '<circle r=\"2\" cx=\"91\" cy=\"519\"/>';\n        stars[12] = '<circle r=\"2\" cx=\"91\" cy=\"453\"/>';\n        stars[13] = '<circle r=\"2\" cx=\"90\" cy=\"426\"/>';\n        stars[14] = '<circle r=\"2\" cx=\"88\" cy=\"507\"/>';\n        stars[15] = '<circle r=\"2\" cx=\"81\" cy=\"424\"/>';\n        stars[16] = '<circle r=\"2\" cx=\"71\" cy=\"515\"/>';\n        stars[17] = '<circle r=\"2\" cx=\"66\" cy=\"415\"/>';\n        stars[18] = '<circle r=\"2\" cx=\"62\" cy=\"446\"/>';\n        stars[19] = '<circle r=\"2\" cx=\"42\" cy=\"468\"/>';\n\n        string\n            memory close = '<path d=\"m169, 447 L 148, 462 L 134,457 L 132, 475 L 139, 482 M 134,457 L 128,441 L 136,419 M 128, 441 L 110, 449 L 100,446 L 90,426 L 97,421 M 90,426 L 81,424 L 66,415 M 110, 449 L 97, 460 L 91, 453 L 100,446 M 91,453 L 62, 446 L 42, 468 L 71, 515 L 88,507 M 71,515 L 91,519\" stroke=\"#fff\" opacity=\".5\" fill=\"none\"/></g>';\n\n        return buildStar(stars, open, close, show, fullReveal);\n    }\n\n    function Capricorn(\n        uint8 show,\n        bool fullReveal\n    ) public view returns (string memory, uint8 remaining) {\n        string[] memory stars = new string[](11);\n\n        string\n            memory open = '<g transform=\"translate(114,-300), rotate(0)\" fill=\"#fff\" opacity=\"0.8\">';\n        stars[0] = '<circle r=\"2\" cx=\"254\" cy=\"492\"/>';\n        stars[1] = '<circle r=\"2\" cx=\"253\" cy=\"483\"/>';\n        stars[2] = '<circle r=\"2\" cx=\"241\" cy=\"498\"/>';\n        stars[3] = '<circle r=\"2\" cx=\"232\" cy=\"424\"/>';\n        stars[4] = '<circle r=\"2\" cx=\"231\" cy=\"414\"/>';\n        stars[5] = '<circle r=\"2\" cx=\"221\" cy=\"510\"/>';\n        stars[6] = '<circle r=\"2\" cx=\"212\" cy=\"481\"/>';\n        stars[7] = '<circle r=\"2\" cx=\"202\" cy=\"514\"/>';\n        stars[8] = '<circle r=\"2\" cx=\"201\" cy=\"495\"/>';\n        stars[9] = '<circle r=\"2\" cx=\"191\" cy=\"511\"/>';\n        stars[10] = '<circle r=\"2\" cx=\"189\" cy=\"519\"/>';\n        string\n            memory close = '<path d=\"M 254, 492 L 241, 498 L 221, 510 L 202,514 L 189, 519 L 191, 511 L 201,495 L 212, 481 L 232, 424 L 231 414 M 232, 424 L 253, 483\" stroke=\"#fff\" opacity=\".5\" fill=\"none\"/></g>';\n        return buildStar(stars, open, close, show, fullReveal);\n    }\n\n    function Aquarius(\n        uint8 show,\n        bool fullReveal\n    ) public view returns (string memory, uint8 remaining) {\n        string[] memory stars = new string[](13);\n        string\n            memory open = '<g transform=\"translate(-6,-300), rotate(0)\" fill=\"#fff\" opacity=\"0.8\">';\n        stars[0] = '<circle r=\"2\" cx=\"378\" cy=\"406 \"/>';\n        stars[1] = '<circle r=\"2\" cx=\"372\" cy=\"530 \"/>';\n        stars[2] = '<circle r=\"2\" cx=\"354\" cy=\"517 \"/>';\n        stars[3] = '<circle r=\"2\" cx=\"347\" cy=\"512 \"/>';\n        stars[4] = '<circle r=\"2\" cx=\"339\" cy=\"435 \"/>';\n        stars[5] = '<circle r=\"2\" cx=\"335\" cy=\"476 \"/>';\n        stars[6] = '<circle r=\"2\" cx=\"325\" cy=\"515 \"/>';\n        stars[7] = '<circle r=\"2\" cx=\"319\" cy=\"534 \"/>';\n        stars[8] = '<circle r=\"2\" cx=\"302\" cy=\"459 \"/>';\n        stars[9] = '<circle r=\"2\" cx=\"302\" cy=\"480 \"/>';\n        stars[10] = '<circle r=\"2\" cx=\"292\" cy=\"484 \"/>';\n        stars[11] = '<circle r=\"2\" cx=\"289\" cy=\"492 \"/>';\n        stars[12] = '<circle r=\"2\" cx=\"365\" cy=\"472 \"/>';\n        string\n            memory close = '<path d=\"M378, 406 L 339, 435 L 302, 459 L 302, 480 L 292 484 L 289, 492 L 319 534 L 325,515 L 347,512 L 354,517 L 372,530 M 302,459 L 335,476 L 365 472\" fill=\"none\" stroke=\"#fff\" opacity=\".5\"/></g>';\n        return buildStar(stars, open, close, show, fullReveal);\n    }\n\n    function Pisces(\n        uint8 show,\n        bool fullReveal\n    ) public view returns (string memory, uint8 remaining) {\n        string[] memory stars = new string[](17);\n\n        string\n            memory open = '<g transform=\"translate(14,-170), rotate(0) scale(0.7)\" fill=\"#fff\" opacity=\"0.8\">';\n        stars[0] = '<circle r=\"2.86\" cx=\"523\" cy=\"547 \"/>';\n        stars[1] = '<circle r=\"2.86\" cx=\"502\" cy=\"526 \"/>';\n        stars[2] = '<circle r=\"2.86\" cx=\"495\" cy=\"541 \"/>';\n        stars[3] = '<circle r=\"2.86\" cx=\"482\" cy=\"502 \"/>';\n        stars[4] = '<circle r=\"2.86\" cx=\"475\" cy=\"484 \"/>';\n        stars[5] = '<circle r=\"2.86\" cx=\"474\" cy=\"417 \"/>';\n        stars[6] = '<circle r=\"2.86\" cx=\"471\" cy=\"400 \"/>';\n        stars[7] = '<circle r=\"2.86\" cx=\"468\" cy=\"427 \"/>';\n        stars[8] = '<circle r=\"2.86\" cx=\"465\" cy=\"539 \"/>';\n        stars[9] = '<circle r=\"2.86\" cx=\"459\" cy=\"445 \"/>';\n        stars[10] = '<circle r=\"2.86\" cx=\"457\" cy=\"395 \"/>';\n        stars[11] = '<circle r=\"2.86\" cx=\"454\" cy=\"425 \"/>';\n        stars[12] = '<circle r=\"2.86\" cx=\"448\" cy=\"401 \"/>';\n        stars[13] = '<circle r=\"2.86\" cx=\"445\" cy=\"413 \"/>';\n        stars[14] = '<circle r=\"2.86\" cx=\"425\" cy=\"541 \"/>';\n        stars[15] = '<circle r=\"2.86\" cx=\"415\" cy=\"553 \"/>';\n        stars[16] = '<circle r=\"2.86\" cx=\"400\" cy=\"544 \"/>';\n        string\n            memory close = '<path d=\"m400, 544 L 415, 553 L 425,541 L465, 539 L 495, 541 L 523, 547 L 502, 526 L 482, 502 L 475, 484 L 459, 445 L 454, 425 L 445, 413 L 448, 401 L 457, 395 L 471, 400 L 474, 417 L 468, 427 L 454 425 \" stroke=\"#fff\" opacity=\".5\" fill=\"none\" stroke-width=\"1.43\"/></g>';\n        return buildStar(stars, open, close, show, fullReveal);\n    }\n\n    function Scorpio(\n        uint8 show,\n        bool fullReveal\n    ) public view returns (string memory, uint8 remaining) {\n        string[] memory stars = new string[](15);\n\n        string\n            memory open = '<g transform=\"translate(-121,-120), rotate(0)\" fill=\"#fff\" opacity=\"0.8\">';\n        stars[0] = '<circle r=\"2\" cx=\"513\" cy=\"256 \"/>';\n        stars[1] = '<circle r=\"2\" cx=\"513\" cy=\"268 \"/>';\n        stars[2] = '<circle r=\"2\" cx=\"510\" cy=\"248 \"/>';\n        stars[3] = '<circle r=\"2\" cx=\"489\" cy=\"264 \"/>';\n        stars[4] = '<circle r=\"2\" cx=\"481\" cy=\"268 \"/>';\n        stars[5] = '<circle r=\"2\" cx=\"475\" cy=\"274 \"/>';\n        stars[6] = '<circle r=\"2\" cx=\"458\" cy=\"296 \"/>';\n        stars[7] = '<circle r=\"2\" cx=\"456\" cy=\"314 \"/>';\n        stars[8] = '<circle r=\"2\" cx=\"452\" cy=\"328 \"/>';\n        stars[9] = '<circle r=\"2\" cx=\"435\" cy=\"333 \"/>';\n        stars[10] = '<circle r=\"2\" cx=\"419\" cy=\"304 \"/>';\n        stars[11] = '<circle r=\"2\" cx=\"415\" cy=\"332 \"/>';\n        stars[12] = '<circle r=\"2\" cx=\"410\" cy=\"313 \"/>';\n        stars[13] = '<circle r=\"2\" cx=\"405\" cy=\"320 \"/>';\n        stars[14] = '<circle r=\"2\" cx=\"513\" cy=\"281 \"/>';\n        string\n            memory close = '<path d=\"m419, 304 L 410, 313 L 405, 320 L 415, 332 L 435, 333 L  452, 328 L 456, 314 L 458, 296 L 475, 274 L 481, 268 L 489, 264 L 513, 256 L 510, 248 M 513, 256 L 513, 268 L 513 281\" stroke=\"#fff\" opacity=\".5\" fill=\"none\"/></g>';\n        return buildStar(stars, open, close, show, fullReveal);\n    }\n\n    function Libra(\n        uint8 show,\n        bool fullReveal\n    ) public view returns (string memory, uint8 remaining) {\n        string[] memory stars = new string[](8);\n        string\n            memory open = '<g transform=\"translate(4,-120), rotate(0)\" fill=\"#fff\" opacity=\"0.8\">';\n        stars[0] = '<circle r=\"2\" cx=\"361\" cy=\"272 \"/>';\n        stars[1] = '<circle r=\"2\" cx=\"356\" cy=\"307 \"/>';\n        stars[2] = '<circle r=\"2\" cx=\"335\" cy=\"329 \"/>';\n        stars[3] = '<circle r=\"2\" cx=\"335\" cy=\"321 \"/>';\n        stars[4] = '<circle r=\"2\" cx=\"333\" cy=\"252 \"/>';\n        stars[5] = '<circle r=\"2\" cx=\"324\" cy=\"276 \"/>';\n        stars[6] = '<circle r=\"2\" cx=\"318\" cy=\"281 \"/>';\n        stars[7] = '<circle r=\"2\" cx=\"309\" cy=\"287 \"/>';\n        string\n            memory close = '<path d=\"M 309, 287 L 318, 281 L 324, 276 L 333, 252 L 361, 272, 356, 307 L  335, 321 L 335, 329 M 356, 307 L 333, 252 \" stroke=\"#fff\" opacity=\".5\" fill=\"none\"/></g>';\n        return buildStar(stars, open, close, show, fullReveal);\n    }\n\n    function Virgo(\n        uint8 show,\n        bool fullReveal\n    ) public view returns (string memory, uint8 remaining) {\n        string[] memory stars = new string[](12);\n        string\n            memory open = '<g transform=\"translate(114,-114), rotate(0)\" fill=\"#fff\" opacity=\"0.8\">';\n        stars[0] = '<circle r=\"2\" cx=\"261\" cy=\"296 \"/>';\n        stars[1] = '<circle r=\"2\" cx=\"251\" cy=\"225 \"/>';\n        stars[2] = '<circle r=\"2\" cx=\"248\" cy=\"276 \"/>';\n        stars[3] = '<circle r=\"2\" cx=\"246\" cy=\"244 \"/>';\n        stars[4] = '<circle r=\"2\" cx=\"241\" cy=\"327 \"/>';\n        stars[5] = '<circle r=\"2\" cx=\"231\" cy=\"324 \"/>';\n        stars[6] = '<circle r=\"2\" cx=\"225\" cy=\"249 \"/>';\n        stars[7] = '<circle r=\"2\" cx=\"223\" cy=\"285 \"/>';\n        stars[8] = '<circle r=\"2\" cx=\"221\" cy=\"342 \"/>';\n        stars[9] = '<circle r=\"2\" cx=\"207\" cy=\"299 \"/>';\n        stars[10] = '<circle r=\"2\" cx=\"198\" cy=\"242 \"/>';\n        stars[11] = '<circle r=\"2\" cx=\"188\" cy=\"330 \"/>';\n        string\n            memory close = '<path d=\"m221, 342 L 231, 324 L 241, 327 L 261, 296 L 248, 276 L  246, 244 L 251, 225 M 246, 244 L 225, 249 L 198, 242 M 225, 249 L 223, 285 L 261, 296 M 223, 285 L 207 299 L 188 330\" stroke=\"#fff\" opacity=\".5\" fill=\"none\"/></g>';\n        return buildStar(stars, open, close, show, fullReveal);\n    }\n\n    function Leo(\n        uint8 show,\n        bool fullReveal\n    ) public view returns (string memory, uint8 remaining) {\n        string[] memory stars = new string[](9);\n\n        string\n            memory open = '<g transform=\"translate(254,-114), rotate(0)\" fill=\"#fff\" opacity=\"0.8\">';\n        stars[0] = '<circle r=\"2\" cx=\"136\" cy=\"276 \"/>';\n        stars[1] = '<circle r=\"2\" cx=\"120\" cy=\"264 \"/>';\n        stars[2] = '<circle r=\"2\" cx=\"108\" cy=\"224 \"/>';\n        stars[3] = '<circle r=\"2\" cx=\"102\" cy=\"265 \"/>';\n        stars[4] = '<circle r=\"2\" cx=\"94\" cy=\"226 \"/>';\n        stars[5] = '<circle r=\"2\" cx=\"92\" cy=\"253 \"/>';\n        stars[6] = '<circle r=\"2\" cx=\"80\" cy=\"324 \"/>';\n        stars[7] = '<circle r=\"2\" cx=\"64\" cy=\"307 \"/>';\n        stars[8] = '<circle r=\"2\" cx=\"61\" cy=\"344 \"/>';\n        string\n            memory close = '<path d=\"m108,224 L 94, 226 L 92, 253 L 102, 265 L 120 264 L  136 276 L 80 324 L 61 344L 64 307 L 102 265 M 80 324 L 120 264\" stroke=\"#fff\" opacity=\".5\" fill=\"none\"/></g>';\n        return buildStar(stars, open, close, show, fullReveal);\n    }\n\n    function Cancer(\n        uint8 show,\n        bool fullReveal\n    ) public view returns (string memory, uint8 remaining) {\n        string[] memory stars = new string[](5);\n\n        string\n            memory open = '<g transform=\"translate(-106,50), rotate(0)\" fill=\"#fff\" opacity=\"0.8\">';\n        stars[0] = '<circle r=\"2\" cx=\"491\" cy=\"143 \"/>';\n        stars[1] = '<circle r=\"2\" cx=\"443\" cy=\"123 \"/>';\n        stars[2] = '<circle r=\"2\" cx=\"440\" cy=\"157 \"/>';\n        stars[3] = '<circle r=\"2\" cx=\"437\" cy=\"112 \"/>';\n        stars[4] = '<circle r=\"2\" cx=\"418\" cy=\"88 \"/>';\n        string\n            memory close = '<path d=\"m491 143 L 443, 123 L 437 112 L 418 88 M 442 123 L 440 157   \" stroke=\"#fff\" opacity=\".5\" fill=\"none\"/></g>';\n        return buildStar(stars, open, close, show, fullReveal);\n    }\n\n    function Gemini(\n        uint8 show,\n        bool fullReveal\n    ) public view returns (string memory, uint8 remaining) {\n        string[] memory stars = new string[](13);\n\n        string\n            memory open = '<g transform=\"translate(4,50), rotate(0)\" fill=\"#fff\" opacity=\"0.8\">';\n        stars[0] = '<circle r=\"2\" cx=\"386\" cy=\"116 \"/>';\n        stars[1] = '<circle r=\"2\" cx=\"377\" cy=\"115 \"/>';\n        stars[2] = '<circle r=\"2\" cx=\"374\" cy=\"128 \"/>';\n        stars[3] = '<circle r=\"2\" cx=\"365\" cy=\"144 \"/>';\n        stars[4] = '<circle r=\"2\" cx=\"359\" cy=\"109 \"/>';\n        stars[5] = '<circle r=\"2\" cx=\"359\" cy=\"162 \"/>';\n        stars[6] = '<circle r=\"2\" cx=\"334\" cy=\"132 \"/>';\n        stars[7] = '<circle r=\"2\" cx=\"324\" cy=\"89 \"/>';\n        stars[8] = '<circle r=\"2\" cx=\"319\" cy=\"125 \"/>';\n        stars[9] = '<circle r=\"2\" cx=\"315\" cy=\"87 \"/>';\n        stars[10] = '<circle r=\"2\" cx=\"306\" cy=\"86 \"/>';\n        stars[11] = '<circle r=\"2\" cx=\"297\" cy=\"116 \"/>';\n        stars[12] = '<circle r=\"2\" cx=\"295\" cy=\"106 \"/>';\n        string\n            memory close = '<path d=\"m386 , 116 L 377, 115 L 374, 128 L 365, 144 L 334, 132 L  319, 125 L 297 116 L 295 106 L 306 86 L 315 87 L 324 89 L 359 109 L 377 115 M 365 144 L 359 162\" stroke=\"#fff\" opacity=\".5\" fill=\"none\"/></g>';\n        return buildStar(stars, open, close, show, fullReveal);\n    }\n\n    function Taurus(\n        uint8 show,\n        bool fullReveal\n    ) public view returns (string memory, uint8 remaining) {\n        string[] memory stars = new string[](12);\n\n        string\n            memory open = '<g transform=\"translate(194,80), rotate(0) scale(0.7)\" fill=\"#fff\" opacity=\"0.8\">';\n        stars[0] = '<circle r=\"2.86\" cx=\"262\" cy=\"184 \"/>';\n        stars[1] = '<circle r=\"2.86\" cx=\"259\" cy=\"175 \"/>';\n        stars[2] = '<circle r=\"2.86\" cx=\"228\" cy=\"154 \"/>';\n        stars[3] = '<circle r=\"2.86\" cx=\"214\" cy=\"139 \"/>';\n        stars[4] = '<circle r=\"2.86\" cx=\"214\" cy=\"129 \"/>';\n        stars[5] = '<circle r=\"2.86\" cx=\"210\" cy=\"127 \"/>';\n        stars[6] = '<circle r=\"2.86\" cx=\"210\" cy=\"121 \"/>';\n        stars[7] = '<circle r=\"2.86\" cx=\"207\" cy=\"135 \"/>';\n        stars[8] = '<circle r=\"2.86\" cx=\"203\" cy=\"100 \"/>';\n        stars[9] = '<circle r=\"2.86\" cx=\"201\" cy=\"131 \"/>';\n        stars[10] = '<circle r=\"2.86\" cx=\"184\" cy=\"67 \"/>';\n        stars[11] = '<circle r=\"2.86\" cx=\"164\" cy=\"93 \"/>';\n        string\n            memory close = '<path d=\"m262 184 L 259 175 L 228 154 L 214 139 L 214 129 L 210 127 L 210 121 L 203 100 L 184 67 M 214 139 L 207 135 L 201 131 L 164 93\" stroke=\"#fff\" opacity=\".5\" fill=\"none\" stroke-width=\"1.43\"/></g>';\n        return buildStar(stars, open, close, show, fullReveal);\n    }\n\n    function Pegasus(\n        uint8 show,\n        bool fullReveal\n    ) public view returns (string memory, uint8 remaining) {\n        string[] memory stars = new string[](12);\n\n        string\n            memory open = '<g transform=\"translate(322 150)\" fill=\"#fff\" opacity=\"0.8\">';\n\n        stars[0] = '<circle cx=\"-13\" r=\"2\"/>';\n        stars[1] = '<circle cx=\"22\" cy=\"6\" r=\"2\"/>';\n        stars[2] = '<circle cx=\"34\" cy=\"1\" r=\"2\"/>';\n        stars[3] = '<circle cx=\"51\" cy=\"-7\" r=\"2\"/>';\n        stars[4] = '<circle cx=\"-21\" cy=\"35\" r=\"2\"/>';\n        stars[5] = '<circle cx=\"20\" cy=\"38\" r=\"2\"/>';\n        stars[6] = '<circle cx=\"35\" cy=\"50\" r=\"2\"/>';\n        stars[7] = '<circle cx=\"54\" cy=\"60\" r=\"2\"/>';\n        stars[8] = '<circle cx=\"70\" cy=\"50\" r=\"2\"/>';\n        stars[9] = '<circle cx=\"31\" cy=\"18\" r=\"2\"/>';\n        stars[10] = '<circle cx=\"54\" cy=\"13\" r=\"2\"/>';\n        stars[11] = '<circle cx=\"66\" cy=\"12\" r=\"2\"/>';\n        string\n            memory close = '<path d=\"M70 50 54 60 35 50 20 38l-41-3 8-35 35 6-2 32m46-26-12 1-23 5-9-12 12-5 17-8\" fill=\"none\" stroke=\"#fff\" opacity=\".5\"/></g>';\n\n        return buildStar(stars, open, close, show, fullReveal);\n    }\n\n    function UrsaMinor(\n        uint8 show,\n        bool fullReveal\n    ) public view returns (string memory, uint8 remaining) {\n        string[] memory stars = new string[](7);\n\n        string\n            memory open = '<g transform=\"translate(320,130), rotate(-30)\" fill=\"#fff\" opacity=\"0.8\">';\n        stars[0] = '<circle cx=\"0\" cy=\"00\" r=\"2\" />';\n        stars[1] = '<circle cx=\"-6\" cy=\"20\" r=\"2\" />';\n        stars[2] = '<circle cx=\"-9\" cy=\"40\" r=\"2\" />';\n        stars[3] = '<circle cx=\"-3\" cy=\"60\" r=\"2\" />';\n        stars[4] = '<circle cx=\"-18\" cy=\"70\" r=\"2\"/>';\n        stars[5] = '<circle cx=\"-12\" cy=\"92\" r=\"2\"/>';\n        stars[6] = '<circle cx=\"8\" cy=\"91\" r=\"2\" />';\n        string\n            memory close = '<path d=\"m 0 00 L -6 20 L -9 40 L -3 60 L -18 70 L -12 92 L 8 91 L -3 60\" fill=\"none\" stroke=\"white\" opacity=\".5\"/></g>';\n        return buildStar(stars, open, close, show, fullReveal);\n    }\n\n    function Cygnus(\n        uint8 show,\n        bool fullReveal\n    ) public view returns (string memory, uint8 remaining) {\n        string[] memory stars = new string[](6);\n        string\n            memory open = '<g transform=\"translate(134, -70) scale(3)\" fill=\"#fff\" opacity=\"0.8\">';\n        stars[0] = '<circle r=\"0.66\" cx=\"87.000\" cy=\"76.000\"/>';\n        stars[1] = '<circle r=\"0.66\" cx=\"72.000\" cy=\"76.000\"/>';\n        stars[2] = '<circle r=\"0.66\" cx=\"62.000\" cy=\"93.000\"/>';\n        stars[3] = '<circle r=\"0.66\" cx=\"61.000\" cy=\"64.000\"/>';\n        stars[4] = '<circle r=\"0.66\" cx=\"59.000\" cy=\"80.000\"/>';\n        stars[5] = '<circle r=\"0.66\" cx=\"49.000\" cy=\"79.000\"/>';\n        string\n            memory close = '<path d=\"m87 76 L 72 76 L 59 80 L 49 79 M 62 93 L 59 80 L 61 64\" stroke-width=\"0.333\" fill=\"none\" stroke=\"#fff\" opacity=\".5\"/></g>';\n        return buildStar(stars, open, close, show, fullReveal);\n    }\n}\n"
    },
    "contracts/decos/IDeco.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\nimport \"../Color.sol\";\n\ninterface IDeco {\n    function getDeco(\n        uint256 tokenId,\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime\n    ) external view returns (string memory);\n\n    function ownerOf(uint256 tokenId) external view returns (address);\n\n    function getApproved(uint256 tokenId) external view returns (address);\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    function burn(uint256 tokenId) external;\n}\n"
    },
    "contracts/IDecorations.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./decos/IDeco.sol\";\n\ninterface IDecorations {\n    function getSilhouette(\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime\n    ) external view returns (string memory);\n\n    function getSkyMath(\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime\n    ) external view returns (string memory);\n\n    function getDecorationOne(\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime\n    ) external view returns (string memory);\n}\n"
    },
    "contracts/mocks/Mockellation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"../Chainellation.sol\";\n\ncontract Mockellation is Chainellation {\n    uint256 public time;\n\n    constructor() {\n        time = block.timestamp;\n    }\n\n    function systemTime() public view override returns (uint256) {\n        return time;\n    }\n\n    function setSystemTime(uint256 _time) public {\n        time = _time;\n    }\n}\n"
    },
    "contracts/SVGGen2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"./Color.sol\";\nimport \"./Constellations.sol\";\nimport \"./IDecorations.sol\";\n\nlibrary SVGGen2 {\n    function generateSVG(\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime,\n        uint8 cloudDays,\n        address decorator\n    ) public view returns (string memory) {\n        Color.HSL memory primary = Color.HSL(dna.baseColor, 100, 30);\n\n        string memory svg = string.concat(\n            '<svg viewBox=\"0 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\"><clipPath id=\"box\"><path d=\"M0 0h512v512H0z\"/></clipPath><defs>',\n            getGradients(dna.starSeed, primary, cloudDays),\n            getFilters(dna.funkSeed),\n            '</defs><svg viewBox=\"0 0 512 512\" clip-path=\"url(#box)\">',\n            getBackgrounds(daytime),\n            // '<path d=\"M 0, 340 h 512\" stroke=\"white\" opacity=\"0.4\"/>',\n            // '<path d=\"M 0, 170 h 512\" stroke=\"white\" opacity=\"0.4\"/>',\n            // '<path d=\"M 170, 0 v 512\" stroke=\"white\" opacity=\"0.4\"/>',\n            // '<path d=\"M 340, 0 v 512\" stroke=\"white\" opacity=\"0.4\"/>',\n            // '<path d=\"M250 80 h 180 v 180 h -180 v-180\" stroke=\"white\" fill=\"none\"/>',\n\n            buildStars(dna.starSeed, dna.constellationSeed, gazes, daytime),\n            getSkyMath(decorator, dna, gazes, daytime),\n            getDecorationOne(decorator, dna, gazes, daytime),\n            getSilhouette(decorator, dna, gazes, daytime),\n            \"</svg>\",\n            \"</svg>\"\n        );\n        return svg;\n    }\n\n    function getGradients(\n        uint256 seed,\n        Color.HSL memory primary,\n        uint8 cloudDays\n    ) public pure returns (string memory) {\n        string memory rotation = Color.toString(\n            (uint16)(Color.psuedorandom(seed, 123) % 45)\n        );\n        string memory sky = string.concat(\n            '<linearGradient id=\"skyGradient\" gradientTransform=\"rotate(',\n            rotation,\n            ')\">'\n        );\n\n        sky = string.concat(\n            sky,\n            '<stop offset=\"0%\"',\n            ' stop-color=\"',\n            Color.HSLtoString(Color.rotateColor(primary, 60)),\n            '\"/>'\n        );\n\n        sky = string.concat(\n            sky,\n            '<stop offset=\"100%\"',\n            ' stop-color=\"',\n            Color.HSLtoString(primary),\n            '\"/>'\n        );\n\n        sky = string.concat(\n            sky,\n            '</linearGradient><linearGradient id=\"cloudGradient\" gradientTransform=\"rotate(',\n            rotation,\n            ')\"><stop stop-opacity=\".',\n            Color.toString(cloudDays == 0 ? 1 : cloudDays),\n            '\" offset=\"15%\"/><stop stop-opacity=\".5\" offset=\"30%\"/>',\n            '<stop stop-opacity=\".',\n            Color.toString(cloudDays == 0 ? 1 : cloudDays),\n            '\" offset=\"50%\"/></linearGradient>'\n        );\n\n        Color.HSL memory bright = Color.rotateColor(primary, 240);\n        bright.L = 90;\n        sky = string.concat(\n            sky,\n            '<linearGradient id=\"dayGradient\" gradientTransform=\"rotate(13)\">',\n            '<stop offset=\"0%\" stop-color=\"',\n            Color.HSLtoString(bright),\n            '\"/>',\n            '<stop offset=\"100%\" stop-color=\"',\n            Color.HSLtoString(Color.rotateColor(primary, 180)),\n            '\"/>',\n            \"</linearGradient>\"\n        );\n\n        return sky;\n    }\n\n    function getBackgrounds(bool day) public pure returns (string memory) {\n        string memory bg = \"\";\n\n        bg = string.concat(\n            '<rect width=\"100%\" height=\"100%\" filter=\"url(#stars)\" opacity=\"',\n            Color.toString(day ? 0 : 1),\n            '\"/>',\n            '<path fill=\"url(#dayGradient)\" d=\"M0 0h512v512H0z\" opacity=\"',\n            Color.toString(day ? 1 : 0),\n            '\"  filter=\"url(#light)\"/>',\n            '<path fill=\"url(#skyGradient)\"  d=\"M0 0h512v512H0z\" opacity=\".',\n            Color.toString(day ? 0 : 7),\n            '\"/>',\n            '<path fill=\"url(#cloudGradient)\" filter=\"url(#clouds)\" d=\"M0 0h565v512H0z\"/>'\n        );\n\n        return bg;\n    }\n\n    function getFilters(uint256 seed) public pure returns (string memory) {\n        string memory filters = \"\";\n        filters = string.concat(\n            filters,\n            '<filter id=\"stars\"><feTurbulence baseFrequency=\".35\" seed=\"',\n            Color.toString((uint16)(Color.psuedorandom(seed, 123) % 10000)),\n            '\"/>',\n            '<feColorMatrix values=\"0 0 0 9 -4 0 0 0 9 -4 0 0 0 9 -4 0 0 0 0 1\"/></filter>'\n        );\n        filters = string.concat(\n            filters,\n            '<filter id=\"clouds\" x=\"-50%\" y=\"-50%\" height=\"200%\" width=\"200%\"><feGaussianBlur in=\"sky\" stdDeviation=\"20\" result=\"skyblur\"/>',\n            '<feTurbulence type=\"fractalNoise\" baseFrequency=\".01\" numOctaves=\"5\" result=\"skynoise\" seed=\"',\n            Color.toString((uint16)(Color.psuedorandom(seed, 123) % 10000)),\n            '\"/>',\n            '<feColorMatrix values=\"1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 3 -1 -1 0 0\"/>',\n            '<feComposite operator=\"in\" in2=\"SourceGraphic\"/></filter>'\n        );\n\n        filters = string.concat(\n            filters,\n            '<filter id=\"light\"><feSpecularLighting result=\"specOut\" specularExponent=\"100\" lighting-color=\"white\">',\n            '<fePointLight x=\"10\" y=\"70\" z=\"300\"/></feSpecularLighting>',\n            '<feComposite in=\"SourceGraphic\" in2=\"specOut\" operator=\"arithmetic\" k1=\"0\" k2=\"1\" k3=\"1\" k4=\"0\"/></filter>'\n        );\n\n        return filters;\n    }\n\n    function buildStars(\n        uint256 starSeed,\n        uint256 constellationSeed,\n        uint256 gazes,\n        bool day\n    ) public view returns (string memory) {\n        if (day) {\n            return \"\";\n        }\n        string memory stars = \"\";\n        //determine how many are random and how many are constellation\n        uint8 starCount = 0;\n        uint8 constellationCount = 0;\n        if (gazes >= 30) {\n            constellationCount = 30;\n            starCount = 25;\n        } else {\n            while (starCount + constellationCount < gazes) {\n                if (\n                    Color.psuedorandom(\n                        starSeed,\n                        starCount + constellationCount\n                    ) %\n                        5 ==\n                    2\n                ) {\n                    constellationCount++;\n                } else {\n                    starCount++;\n                }\n            }\n        }\n        (string memory const, uint8 remaining) = Constellations\n            .getConstellation(\n                constellationSeed,\n                (constellationCount == 30),\n                constellationCount\n            );\n\n        stars = string.concat(stars, const, '<g fill=\"white\" opacity=\"0.7\">');\n\n        stars = string.concat(\n            stars,\n            getStars(starSeed, starCount + (remaining == 30 ? 0 : remaining)),\n            \"</g>\"\n        );\n\n        return stars;\n    }\n\n    function getStars(\n        uint256 starSeed,\n        uint8 count\n    ) public pure returns (string memory) {\n        string memory stars = \"\";\n        string memory x = \"\";\n        string memory y = \"\";\n        uint8 seed = 0;\n        for (uint8 i = 0; i < count; i++) {\n            x = Color.toString(\n                (uint16)(Color.psuedorandom(starSeed, i) % 462) + 25\n            );\n\n            y = Color.toString(\n                (uint16)(Color.psuedorandom(starSeed, i) % 255) + 25\n            );\n            seed = (uint8)(Color.psuedorandom(starSeed, i) % 3);\n            if (seed == 0) {\n                stars = string.concat(\n                    stars,\n                    '<circle r=\"1\" cx=\"',\n                    x,\n                    '\" cy=\"',\n                    y,\n                    '\" fill=\"white\"  opacity=\"1\"/>'\n                );\n            } else if (seed == 1) {\n                stars = string.concat(\n                    stars,\n                    '<path d=\"M ',\n                    x,\n                    \",\",\n                    y,\n                    'c 5,0 5,0 5,-5 c 0,5 0,5 5,5 c -5,0 -5,0 -5,5 c 0,-5 0,-5 -5,-5\"/>'\n                );\n            } else if (seed == 2) {\n                stars = string.concat(\n                    stars,\n                    '<circle r=\"3\" cx=\"',\n                    x,\n                    '\" cy=\"',\n                    y,\n                    '\" opacity=\"0.3\"/>',\n                    '<circle r=\"1\" cx=\"',\n                    x,\n                    '\" cy=\"',\n                    y,\n                    '\"/>'\n                );\n            }\n        }\n        return stars;\n    }\n\n    function psuedorandom(\n        uint256 tokenId,\n        uint256 nonce\n    ) public pure returns (uint256) {\n        return Color.psuedorandom(tokenId, nonce);\n    }\n\n    function subZero(uint16 first, uint16 second) public pure returns (uint16) {\n        return Color.subZero(first, second);\n    }\n\n    function getSilhouette(\n        address decorator,\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime\n    ) private view returns (string memory) {\n        if (decorator == address(0)) return \"\";\n        IDecorations deco = IDecorations(decorator);\n        return deco.getSilhouette(dna, gazes, daytime);\n    }\n\n    function getSkyMath(\n        address decorator,\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime\n    ) private view returns (string memory) {\n        if (decorator == address(0)) return \"\";\n        IDecorations deco = IDecorations(decorator);\n        return deco.getSkyMath(dna, gazes, daytime);\n    }\n\n    function getDecorationOne(\n        address decorator,\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime\n    ) private view returns (string memory) {\n        if (decorator == address(0)) return \"\";\n        IDecorations deco = IDecorations(decorator);\n        return deco.getDecorationOne(dna, gazes, daytime);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}