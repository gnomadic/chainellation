{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/finance/PaymentSplitter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (finance/PaymentSplitter.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/utils/SafeERC20.sol\";\nimport \"../utils/Address.sol\";\nimport \"../utils/Context.sol\";\n\n/**\n * @title PaymentSplitter\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\n * that the Ether will be split in this way, since it is handled transparently by the contract.\n *\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\n * an amount proportional to the percentage of total shares they were assigned. The distribution of shares is set at the\n * time of contract deployment and can't be updated thereafter.\n *\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\n * function.\n *\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\n * to run tests before sending real value to this contract.\n */\ncontract PaymentSplitter is Context {\n    event PayeeAdded(address account, uint256 shares);\n    event PaymentReleased(address to, uint256 amount);\n    event ERC20PaymentReleased(IERC20 indexed token, address to, uint256 amount);\n    event PaymentReceived(address from, uint256 amount);\n\n    uint256 private _totalShares;\n    uint256 private _totalReleased;\n\n    mapping(address => uint256) private _shares;\n    mapping(address => uint256) private _released;\n    address[] private _payees;\n\n    mapping(IERC20 => uint256) private _erc20TotalReleased;\n    mapping(IERC20 => mapping(address => uint256)) private _erc20Released;\n\n    /**\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\n     * the matching position in the `shares` array.\n     *\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\n     * duplicates in `payees`.\n     */\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\n        require(payees.length == shares_.length, \"PaymentSplitter: payees and shares length mismatch\");\n        require(payees.length > 0, \"PaymentSplitter: no payees\");\n\n        for (uint256 i = 0; i < payees.length; i++) {\n            _addPayee(payees[i], shares_[i]);\n        }\n    }\n\n    /**\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\n     * reliability of the events, and not the actual splitting of Ether.\n     *\n     * To learn more about this see the Solidity documentation for\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\n     * functions].\n     */\n    receive() external payable virtual {\n        emit PaymentReceived(_msgSender(), msg.value);\n    }\n\n    /**\n     * @dev Getter for the total shares held by payees.\n     */\n    function totalShares() public view returns (uint256) {\n        return _totalShares;\n    }\n\n    /**\n     * @dev Getter for the total amount of Ether already released.\n     */\n    function totalReleased() public view returns (uint256) {\n        return _totalReleased;\n    }\n\n    /**\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\n     * contract.\n     */\n    function totalReleased(IERC20 token) public view returns (uint256) {\n        return _erc20TotalReleased[token];\n    }\n\n    /**\n     * @dev Getter for the amount of shares held by an account.\n     */\n    function shares(address account) public view returns (uint256) {\n        return _shares[account];\n    }\n\n    /**\n     * @dev Getter for the amount of Ether already released to a payee.\n     */\n    function released(address account) public view returns (uint256) {\n        return _released[account];\n    }\n\n    /**\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\n     * IERC20 contract.\n     */\n    function released(IERC20 token, address account) public view returns (uint256) {\n        return _erc20Released[token][account];\n    }\n\n    /**\n     * @dev Getter for the address of the payee number `index`.\n     */\n    function payee(uint256 index) public view returns (address) {\n        return _payees[index];\n    }\n\n    /**\n     * @dev Getter for the amount of payee's releasable Ether.\n     */\n    function releasable(address account) public view returns (uint256) {\n        uint256 totalReceived = address(this).balance + totalReleased();\n        return _pendingPayment(account, totalReceived, released(account));\n    }\n\n    /**\n     * @dev Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an\n     * IERC20 contract.\n     */\n    function releasable(IERC20 token, address account) public view returns (uint256) {\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\n        return _pendingPayment(account, totalReceived, released(token, account));\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\n     * total shares and their previous withdrawals.\n     */\n    function release(address payable account) public virtual {\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 payment = releasable(account);\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        // _totalReleased is the sum of all values in _released.\n        // If \"_totalReleased += payment\" does not overflow, then \"_released[account] += payment\" cannot overflow.\n        _totalReleased += payment;\n        unchecked {\n            _released[account] += payment;\n        }\n\n        Address.sendValue(account, payment);\n        emit PaymentReleased(account, payment);\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\n     * contract.\n     */\n    function release(IERC20 token, address account) public virtual {\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 payment = releasable(token, account);\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        // _erc20TotalReleased[token] is the sum of all values in _erc20Released[token].\n        // If \"_erc20TotalReleased[token] += payment\" does not overflow, then \"_erc20Released[token][account] += payment\"\n        // cannot overflow.\n        _erc20TotalReleased[token] += payment;\n        unchecked {\n            _erc20Released[token][account] += payment;\n        }\n\n        SafeERC20.safeTransfer(token, account, payment);\n        emit ERC20PaymentReleased(token, account, payment);\n    }\n\n    /**\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\n     * already released amounts.\n     */\n    function _pendingPayment(\n        address account,\n        uint256 totalReceived,\n        uint256 alreadyReleased\n    ) private view returns (uint256) {\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\n    }\n\n    /**\n     * @dev Add a new payee to the contract.\n     * @param account The address of the payee to add.\n     * @param shares_ The number of shares owned by the payee.\n     */\n    function _addPayee(address account, uint256 shares_) private {\n        require(account != address(0), \"PaymentSplitter: account is the zero address\");\n        require(shares_ > 0, \"PaymentSplitter: shares are 0\");\n        require(_shares[account] == 0, \"PaymentSplitter: account already has shares\");\n\n        _payees.push(account);\n        _shares[account] = shares_;\n        _totalShares = _totalShares + shares_;\n        emit PayeeAdded(account, shares_);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\n\n        if (batchSize > 1) {\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\n            revert(\"ERC721Enumerable: consecutive transfers not supported\");\n        }\n\n        uint256 tokenId = firstTokenId;\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides a set of functions to operate with Base64 strings.\n *\n * _Available since v4.5._\n */\nlibrary Base64 {\n    /**\n     * @dev Base64 Encoding/Decoding Table\n     */\n    string internal constant _TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\n     */\n    function encode(bytes memory data) internal pure returns (string memory) {\n        /**\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\n         */\n        if (data.length == 0) return \"\";\n\n        // Loads the table into memory\n        string memory table = _TABLE;\n\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\n        // and split into 4 numbers of 6 bits.\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\n        // - `data.length + 2`  -> Round up\n        // - `/ 3`              -> Number of 3-bytes chunks\n        // - `4 *`              -> 4 characters for each chunk\n        string memory result = new string(4 * ((data.length + 2) / 3));\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Prepare the lookup table (skip the first \"length\" byte)\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 32)\n\n            // Run over the input, 3 bytes at a time\n            for {\n                let dataPtr := data\n                let endPtr := add(data, mload(data))\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // Advance 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // To write each character, shift the 3 bytes (18 bits) chunk\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\n                // and apply logical AND with 0x3F which is the number of\n                // the previous character in the ASCII table prior to the Base64 Table\n                // The result is then added to the table to get the character to write,\n                // and finally write it in the result pointer but with a left shift\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n            }\n\n            // When data `bytes` is not exactly 3 bytes long\n            // it is padded with `=` characters at the end\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n                mstore8(sub(resultPtr, 2), 0x3d)\n            }\n            case 2 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/chainellations/Chainellation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../interfaces/IChainellationRenderer.sol\";\nimport \"../Color.sol\";\n\ncontract Chainellation is ERC721, ERC721Enumerable, Ownable {\n    // TODO optional mint to pass in colors or just one and shift it ourselves\n    // TODO loot on gaze?\n\n    using Strings for uint256;\n    using Counters for Counters.Counter;\n\n    Counters.Counter private _tokenIds;\n    uint256 public maxSupply = 15000;\n    // uint256 public mintCost = 75 * 10 ** 15; // ETH\n    // uint256 public mintCost = 20 * 10 ** 18; // POLYGON\n    uint256 public mintCost = 0;\n    uint256 public customizeCost = 0; // 5 * 10 ** 15;\n\n    mapping(uint256 => Color.DNA) public dnas;\n\n    mapping(uint256 => uint32) public timeZoneOffset;\n    mapping(uint256 => uint16) public gazes;\n    mapping(uint256 => uint256) public lastGaze;\n    mapping(uint256 => uint32) public colors;\n\n    address private _decorator;\n    IChainellationRenderer private _chainellationRenderer;\n\n    constructor(address renderer) ERC721(\"chainellation\", \"STARS\") {\n        _chainellationRenderer = IChainellationRenderer(renderer);\n    }\n\n    function tokenURI(\n        uint256 tokenId\n    ) public view virtual override returns (string memory) {\n        if (tokenId > _tokenIds.current()) revert NotMinted();\n\n        bytes memory dataURI = abi.encodePacked(\n            \"{\",\n            '\"name\": \"chainellation #',\n            tokenId.toString(),\n            '\",',\n            '\"description\": \"chainellation\",',\n            '\"image\": \"',\n            generateCharacter(tokenId),\n            '\"',\n            \"}\"\n        );\n        return\n            string(\n                abi.encodePacked(\n                    \"data:application/json;base64,\",\n                    Base64.encode(dataURI)\n                )\n            );\n    }\n\n    function mint(uint32 timezoneOffset) public payable {\n        if (msg.value < mintCost) revert Cost();\n\n        _mint(timezoneOffset, 0, msg.sender);\n    }\n\n    function mintCustom(\n        uint32 timezoneOffset,\n        uint16 firstH,\n        uint16 secondH\n    ) public payable {\n        if (msg.value < (mintCost + customizeCost)) revert Cost();\n        _mint(\n            timezoneOffset,\n            (uint32(firstH) << 16) | uint32(secondH),\n            msg.sender\n        );\n    }\n\n    function mintBatch(uint32 timezoneOffset, uint8 count) public payable {\n        for (uint8 i = 0; i < count; i++) {\n            mint(timezoneOffset);\n        }\n    }\n\n    function freeMint(uint32 timezoneOffset) public onlyOwner {\n        _mint(timezoneOffset, 0, msg.sender);\n    }\n\n    // if the timezone offset is negative, we're gonna pretend like it's a day in the future\n    // this doesn't matter because the timezone offset is only used to determine the time of day\n    // and not the actual day.\n    function _mint(\n        uint32 timezoneOffset,\n        uint32 colorData,\n        address _to\n    ) private {\n        if (_tokenIds.current() >= maxSupply) revert MaxSupplyReached();\n        _tokenIds.increment();\n        uint256 newItemId = _tokenIds.current();\n        timeZoneOffset[newItemId] = timezoneOffset;\n\n        if (colorData == 0) {\n            uint16 primary = uint16((newItemId % 16) * 10);\n            uint16 secondary = Color\n                .rotateColor(Color.HSL(primary, 0, 0), 60)\n                .H;\n            colorData = (uint32(primary) << 16) | uint32(secondary);\n        }\n\n        colors[newItemId] = colorData;\n        _safeMint(_to, newItemId);\n    }\n\n    function generateCharacter(\n        uint256 tokenId\n    ) public view returns (string memory) {\n        bytes memory svg = abi.encodePacked(\n            generateSVG(tokenId, gazes[tokenId], 1, !isNight(tokenId))\n        );\n\n        return\n            string(\n                abi.encodePacked(\n                    \"data:image/svg+xml;base64,\",\n                    Base64.encode(svg)\n                )\n            );\n    }\n\n    function getColors(uint256 tokenId) public view returns (uint32) {\n        if (colors[tokenId] == 0) {\n            uint16 primary = uint16((tokenId % 16) * 10);\n            uint16 secondary = Color\n                .rotateColor(Color.HSL(primary, 0, 0), 60)\n                .H;\n            return (uint32(primary) << 16) | uint32(secondary);\n        } else {\n            return colors[tokenId];\n        }\n    }\n\n    function generateSVG(\n        uint256 tokenId,\n        uint256 gazed,\n        uint8 cloudsAt,\n        bool sunUp\n    ) public view returns (string memory) {\n        return\n            _chainellationRenderer.generateSVG(\n                Color.genDNA(tokenId, getColors(tokenId)),\n                gazed,\n                sunUp,\n                cloudsAt,\n                _decorator\n            );\n    }\n\n    function starGaze(uint256 tokenId) public {\n        if (ownerOf(tokenId) != msg.sender) revert NotTheOwner();\n        if (!isNight(tokenId)) revert NotNight();\n        if (systemTimeOffsetWithUser(tokenId) - lastGaze[tokenId] < 14 hours)\n            revert NotEnoughTimePassed();\n        gazes[tokenId] = gazes[tokenId] + 1;\n        lastGaze[tokenId] = systemTimeOffsetWithUser(tokenId);\n    }\n\n    function gazeBatch(uint256[] calldata tokenIds) public {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            starGaze(tokenIds[i]);\n        }\n    }\n\n    function reset(uint256 tokenId) public {\n        if (ownerOf(tokenId) != msg.sender) revert NotTheOwner();\n        gazes[tokenId] = 0;\n    }\n\n    function setMaxSupply(uint256 _maxSupply) public onlyOwner {\n        maxSupply = _maxSupply;\n    }\n\n    function setMintCost(uint256 _newMintCost) public onlyOwner {\n        mintCost = _newMintCost;\n    }\n\n    function setCustomizeCost(uint256 _newCost) public onlyOwner {\n        customizeCost = _newCost;\n    }\n\n    function currentSupply() public view returns (uint256) {\n        return _tokenIds.current();\n    }\n\n    function setDecorator(address decorator) public onlyOwner {\n        _decorator = decorator;\n    }\n\n    function setRenderer(address renderer) public onlyOwner {\n        _chainellationRenderer = IChainellationRenderer(renderer);\n    }\n\n    function systemTimeOffsetWithUser(\n        uint256 tokenId\n    ) public view returns (uint256) {\n        return systemTime() + (timeZoneOffset[tokenId]);\n    }\n\n    function systemTime() public view virtual returns (uint256) {\n        return block.timestamp;\n    }\n\n    function isNight(uint256 tokenId) public view returns (bool) {\n        uint8 hour = (uint8)(\n            (systemTimeOffsetWithUser(tokenId) / 60 / 60) % 24\n        );\n        return hour < 6 || hour > 18;\n    }\n\n    function withdraw() external onlyOwner {\n        payable(address(_msgSender())).transfer(address(this).balance);\n    }\n\n    function withdrawToken(\n        address _tokenContract,\n        uint256 _amount\n    ) external onlyOwner {\n        IERC20(_tokenContract).transfer(msg.sender, _amount);\n    }\n\n    error NotTheOwner();\n    error NotEnoughTimePassed();\n    error MaxSupplyReached();\n    error NotNight();\n    error Cost();\n    error TooCloudy();\n    error NotMinted();\n\n    //------------------------------------------------------ Solidity Overrides\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 batchSize\n    ) internal override(ERC721, ERC721Enumerable) {\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\n    }\n\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view override(ERC721, ERC721Enumerable) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n}\n\ninterface IERC20 {\n    function transfer(address _to, uint256 _amount) external returns (bool);\n}\n"
    },
    "contracts/chainellations/ChainellationRenderer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"../Color.sol\";\n// import \"./Constellations.sol\";\nimport \"../interfaces/IDecorations.sol\";\n\n// import \"hardhat/console.sol\";\n\ncontract ChainellationRenderer {\n    function generateSVG(\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime,\n        uint8 cloudDays,\n        address decorator\n    ) public view returns (string memory) {\n        Color.HSL memory primary = Color.HSL(dna.primaryHue, 100, 30);\n        Color.HSL memory secondary = Color.HSL(dna.secondaryHue, 100, 30);\n        // console.log(\"Colors are %s and %s \", primary.H, secondary.H);\n        string memory svg = string.concat(\n            '<svg viewBox=\"0 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\"><clipPath id=\"box\"><path d=\"M0 0h512v512H0z\"/></clipPath><defs>',\n            getGradients(dna.starSeed, primary, secondary, cloudDays),\n            getFilters(dna.funkSeed),\n            '</defs><svg viewBox=\"0 0 512 512\" clip-path=\"url(#box)\">',\n            getBackgrounds(daytime),\n            // '<path d=\"M 0, 340 h 512\" stroke=\"white\" opacity=\"0.4\"/>',\n            // '<path d=\"M 0, 170 h 512\" stroke=\"white\" opacity=\"0.4\"/>',\n            // '<path d=\"M 170, 0 v 512\" stroke=\"white\" opacity=\"0.4\"/>',\n            // '<path d=\"M 340, 0 v 512\" stroke=\"white\" opacity=\"0.4\"/>',\n            // '<path d=\"M250 80 h 180 v 180 h -180 v-180\" stroke=\"white\" fill=\"none\"/>',\n\n            // buildStars(dna.starSeed, dna.constellationSeed, gazes, daytime),\n            getStars(dna.starSeed, gazes, daytime),\n            getDecos(decorator, dna, gazes, daytime),\n            // getFocus(decorator, dna, gazes, daytime),\n            // getSkyMath(decorator, dna, gazes, daytime),\n            // getDecorationOne(decorator, dna, gazes, daytime),\n            // getSilhouette(decorator, dna, gazes, daytime),\n            \"</svg>\",\n            \"</svg>\"\n        );\n        return svg;\n    }\n\n    function getGradients(\n        uint256 seed,\n        Color.HSL memory primary,\n        Color.HSL memory secondary,\n        uint8 cloudDays\n    ) public pure returns (string memory) {\n        string memory rotation = Color.toString(\n            (uint16)(Color.psuedorandom(seed, 123) % 45)\n        );\n        string memory sky = string.concat(\n            '<linearGradient id=\"skyGradient\" gradientTransform=\"rotate(',\n            rotation,\n            ')\">'\n        );\n\n        sky = string.concat(\n            sky,\n            '<stop offset=\"0%\"',\n            ' stop-color=\"',\n            Color.HSLtoString(primary),\n            '\"/>'\n        );\n\n        sky = string.concat(\n            sky,\n            '<stop offset=\"100%\"',\n            ' stop-color=\"',\n            Color.HSLtoString(secondary),\n            '\"/>'\n        );\n\n        sky = string.concat(\n            sky,\n            '</linearGradient><linearGradient id=\"cloudGradient\" gradientTransform=\"rotate(',\n            rotation,\n            ')\"><stop stop-opacity=\".',\n            Color.toString(cloudDays == 0 ? 1 : cloudDays),\n            '\" offset=\"15%\"/><stop stop-opacity=\".5\" offset=\"30%\"/>',\n            '<stop stop-opacity=\".',\n            Color.toString(cloudDays == 0 ? 1 : cloudDays),\n            '\" offset=\"50%\"/></linearGradient>'\n        );\n\n        Color.HSL memory bright = Color.rotateColor(primary, 240);\n        bright.L = 90;\n        sky = string.concat(\n            sky,\n            '<linearGradient id=\"dayGradient\" gradientTransform=\"rotate(13)\">',\n            '<stop offset=\"0%\" stop-color=\"',\n            Color.HSLtoString(Color.rotateColor(primary, 180)),\n            '\"/>',\n            '<stop offset=\"100%\" stop-color=\"',\n            Color.HSLtoString(Color.rotateColor(secondary, 180)),\n            '\"/>',\n            \"</linearGradient>\"\n        );\n\n        return sky;\n    }\n\n    function getBackgrounds(bool day) public pure returns (string memory) {\n        string memory bg = \"\";\n\n        bg = string.concat(\n            '<rect width=\"100%\" height=\"100%\" filter=\"url(#stars)\" opacity=\"',\n            Color.toString(day ? 0 : 1),\n            '\"/>',\n            '<path fill=\"url(#dayGradient)\" d=\"M0 0h512v512H0z\" opacity=\"',\n            Color.toString(day ? 1 : 0),\n            '\"  filter=\"url(#light)\"/>',\n            '<path fill=\"url(#skyGradient)\"  d=\"M0 0h512v512H0z\" opacity=\".',\n            Color.toString(day ? 0 : 7),\n            '\"/>',\n            '<path fill=\"url(#cloudGradient)\" filter=\"url(#clouds)\" d=\"M0 0h565v512H0z\"/>'\n        );\n\n        return bg;\n    }\n\n    function getFilters(uint256 seed) public pure returns (string memory) {\n        string memory filters = \"\";\n        filters = string.concat(\n            filters,\n            '<filter id=\"stars\"><feTurbulence baseFrequency=\".35\" seed=\"',\n            Color.toString((uint16)(Color.psuedorandom(seed, 123) % 10000)),\n            '\"/>',\n            '<feColorMatrix values=\"0 0 0 9 -4 0 0 0 9 -4 0 0 0 9 -4 0 0 0 0 1\"/></filter>'\n        );\n        filters = string.concat(\n            filters,\n            '<filter id=\"clouds\" x=\"-50%\" y=\"-50%\" height=\"200%\" width=\"200%\"><feGaussianBlur in=\"sky\" stdDeviation=\"20\" result=\"skyblur\"/>',\n            '<feTurbulence type=\"fractalNoise\" baseFrequency=\".01\" numOctaves=\"5\" result=\"skynoise\" seed=\"',\n            Color.toString((uint16)(Color.psuedorandom(seed, 123) % 10000)),\n            '\"/>',\n            '<feColorMatrix values=\"1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 3 -1 -1 0 0\"/>',\n            '<feComposite operator=\"in\" in2=\"SourceGraphic\"/></filter>'\n        );\n\n        filters = string.concat(\n            filters,\n            '<filter id=\"light\"><feSpecularLighting result=\"specOut\" specularExponent=\"100\" lighting-color=\"white\">',\n            '<fePointLight x=\"10\" y=\"70\" z=\"300\"/></feSpecularLighting>',\n            '<feComposite in=\"SourceGraphic\" in2=\"specOut\" operator=\"arithmetic\" k1=\"0\" k2=\"1\" k3=\"1\" k4=\"0\"/></filter>'\n        );\n\n        return filters;\n    }\n\n    // function getStars(\n    //     // uint256 starSeed,\n    //     // uint256 gazes,\n    //     // bool day\n\n    //     address decorator,\n    //     Color.DNA memory dna,\n    //     uint256 gazes,\n    //     bool daytime\n    // ) public view returns (string memory) {\n    //     if (daytime) {\n    //         return \"\";\n    //     }\n    //     uint8 starCount;\n\n    //     if (starCount > 30) {\n    //         starCount = 30;\n    //     } else {\n    //         starCount = (uint8)(gazes);\n    //     }\n\n    //     return\n    //         string.concat(\n    //             '<g fill=\"white\" opacity=\"0.7\">',\n    //             getStars(dna.starSeed, starCount),\n    //             \"</g>\",\n    //             getFocus(decorator, dna, gazes, daytime)\n    //         );\n    // }\n\n    // function buildStars(\n    //     uint256 starSeed,\n    //     uint256 constellationSeed,\n    //     uint256 gazes,\n    //     bool day\n    // ) public view returns (string memory) {\n    //     if (day) {\n    //         return \"\";\n    //     }\n    //     string memory stars = \"\";\n    //     //determine how many are random and how many are constellation\n    //     uint8 starCount = 0;\n    //     uint8 constellationCount = 0;\n    //     if (gazes >= 30) {\n    //         constellationCount = 30;\n    //         starCount = 25;\n    //     } else {\n    //         while (starCount + constellationCount < gazes) {\n    //             if (\n    //                 Color.psuedorandom(\n    //                     starSeed,\n    //                     starCount + constellationCount\n    //                 ) %\n    //                     5 ==\n    //                 2\n    //             ) {\n    //                 constellationCount++;\n    //             } else {\n    //                 starCount++;\n    //             }\n    //         }\n    //     }\n    //     (string memory const, uint8 remaining) = Constellations\n    //         .getConstellation(\n    //             constellationSeed,\n    //             (constellationCount == 30),\n    //             constellationCount\n    //         );\n\n    //     stars = string.concat(stars, const, '<g fill=\"white\" opacity=\"0.7\">');\n\n    //     stars = string.concat(\n    //         stars,\n    //         getStars(starSeed, starCount + (remaining == 30 ? 0 : remaining)),\n    //         \"</g>\"\n    //     );\n\n    //     return stars;\n    // }\n\n    function getStars(\n        uint256 starSeed,\n        uint256 gazes,\n        bool daytime\n    ) public pure returns (string memory) {\n        if (daytime) {\n            return \"\";\n        }\n        uint8 count;\n\n        if (gazes > 30) {\n            count = 30;\n        } else {\n            count = (uint8)(gazes);\n        }\n\n        string memory stars = '<g fill=\"white\">';\n        string memory x = \"\";\n        string memory y = \"\";\n        uint8 seed = 0;\n        for (uint8 i = 0; i < count; i++) {\n            x = Color.toString(\n                (uint16)(Color.psuedorandom(starSeed, i) % 462) + 25\n            );\n\n            y = Color.toString(\n                (uint16)(Color.psuedorandom(starSeed, i) % 255) + 25\n            );\n            seed = (uint8)(Color.psuedorandom(starSeed, i) % 3);\n            if (seed == 0) {\n                stars = string.concat(\n                    stars,\n                    '<circle r=\"1\" cx=\"',\n                    x,\n                    '\" cy=\"',\n                    y,\n                    '\" fill=\"white\"  opacity=\"1\">',\n                    '<animate attributeName=\"r\" values=\"0;3;1\" dur=\"1s\"/></circle>'\n                );\n            } else if (seed == 1) {\n                stars = string.concat(\n                    stars,\n                    '<path d=\"M ',\n                    x,\n                    \",\",\n                    y,\n                    'c 7,0 7,0 7,-7 c 0,7 0,7 7,7 c -7,0 -7,0 -7,7 c 0,-7 0,-7 -7,-7\">',\n                    '<animateTransform attributeName=\"transform\" type=\"scale\" from=\"0 0\" to=\"1 1\" begin=\"0s\" dur=\"0.5s\" repeatCount=\"1\"/></path>'\n                );\n            } else if (seed == 2) {\n                stars = string.concat(\n                    stars,\n                    '<circle r=\"3\" cx=\"',\n                    x,\n                    '\" cy=\"',\n                    y,\n                    '\" opacity=\"0.3\"><animate attributeName=\"r\" values=\"0;5;3\" dur=\"1s\"/></circle>',\n                    '<circle r=\"1\" cx=\"',\n                    x,\n                    '\" cy=\"',\n                    y,\n                    '\"><animate attributeName=\"r\" values=\"0;3;1\" dur=\"1s\"/></circle>'\n                );\n            }\n        }\n        return string.concat(stars, \"</g>\");\n    }\n\n    function psuedorandom(\n        uint256 tokenId,\n        uint256 nonce\n    ) public pure returns (uint256) {\n        return Color.psuedorandom(tokenId, nonce);\n    }\n\n    function subZero(uint16 first, uint16 second) public pure returns (uint16) {\n        return Color.subZero(first, second);\n    }\n\n    function getDecos(\n        address decorator,\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime\n    ) private view returns (string memory) {\n        return\n            string.concat(\n                getFocus(decorator, dna, gazes, daytime),\n                getSkyMath(decorator, dna, gazes, daytime),\n                getDecorationOne(decorator, dna, gazes, daytime),\n                getSilhouette(decorator, dna, gazes, daytime)\n            );\n    }\n\n    function getFocus(\n        address decorator,\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime\n    ) private view returns (string memory) {\n        if (decorator == address(0)) return \"\";\n        IDecorations deco = IDecorations(decorator);\n        return deco.getDecorationOne(dna, gazes, daytime);\n    }\n\n    function getSilhouette(\n        address decorator,\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime\n    ) private view returns (string memory) {\n        if (decorator == address(0)) return \"\";\n        IDecorations deco = IDecorations(decorator);\n        return deco.getSilhouette(dna, gazes, daytime);\n    }\n\n    function getSkyMath(\n        address decorator,\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime\n    ) private view returns (string memory) {\n        if (decorator == address(0)) return \"\";\n        IDecorations deco = IDecorations(decorator);\n        return deco.getSkyMath(dna, gazes, daytime);\n    }\n\n    function getDecorationOne(\n        address decorator,\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime\n    ) private view returns (string memory) {\n        if (decorator == address(0)) return \"\";\n        IDecorations deco = IDecorations(decorator);\n        return deco.getDecorationOne(dna, gazes, daytime);\n    }\n}\n"
    },
    "contracts/chainellations/Constellations.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nlibrary Constellations {\n    using Strings for uint256;\n\n    function getConstellation(\n        uint256 constellationSeed,\n        uint8 gazed\n    ) public view returns (string memory) {\n        uint8 seed = (uint8)(constellationSeed % 13);\n        if (seed == 0) {\n            return Aries(gazed);\n        } else if (seed == 1) {\n            return Sagittarius(gazed);\n        } else if (seed == 2) {\n            return Capricorn(gazed);\n        } else if (seed == 3) {\n            return Aquarius(gazed);\n        } else if (seed == 4) {\n            return Pisces(gazed);\n        } else if (seed == 5) {\n            return Scorpio(gazed);\n        } else if (seed == 6) {\n            return Libra(gazed);\n        } else if (seed == 7) {\n            return Virgo(gazed);\n        } else if (seed == 8) {\n            return Leo(gazed);\n        } else if (seed == 9) {\n            return Cancer(gazed);\n        } else if (seed == 10) {\n            return Gemini(gazed);\n        } else if (seed == 11) {\n            return Taurus(gazed);\n        } else if (seed == 12) {\n            return Pegasus(gazed);\n        } else if (seed == 13) {\n            return UrsaMinor(gazed);\n        } else {\n            return Cygnus(gazed);\n        }\n    }\n\n    function buildStar(\n        string[] memory stars,\n        string memory open,\n        string memory close,\n        uint8 show\n    ) public pure returns (string memory) {\n        if (show > stars.length) {\n            show = (uint8)(stars.length);\n        }\n\n        string memory constellation = \"\";\n        constellation = string.concat(constellation, open);\n        for (uint8 i = 0; i < show; i++) {\n            constellation = string.concat(constellation, stars[i]);\n        }\n        if (show == stars.length) {\n            constellation = string.concat(constellation, close);\n        } else {\n            constellation = string.concat(constellation, \"</g>\");\n        }\n        // return (constellation, ((uint8)(stars.length) - show));\n        return (constellation);\n    }\n\n    function Aries(uint8 show) public view returns (string memory) {\n        string[] memory stars = new string[](6);\n\n        string\n            memory open = '<g transform=\"translate(316,133), rotate(0)\" fill=\"#fff\" opacity=\"0.8\">';\n\n        stars[0] = '<circle cx=\"-30\" cy=\"60\" r=\"2\"/>';\n        stars[1] = '<circle cx=\"-10\" cy=\"45\" r=\"2\"/>';\n        stars[2] = '<circle cx=\"5\" cy=\"0\" r=\"2\"/>';\n        stars[3] = '<circle cx=\"55\" cy=\"10\" r=\"2\"/>';\n        stars[4] = '<circle cx=\"80\" cy=\"30\" r=\"2\"/>';\n        stars[5] = '<circle cx=\"85\" cy=\"45\" r=\"2\"/>';\n\n        string\n            memory close = '<path d=\"m -30 60 L -10 45 L 5 0 L 55 10 L 80 30 L 85 45\" fill=\"none\" stroke=\"white\" opacity=\".5\"/></g>';\n        return buildStar(stars, open, close, show);\n    }\n\n    function Sagittarius(uint8 show) public view returns (string memory) {\n        string\n            memory open = '<g transform=\"translate(234,-290), rotate(0)\" fill=\"#fff\" opacity=\"0.8\">';\n        string[] memory stars = new string[](20);\n\n        stars[0] = '<circle r=\"2\" cx=\"169\" cy=\"447\"/>';\n        stars[1] = '<circle r=\"2\" cx=\"148\" cy=\"462\"/>';\n        stars[2] = '<circle r=\"2\" cx=\"139\" cy=\"482\"/>';\n        stars[3] = '<circle r=\"2\" cx=\"136\" cy=\"419\"/>';\n        stars[4] = '<circle r=\"2\" cx=\"134\" cy=\"457\"/>';\n        stars[5] = '<circle r=\"2\" cx=\"132\" cy=\"475\"/>';\n        stars[6] = '<circle r=\"2\" cx=\"128\" cy=\"441\"/>';\n        stars[7] = '<circle r=\"2\" cx=\"110\" cy=\"449\"/>';\n        stars[8] = '<circle r=\"2\" cx=\"100\" cy=\"446\"/>';\n        stars[9] = '<circle r=\"2\" cx=\"97\" cy=\"460\"/>';\n        stars[10] = '<circle r=\"2\" cx=\"97\" cy=\"421\"/>';\n        stars[11] = '<circle r=\"2\" cx=\"91\" cy=\"519\"/>';\n        stars[12] = '<circle r=\"2\" cx=\"91\" cy=\"453\"/>';\n        stars[13] = '<circle r=\"2\" cx=\"90\" cy=\"426\"/>';\n        stars[14] = '<circle r=\"2\" cx=\"88\" cy=\"507\"/>';\n        stars[15] = '<circle r=\"2\" cx=\"81\" cy=\"424\"/>';\n        stars[16] = '<circle r=\"2\" cx=\"71\" cy=\"515\"/>';\n        stars[17] = '<circle r=\"2\" cx=\"66\" cy=\"415\"/>';\n        stars[18] = '<circle r=\"2\" cx=\"62\" cy=\"446\"/>';\n        stars[19] = '<circle r=\"2\" cx=\"42\" cy=\"468\"/>';\n\n        string\n            memory close = '<path d=\"m169, 447 L 148, 462 L 134,457 L 132, 475 L 139, 482 M 134,457 L 128,441 L 136,419 M 128, 441 L 110, 449 L 100,446 L 90,426 L 97,421 M 90,426 L 81,424 L 66,415 M 110, 449 L 97, 460 L 91, 453 L 100,446 M 91,453 L 62, 446 L 42, 468 L 71, 515 L 88,507 M 71,515 L 91,519\" stroke=\"#fff\" opacity=\".5\" fill=\"none\"/></g>';\n\n        return buildStar(stars, open, close, show);\n    }\n\n    function Capricorn(uint8 show) public view returns (string memory) {\n        string[] memory stars = new string[](11);\n\n        string\n            memory open = '<g transform=\"translate(114,-300), rotate(0)\" fill=\"#fff\" opacity=\"0.8\">';\n        stars[0] = '<circle r=\"2\" cx=\"254\" cy=\"492\"/>';\n        stars[1] = '<circle r=\"2\" cx=\"253\" cy=\"483\"/>';\n        stars[2] = '<circle r=\"2\" cx=\"241\" cy=\"498\"/>';\n        stars[3] = '<circle r=\"2\" cx=\"232\" cy=\"424\"/>';\n        stars[4] = '<circle r=\"2\" cx=\"231\" cy=\"414\"/>';\n        stars[5] = '<circle r=\"2\" cx=\"221\" cy=\"510\"/>';\n        stars[6] = '<circle r=\"2\" cx=\"212\" cy=\"481\"/>';\n        stars[7] = '<circle r=\"2\" cx=\"202\" cy=\"514\"/>';\n        stars[8] = '<circle r=\"2\" cx=\"201\" cy=\"495\"/>';\n        stars[9] = '<circle r=\"2\" cx=\"191\" cy=\"511\"/>';\n        stars[10] = '<circle r=\"2\" cx=\"189\" cy=\"519\"/>';\n        string\n            memory close = '<path d=\"M 254, 492 L 241, 498 L 221, 510 L 202,514 L 189, 519 L 191, 511 L 201,495 L 212, 481 L 232, 424 L 231 414 M 232, 424 L 253, 483\" stroke=\"#fff\" opacity=\".5\" fill=\"none\"/></g>';\n        return buildStar(stars, open, close, show);\n    }\n\n    function Aquarius(uint8 show) public view returns (string memory) {\n        string[] memory stars = new string[](13);\n        string\n            memory open = '<g transform=\"translate(-6,-300), rotate(0)\" fill=\"#fff\" opacity=\"0.8\">';\n        stars[0] = '<circle r=\"2\" cx=\"378\" cy=\"406 \"/>';\n        stars[1] = '<circle r=\"2\" cx=\"372\" cy=\"530 \"/>';\n        stars[2] = '<circle r=\"2\" cx=\"354\" cy=\"517 \"/>';\n        stars[3] = '<circle r=\"2\" cx=\"347\" cy=\"512 \"/>';\n        stars[4] = '<circle r=\"2\" cx=\"339\" cy=\"435 \"/>';\n        stars[5] = '<circle r=\"2\" cx=\"335\" cy=\"476 \"/>';\n        stars[6] = '<circle r=\"2\" cx=\"325\" cy=\"515 \"/>';\n        stars[7] = '<circle r=\"2\" cx=\"319\" cy=\"534 \"/>';\n        stars[8] = '<circle r=\"2\" cx=\"302\" cy=\"459 \"/>';\n        stars[9] = '<circle r=\"2\" cx=\"302\" cy=\"480 \"/>';\n        stars[10] = '<circle r=\"2\" cx=\"292\" cy=\"484 \"/>';\n        stars[11] = '<circle r=\"2\" cx=\"289\" cy=\"492 \"/>';\n        stars[12] = '<circle r=\"2\" cx=\"365\" cy=\"472 \"/>';\n        string\n            memory close = '<path d=\"M378, 406 L 339, 435 L 302, 459 L 302, 480 L 292 484 L 289, 492 L 319 534 L 325,515 L 347,512 L 354,517 L 372,530 M 302,459 L 335,476 L 365 472\" fill=\"none\" stroke=\"#fff\" opacity=\".5\"/></g>';\n        return buildStar(stars, open, close, show);\n    }\n\n    function Pisces(uint8 show) public view returns (string memory) {\n        string[] memory stars = new string[](17);\n\n        string\n            memory open = '<g transform=\"translate(14,-170), rotate(0) scale(0.7)\" fill=\"#fff\" opacity=\"0.8\">';\n        stars[0] = '<circle r=\"2.86\" cx=\"523\" cy=\"547 \"/>';\n        stars[1] = '<circle r=\"2.86\" cx=\"502\" cy=\"526 \"/>';\n        stars[2] = '<circle r=\"2.86\" cx=\"495\" cy=\"541 \"/>';\n        stars[3] = '<circle r=\"2.86\" cx=\"482\" cy=\"502 \"/>';\n        stars[4] = '<circle r=\"2.86\" cx=\"475\" cy=\"484 \"/>';\n        stars[5] = '<circle r=\"2.86\" cx=\"474\" cy=\"417 \"/>';\n        stars[6] = '<circle r=\"2.86\" cx=\"471\" cy=\"400 \"/>';\n        stars[7] = '<circle r=\"2.86\" cx=\"468\" cy=\"427 \"/>';\n        stars[8] = '<circle r=\"2.86\" cx=\"465\" cy=\"539 \"/>';\n        stars[9] = '<circle r=\"2.86\" cx=\"459\" cy=\"445 \"/>';\n        stars[10] = '<circle r=\"2.86\" cx=\"457\" cy=\"395 \"/>';\n        stars[11] = '<circle r=\"2.86\" cx=\"454\" cy=\"425 \"/>';\n        stars[12] = '<circle r=\"2.86\" cx=\"448\" cy=\"401 \"/>';\n        stars[13] = '<circle r=\"2.86\" cx=\"445\" cy=\"413 \"/>';\n        stars[14] = '<circle r=\"2.86\" cx=\"425\" cy=\"541 \"/>';\n        stars[15] = '<circle r=\"2.86\" cx=\"415\" cy=\"553 \"/>';\n        stars[16] = '<circle r=\"2.86\" cx=\"400\" cy=\"544 \"/>';\n        string\n            memory close = '<path d=\"m400, 544 L 415, 553 L 425,541 L465, 539 L 495, 541 L 523, 547 L 502, 526 L 482, 502 L 475, 484 L 459, 445 L 454, 425 L 445, 413 L 448, 401 L 457, 395 L 471, 400 L 474, 417 L 468, 427 L 454 425 \" stroke=\"#fff\" opacity=\".5\" fill=\"none\" stroke-width=\"1.43\"/></g>';\n        return buildStar(stars, open, close, show);\n    }\n\n    function Scorpio(uint8 show) public view returns (string memory) {\n        string[] memory stars = new string[](15);\n\n        string\n            memory open = '<g transform=\"translate(-121,-120), rotate(0)\" fill=\"#fff\" opacity=\"0.8\">';\n        stars[0] = '<circle r=\"2\" cx=\"513\" cy=\"256 \"/>';\n        stars[1] = '<circle r=\"2\" cx=\"513\" cy=\"268 \"/>';\n        stars[2] = '<circle r=\"2\" cx=\"510\" cy=\"248 \"/>';\n        stars[3] = '<circle r=\"2\" cx=\"489\" cy=\"264 \"/>';\n        stars[4] = '<circle r=\"2\" cx=\"481\" cy=\"268 \"/>';\n        stars[5] = '<circle r=\"2\" cx=\"475\" cy=\"274 \"/>';\n        stars[6] = '<circle r=\"2\" cx=\"458\" cy=\"296 \"/>';\n        stars[7] = '<circle r=\"2\" cx=\"456\" cy=\"314 \"/>';\n        stars[8] = '<circle r=\"2\" cx=\"452\" cy=\"328 \"/>';\n        stars[9] = '<circle r=\"2\" cx=\"435\" cy=\"333 \"/>';\n        stars[10] = '<circle r=\"2\" cx=\"419\" cy=\"304 \"/>';\n        stars[11] = '<circle r=\"2\" cx=\"415\" cy=\"332 \"/>';\n        stars[12] = '<circle r=\"2\" cx=\"410\" cy=\"313 \"/>';\n        stars[13] = '<circle r=\"2\" cx=\"405\" cy=\"320 \"/>';\n        stars[14] = '<circle r=\"2\" cx=\"513\" cy=\"281 \"/>';\n        string\n            memory close = '<path d=\"m419, 304 L 410, 313 L 405, 320 L 415, 332 L 435, 333 L  452, 328 L 456, 314 L 458, 296 L 475, 274 L 481, 268 L 489, 264 L 513, 256 L 510, 248 M 513, 256 L 513, 268 L 513 281\" stroke=\"#fff\" opacity=\".5\" fill=\"none\"/></g>';\n        return buildStar(stars, open, close, show);\n    }\n\n    function Libra(uint8 show) public view returns (string memory) {\n        string[] memory stars = new string[](8);\n        string\n            memory open = '<g transform=\"translate(4,-120), rotate(0)\" fill=\"#fff\" opacity=\"0.8\">';\n        stars[0] = '<circle r=\"2\" cx=\"361\" cy=\"272 \"/>';\n        stars[1] = '<circle r=\"2\" cx=\"356\" cy=\"307 \"/>';\n        stars[2] = '<circle r=\"2\" cx=\"335\" cy=\"329 \"/>';\n        stars[3] = '<circle r=\"2\" cx=\"335\" cy=\"321 \"/>';\n        stars[4] = '<circle r=\"2\" cx=\"333\" cy=\"252 \"/>';\n        stars[5] = '<circle r=\"2\" cx=\"324\" cy=\"276 \"/>';\n        stars[6] = '<circle r=\"2\" cx=\"318\" cy=\"281 \"/>';\n        stars[7] = '<circle r=\"2\" cx=\"309\" cy=\"287 \"/>';\n        string\n            memory close = '<path d=\"M 309, 287 L 318, 281 L 324, 276 L 333, 252 L 361, 272, 356, 307 L  335, 321 L 335, 329 M 356, 307 L 333, 252 \" stroke=\"#fff\" opacity=\".5\" fill=\"none\"/></g>';\n        return buildStar(stars, open, close, show);\n    }\n\n    function Virgo(uint8 show) public view returns (string memory) {\n        string[] memory stars = new string[](12);\n        string\n            memory open = '<g transform=\"translate(114,-114), rotate(0)\" fill=\"#fff\" opacity=\"0.8\">';\n        stars[0] = '<circle r=\"2\" cx=\"261\" cy=\"296 \"/>';\n        stars[1] = '<circle r=\"2\" cx=\"251\" cy=\"225 \"/>';\n        stars[2] = '<circle r=\"2\" cx=\"248\" cy=\"276 \"/>';\n        stars[3] = '<circle r=\"2\" cx=\"246\" cy=\"244 \"/>';\n        stars[4] = '<circle r=\"2\" cx=\"241\" cy=\"327 \"/>';\n        stars[5] = '<circle r=\"2\" cx=\"231\" cy=\"324 \"/>';\n        stars[6] = '<circle r=\"2\" cx=\"225\" cy=\"249 \"/>';\n        stars[7] = '<circle r=\"2\" cx=\"223\" cy=\"285 \"/>';\n        stars[8] = '<circle r=\"2\" cx=\"221\" cy=\"342 \"/>';\n        stars[9] = '<circle r=\"2\" cx=\"207\" cy=\"299 \"/>';\n        stars[10] = '<circle r=\"2\" cx=\"198\" cy=\"242 \"/>';\n        stars[11] = '<circle r=\"2\" cx=\"188\" cy=\"330 \"/>';\n        string\n            memory close = '<path d=\"m221, 342 L 231, 324 L 241, 327 L 261, 296 L 248, 276 L  246, 244 L 251, 225 M 246, 244 L 225, 249 L 198, 242 M 225, 249 L 223, 285 L 261, 296 M 223, 285 L 207 299 L 188 330\" stroke=\"#fff\" opacity=\".5\" fill=\"none\"/></g>';\n        return buildStar(stars, open, close, show);\n    }\n\n    function Leo(uint8 show) public view returns (string memory) {\n        string[] memory stars = new string[](9);\n\n        string\n            memory open = '<g transform=\"translate(254,-114), rotate(0)\" fill=\"#fff\" opacity=\"0.8\">';\n        stars[0] = '<circle r=\"2\" cx=\"136\" cy=\"276 \"/>';\n        stars[1] = '<circle r=\"2\" cx=\"120\" cy=\"264 \"/>';\n        stars[2] = '<circle r=\"2\" cx=\"108\" cy=\"224 \"/>';\n        stars[3] = '<circle r=\"2\" cx=\"102\" cy=\"265 \"/>';\n        stars[4] = '<circle r=\"2\" cx=\"94\" cy=\"226 \"/>';\n        stars[5] = '<circle r=\"2\" cx=\"92\" cy=\"253 \"/>';\n        stars[6] = '<circle r=\"2\" cx=\"80\" cy=\"324 \"/>';\n        stars[7] = '<circle r=\"2\" cx=\"64\" cy=\"307 \"/>';\n        stars[8] = '<circle r=\"2\" cx=\"61\" cy=\"344 \"/>';\n        string\n            memory close = '<path d=\"m108,224 L 94, 226 L 92, 253 L 102, 265 L 120 264 L  136 276 L 80 324 L 61 344L 64 307 L 102 265 M 80 324 L 120 264\" stroke=\"#fff\" opacity=\".5\" fill=\"none\"/></g>';\n        return buildStar(stars, open, close, show);\n    }\n\n    function Cancer(uint8 show) public view returns (string memory) {\n        string[] memory stars = new string[](5);\n\n        string\n            memory open = '<g transform=\"translate(-106,50), rotate(0)\" fill=\"#fff\" opacity=\"0.8\">';\n        stars[0] = '<circle r=\"2\" cx=\"491\" cy=\"143 \"/>';\n        stars[1] = '<circle r=\"2\" cx=\"443\" cy=\"123 \"/>';\n        stars[2] = '<circle r=\"2\" cx=\"440\" cy=\"157 \"/>';\n        stars[3] = '<circle r=\"2\" cx=\"437\" cy=\"112 \"/>';\n        stars[4] = '<circle r=\"2\" cx=\"418\" cy=\"88 \"/>';\n        string\n            memory close = '<path d=\"m491 143 L 443, 123 L 437 112 L 418 88 M 442 123 L 440 157   \" stroke=\"#fff\" opacity=\".5\" fill=\"none\"/></g>';\n        return buildStar(stars, open, close, show);\n    }\n\n    function Gemini(uint8 show) public view returns (string memory) {\n        string[] memory stars = new string[](13);\n\n        string\n            memory open = '<g transform=\"translate(4,50), rotate(0)\" fill=\"#fff\" opacity=\"0.8\">';\n        stars[0] = '<circle r=\"2\" cx=\"386\" cy=\"116 \"/>';\n        stars[1] = '<circle r=\"2\" cx=\"377\" cy=\"115 \"/>';\n        stars[2] = '<circle r=\"2\" cx=\"374\" cy=\"128 \"/>';\n        stars[3] = '<circle r=\"2\" cx=\"365\" cy=\"144 \"/>';\n        stars[4] = '<circle r=\"2\" cx=\"359\" cy=\"109 \"/>';\n        stars[5] = '<circle r=\"2\" cx=\"359\" cy=\"162 \"/>';\n        stars[6] = '<circle r=\"2\" cx=\"334\" cy=\"132 \"/>';\n        stars[7] = '<circle r=\"2\" cx=\"324\" cy=\"89 \"/>';\n        stars[8] = '<circle r=\"2\" cx=\"319\" cy=\"125 \"/>';\n        stars[9] = '<circle r=\"2\" cx=\"315\" cy=\"87 \"/>';\n        stars[10] = '<circle r=\"2\" cx=\"306\" cy=\"86 \"/>';\n        stars[11] = '<circle r=\"2\" cx=\"297\" cy=\"116 \"/>';\n        stars[12] = '<circle r=\"2\" cx=\"295\" cy=\"106 \"/>';\n        string\n            memory close = '<path d=\"m386 , 116 L 377, 115 L 374, 128 L 365, 144 L 334, 132 L  319, 125 L 297 116 L 295 106 L 306 86 L 315 87 L 324 89 L 359 109 L 377 115 M 365 144 L 359 162\" stroke=\"#fff\" opacity=\".5\" fill=\"none\"/></g>';\n        return buildStar(stars, open, close, show);\n    }\n\n    function Taurus(uint8 show) public view returns (string memory) {\n        string[] memory stars = new string[](12);\n\n        string\n            memory open = '<g transform=\"translate(194,80), rotate(0) scale(0.7)\" fill=\"#fff\" opacity=\"0.8\">';\n        stars[0] = '<circle r=\"2.86\" cx=\"262\" cy=\"184 \"/>';\n        stars[1] = '<circle r=\"2.86\" cx=\"259\" cy=\"175 \"/>';\n        stars[2] = '<circle r=\"2.86\" cx=\"228\" cy=\"154 \"/>';\n        stars[3] = '<circle r=\"2.86\" cx=\"214\" cy=\"139 \"/>';\n        stars[4] = '<circle r=\"2.86\" cx=\"214\" cy=\"129 \"/>';\n        stars[5] = '<circle r=\"2.86\" cx=\"210\" cy=\"127 \"/>';\n        stars[6] = '<circle r=\"2.86\" cx=\"210\" cy=\"121 \"/>';\n        stars[7] = '<circle r=\"2.86\" cx=\"207\" cy=\"135 \"/>';\n        stars[8] = '<circle r=\"2.86\" cx=\"203\" cy=\"100 \"/>';\n        stars[9] = '<circle r=\"2.86\" cx=\"201\" cy=\"131 \"/>';\n        stars[10] = '<circle r=\"2.86\" cx=\"184\" cy=\"67 \"/>';\n        stars[11] = '<circle r=\"2.86\" cx=\"164\" cy=\"93 \"/>';\n        string\n            memory close = '<path d=\"m262 184 L 259 175 L 228 154 L 214 139 L 214 129 L 210 127 L 210 121 L 203 100 L 184 67 M 214 139 L 207 135 L 201 131 L 164 93\" stroke=\"#fff\" opacity=\".5\" fill=\"none\" stroke-width=\"1.43\"/></g>';\n        return buildStar(stars, open, close, show);\n    }\n\n    function Pegasus(uint8 show) public view returns (string memory) {\n        string[] memory stars = new string[](12);\n\n        string\n            memory open = '<g transform=\"translate(322 150)\" fill=\"#fff\" opacity=\"0.8\">';\n\n        stars[0] = '<circle cx=\"-13\" r=\"2\"/>';\n        stars[1] = '<circle cx=\"22\" cy=\"6\" r=\"2\"/>';\n        stars[2] = '<circle cx=\"34\" cy=\"1\" r=\"2\"/>';\n        stars[3] = '<circle cx=\"51\" cy=\"-7\" r=\"2\"/>';\n        stars[4] = '<circle cx=\"-21\" cy=\"35\" r=\"2\"/>';\n        stars[5] = '<circle cx=\"20\" cy=\"38\" r=\"2\"/>';\n        stars[6] = '<circle cx=\"35\" cy=\"50\" r=\"2\"/>';\n        stars[7] = '<circle cx=\"54\" cy=\"60\" r=\"2\"/>';\n        stars[8] = '<circle cx=\"70\" cy=\"50\" r=\"2\"/>';\n        stars[9] = '<circle cx=\"31\" cy=\"18\" r=\"2\"/>';\n        stars[10] = '<circle cx=\"54\" cy=\"13\" r=\"2\"/>';\n        stars[11] = '<circle cx=\"66\" cy=\"12\" r=\"2\"/>';\n        string\n            memory close = '<path d=\"M70 50 54 60 35 50 20 38l-41-3 8-35 35 6-2 32m46-26-12 1-23 5-9-12 12-5 17-8\" fill=\"none\" stroke=\"#fff\" opacity=\".5\"/></g>';\n\n        return buildStar(stars, open, close, show);\n    }\n\n    function UrsaMinor(uint8 show) public view returns (string memory) {\n        string[] memory stars = new string[](7);\n\n        string\n            memory open = '<g transform=\"translate(320,130), rotate(-30)\" fill=\"#fff\" opacity=\"0.8\">';\n        stars[0] = '<circle cx=\"0\" cy=\"00\" r=\"2\" />';\n        stars[1] = '<circle cx=\"-6\" cy=\"20\" r=\"2\" />';\n        stars[2] = '<circle cx=\"-9\" cy=\"40\" r=\"2\" />';\n        stars[3] = '<circle cx=\"-3\" cy=\"60\" r=\"2\" />';\n        stars[4] = '<circle cx=\"-18\" cy=\"70\" r=\"2\"/>';\n        stars[5] = '<circle cx=\"-12\" cy=\"92\" r=\"2\"/>';\n        stars[6] = '<circle cx=\"8\" cy=\"91\" r=\"2\" />';\n        string\n            memory close = '<path d=\"m 0 00 L -6 20 L -9 40 L -3 60 L -18 70 L -12 92 L 8 91 L -3 60\" fill=\"none\" stroke=\"white\" opacity=\".5\"/></g>';\n        return buildStar(stars, open, close, show);\n    }\n\n    function Cygnus(uint8 show) public view returns (string memory) {\n        string[] memory stars = new string[](6);\n        string\n            memory open = '<g transform=\"translate(134, -70) scale(3)\" fill=\"#fff\" opacity=\"0.8\">';\n        stars[0] = '<circle r=\"0.66\" cx=\"87.000\" cy=\"76.000\"/>';\n        stars[1] = '<circle r=\"0.66\" cx=\"72.000\" cy=\"76.000\"/>';\n        stars[2] = '<circle r=\"0.66\" cx=\"62.000\" cy=\"93.000\"/>';\n        stars[3] = '<circle r=\"0.66\" cx=\"61.000\" cy=\"64.000\"/>';\n        stars[4] = '<circle r=\"0.66\" cx=\"59.000\" cy=\"80.000\"/>';\n        stars[5] = '<circle r=\"0.66\" cx=\"49.000\" cy=\"79.000\"/>';\n        string\n            memory close = '<path d=\"m87 76 L 72 76 L 59 80 L 49 79 M 62 93 L 59 80 L 61 64\" stroke-width=\"0.333\" fill=\"none\" stroke=\"#fff\" opacity=\".5\"/></g>';\n        return buildStar(stars, open, close, show);\n    }\n}\n"
    },
    "contracts/chainellations/Decorations.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../interfaces/IDeco.sol\";\nimport \"../interfaces/IDecorations.sol\";\nimport \"./Constellations.sol\";\n\ncontract Decorations is Ownable, IDecorations {\n    struct Decoration {\n        address silhouette;\n        address skyMath;\n        address decorationOne;\n        address focus;\n    }\n    uint8 public constant SILHOUTTE = 1;\n    uint8 public constant SKY_MATH = 2;\n    uint8 public constant DECORATION_ONE = 3;\n    uint8 public constant FOCUS = 4;\n\n    address private _chainellation;\n\n    mapping(address => uint8) private _slot;\n    address[] public allDecorations;\n\n    mapping(uint256 => Decoration) private _decorations;\n\n    constructor(address chainellation) {\n        _chainellation = chainellation;\n    }\n\n    function getAllDecorations() public view returns (address[] memory) {\n        return allDecorations;\n    }\n\n    function getAvailableDecorations(\n        address user\n    ) public view returns (address[] memory, uint256[] memory) {\n        address[] memory availableDecorations = new address[](\n            allDecorations.length\n        );\n        uint256[] memory ids = new uint256[](allDecorations.length);\n        for (uint8 i = 0; i < allDecorations.length; i++) {\n            if (IDeco(allDecorations[i]).balanceOf(user) > 0) {\n                availableDecorations[i] = allDecorations[i];\n                ids[i] = _slot[allDecorations[i]];\n                i++;\n            }\n        }\n        return (availableDecorations, ids);\n    }\n\n    function register(address _deco, uint8 spot) public onlyOwner {\n        if (_slot[_deco] != 0) revert AlreadyRegistered();\n\n        _slot[_deco] = spot;\n        allDecorations.push(_deco);\n    }\n\n    function unregister(address _deco) public onlyOwner {\n        _slot[_deco] = 0;\n\n        uint256 index = 0;\n\n        for (uint i = index; i < allDecorations.length - 1; i++) {\n            if (allDecorations[i] == _deco) {\n                index = i;\n                break;\n            }\n        }\n\n        for (uint i = index; i < allDecorations.length - 1; i++) {\n            allDecorations[i] = allDecorations[i + 1];\n        }\n        delete allDecorations[allDecorations.length - 1];\n        allDecorations.pop();\n    }\n\n    function reset() public onlyOwner {\n        for (uint i = 0; i < allDecorations.length; i++) {\n            _slot[allDecorations[i]] = 0;\n        }\n        delete allDecorations;\n    }\n\n    function setDecorationBatch(\n        uint256 tokenId,\n        uint8[] memory decoTypes,\n        address[] memory decos,\n        uint256[] memory decoIds\n    ) public {\n        for (uint256 i = 0; i < decoIds.length; i++) {\n            setDecoration(tokenId, decoTypes[i], decos[i], decoIds[i]);\n        }\n    }\n\n    function setDecoration(\n        uint256 tokenId,\n        uint8 decoType,\n        address deco,\n        uint256 decoId\n    ) public {\n        if (IDeco(_chainellation).ownerOf(tokenId) != msg.sender)\n            revert NotOwner();\n\n        if (IDeco(deco).ownerOf(decoId) != msg.sender) revert NotOwner();\n\n        //check if deco is registered\n        if (_slot[deco] != decoType) revert InvalidDecoType();\n\n        // set NFT to be souldbound\n        IDeco(deco).soulbind(decoId);\n\n        if (decoType == SILHOUTTE) {\n            _decorations[tokenId].silhouette = deco;\n        } else if (decoType == SKY_MATH) {\n            _decorations[tokenId].skyMath = deco;\n        } else if (decoType == DECORATION_ONE) {\n            _decorations[tokenId].decorationOne = deco;\n        } else if (decoType == FOCUS) {\n            _decorations[tokenId].focus = deco;\n        } else {\n            revert InvalidDecoType();\n        }\n    }\n\n    function getFocus(\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime\n    ) public view returns (string memory) {\n        if (_decorations[dna.tokenId].focus == address(0)) {\n            uint8 starCount;\n\n            if (starCount > 30) {\n                starCount = 30;\n            } else {\n                starCount = (uint8)(gazes);\n            }\n\n            return\n                string.concat(\n                    '<g id=\"focus\">',\n                    Constellations.getConstellation(\n                        dna.constellationSeed,\n                        starCount\n                    ),\n                    \"</g>\"\n                );\n        }\n        return\n            IDeco(_decorations[dna.tokenId].focus).getDeco(\n                dna.tokenId,\n                dna,\n                gazes,\n                daytime\n            );\n    }\n\n    function getSilhouette(\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime\n    ) public view returns (string memory) {\n        if (_decorations[dna.tokenId].silhouette == address(0)) {\n            return '<g id=\"silhouette\"></g>';\n        }\n        return\n            IDeco(_decorations[dna.tokenId].silhouette).getDeco(\n                dna.tokenId,\n                dna,\n                gazes,\n                daytime\n            );\n    }\n\n    function getSkyMath(\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime\n    ) public view returns (string memory) {\n        if (_decorations[dna.tokenId].skyMath == address(0)) {\n            return '<g id=\"skymath\"></g>';\n        }\n        return\n            IDeco(_decorations[dna.tokenId].skyMath).getDeco(\n                dna.tokenId,\n                dna,\n                gazes,\n                daytime\n            );\n    }\n\n    function getDecorationOne(\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime\n    ) public view returns (string memory) {\n        if (_decorations[dna.tokenId].decorationOne == address(0)) {\n            return '<g id=\"deco\"></g>';\n        }\n        return\n            IDeco(_decorations[dna.tokenId].decorationOne).getDeco(\n                dna.tokenId,\n                dna,\n                gazes,\n                daytime\n            );\n    }\n\n    function withdraw() external onlyOwner {\n        payable(address(_msgSender())).transfer(address(this).balance);\n    }\n\n    function withdrawToken(\n        address _tokenContract,\n        uint256 _amount\n    ) external onlyOwner {\n        IERC20(_tokenContract).transfer(msg.sender, _amount);\n    }\n\n    error AlreadyRegistered();\n    error NotOwner();\n    error InvalidDecoType();\n}\n\ninterface IERC20 {\n    function transfer(address _to, uint256 _amount) external returns (bool);\n}\n"
    },
    "contracts/chainellations/decos/Cat.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"../../interfaces/IDeco.sol\";\n\ncontract Cat is ERC721Enumerable, IDeco, Ownable {\n    using Strings for uint256;\n    using Counters for Counters.Counter;\n\n    Counters.Counter private _tokenIds;\n\n    uint256 public maxSupply = 500;\n    uint256 public mintCost = 0; //5 * 10 ** 16;\n\n    constructor() ERC721(\"Sky Cat\", \"SkyCat\") {}\n\n    function mint() public payable {\n        if (msg.value < mintCost) revert Cost();\n\n        _tokenIds.increment();\n        if (_tokenIds.current() >= maxSupply) revert MaxSupplyReached();\n        uint256 newItemId = _tokenIds.current();\n        _safeMint(msg.sender, newItemId);\n    }\n\n    function getMetadata(\n        uint256 tokenId\n    ) public view override returns (string memory) {\n        return\n            string.concat(\n                '\"name\": \"Two Moons Sky Cat #',\n                tokenId.toString(),\n                '\",',\n                '\"description\": \"Two Moons Sky Cat Silhoutte\"'\n            );\n    }\n\n    function getDeco(\n        uint256 tokenId,\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime\n    ) public pure override returns (string memory) {\n        return\n            string.concat(\n                \"<g>\",\n                '<svg id=\"silhouette\" version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 1279 1280\"><path d=\"M886 .6c-1.4.2-5.9.9-10 1.5-23.9 3.3-51.7 14.7-77.6 31.7-25.3 16.7-44.3 32.5-81.9 68.2-28.9 27.4-40.7 37.8-54.2 47.9-51.9 38.6-125.7 65.8-244.3 90.1l-15.6 3.2-8.9-5.8c-55.3-35.7-113.1-62-176.7-80.4-19.5-5.7-47.7-12.2-62.8-14.6-12.5-1.9-37.8-2.2-47-.5-39.6 7.3-61 34.4-66 83.6-1.7 15.8-.8 48.9 2 75.5 9.4 91.7 29.1 173.2 62.5 259.5 13 33.6 15.5 42.8 15.5 56.8-.1 13.3-4.7 23.8-16.7 37.8-2.6 3.1-11.7 12.9-20 21.8-8.4 8.9-19.3 21.6-24.2 28.1-32.7 43.4-51.5 95.7-58.3 162-1.7 16.4-1.7 71.3 0 89.5 4.1 44.6 10.2 80.7 22.8 136 7.5 32.5 8.2 36.3 10 49 1.8 13 4.6 19.7 10.3 25.1 3.3 3.2 13.9 8.9 14.8 8 .2-.1-1.5-5.6-3.7-12.2-33.1-98.1-46.7-219.3-34.5-306.9 6.3-44.9 18-79.4 36.4-106.6 8.4-12.5 15.5-20.6 24.9-28.3 41.7-34 95.8-35.2 159.2-3.5 73.1 36.6 122.9 92.7 136.5 153.9 2.6 11.8 3.1 37.5 1 50.1-8.1 48.4-40.4 84.7-86.3 97.1-12.1 3.3-37.3 3.7-52 .9-45.8-8.8-85.8-40.9-106.8-85.7-2.5-5.5-6.2-13.1-8-17.1-6.4-13.5-17-19.4-22.4-12.5-5 6.2-.4 27.2 10.6 48.2 8.3 16 17.4 28 32.4 43.1 22.8 22.9 45.7 35.9 75.5 42.7 13.8 3.2 25.9 4.2 64.5 5.2 37.4 1 45.9 1.9 60.3 6.5 11.5 3.7 21.8 8.7 32.6 15.9 13.3 8.9 22.2 16.5 47.6 40.6 25.1 23.8 34.3 31.7 46.9 40.2 11.8 7.9 21.9 12.9 34.7 17.1 9.4 3.2 18.8 5.2 60.9 13.2 40.4 7.8 62.6 19.6 77.5 41.4l4.6 6.8-2.5 8.9c-6.7 24.1-9.7 38.3-8.7 40.3 1.2 2.2 10.7 6.1 15.1 6.1 5.8 0 6.6-1.7 13-27.3 8.6-35 11.8-43.7 20.6-56.8 11-16.4 21-28.7 34.8-42.5 39.4-39.2 88.2-64.6 136.3-70.9 61.1-8 117.5 20.1 148.2 74 13.2 23.2 19.6 48.2 18.9 74.3l-.3 13.2 3 1.2c9.6 4 22.1-2.7 26.1-13.9 1.8-5.2 1.7-20.9-.2-31.8-4.7-27.2-22.3-63.8-43.1-89.5-6.1-7.5-22.1-23.5-32-32l-5.3-4.5 23.6-41.5c70.7-124.5 76.9-134.7 86.4-143.3 9.4-8.5 21.9-10.9 33.7-6.5 7.8 2.8 18.5 13.6 23.1 22.9 9.6 19.7 8.2 36.5-6.3 76.7-11.6 32.5-14.1 46-13.2 72 .8 25.7 6.1 47.1 17.7 71.1 14.9 30.7 35.9 55.2 62.8 73.2 12.3 8.3 23.5 13.7 37.9 18.5 18 6.1 27.2 4.8 33.8-4.5l3-4.3-.2-23.6c-.4-65.9-16.8-134.8-47.2-197.7-10.3-21.3-19-36.5-32.6-57-13.8-20.7-24.3-34.2-45.6-58.5-19.5-22.3-27.5-33.3-34-46.5-6.6-13.6-8.9-23.7-8.9-39.5 0-16 1.6-25.3 9.4-56.3 10.4-40.7 14.1-63.3 15.5-93.9 2.2-50.1-5-96-23.9-151-3.3-9.7-12.8-34.6-21.1-55.5-36.4-91.3-41.1-111.2-45.4-193.3-2.4-47.2-4.3-68.4-7.6-88-7.9-47.1-25.1-84.2-50.8-110.1-18.5-18.5-37.7-29.2-62.3-34.5-7-1.5-32.6-2.7-37.8-1.8zm31 38.9c41.8 15.4 76.4 68.4 90.9 139.1 10.8 52.8 8.5 103.8-6.9 148.8-3.3 9.9-3.8 15.6-1.5 20 .8 1.5 5.7 8.5 10.9 15.5 56.4 76.2 74.2 120.3 85 211.1 6.1 51.1 5.4 96-2.5 153-4.5 32.5-13.5 70.4-19.5 82.1-.7 1.5-5 13.4-9.5 26.5-4.4 13.1-10.3 28.8-13 34.9-19.4 43.3-50 79.7-94.2 111.8-23.4 17.1-44.7 29.1-88.3 49.8-104.9 49.8-148 64.9-199.8 70-17.5 1.7-56.4.6-73.6-2-37-5.8-79.2-18.1-124.5-36.3-45.8-18.4-92.9-41.9-97.1-48.3-2.4-3.7-1.1-6.7 5.5-12.4 3.3-2.9 8.3-8.4 11.2-12.4s7.3-9.9 9.7-13.2c5.4-7.2 10.5-17.8 12.7-26 2.3-8.4 3-29.1 1.6-41.1-1.8-14.1-5.4-30.5-11.6-52.6-12.2-43.9-21.8-64.8-38.6-84.8-3-3.6-7.7-9.4-10.4-13-2.8-3.6-7.8-9.6-11.2-13.3-9.6-10.5-9.6-12.6.1-23.8 3.5-4.1 10-11.6 14.5-16.8 21.9-25.4 38.9-51.4 67.5-103.4 27.7-50.2 37.6-87 44.5-165.2 4-44.4 3.7-63.1-1.3-82.9-4.4-17.2-16.3-43.8-24.2-54.2-4.9-6.4-6.4-9.8-6.4-14.9 0-4.1.5-5.1 4.5-9.4 9.5-10.2 27.6-16.8 81.5-29.9 38-9.3 89.8-17.7 117.5-19.1 10.2-.5 15-1.2 17.7-2.5 6.8-3.3 18.8-17.2 32.3-37.4 7.1-10.6 16.5-23.7 20.9-29 10.4-12.5 38.1-40.7 50.8-52 36-31.6 88.1-62.1 117.5-68.6 10.9-2.5 27.9-1.6 37.3 1.9zm-761.8 208c12.8 2.2 26 6.9 39.8 14.2 43.9 23.1 63.4 45.4 69 79.3 3.2 18.8-3 38.5-18.4 59-12.3 16.4-42.2 42.6-56.6 49.7-17.3 8.5-30.3 1-47.2-27.3-14.6-24.5-25.5-48.4-32.2-70.7-4.4-14.5-12.2-49.2-13.6-60.1-2.9-23.3 8-40.6 28-44.5 7.2-1.4 22-1.2 31.2.4z\"/><path d=\"M885.1 97.1c-7.1 1.2-21.6 6.1-28.8 9.8-25.9 13.1-53.5 39.1-76.6 72.4-13.7 19.6-18.7 30.8-18.7 41.9 0 13.2 6.9 20.6 27.5 29.3 5 2.1 25.2 11.9 44.9 21.8 19.8 9.8 38.7 19 42 20.2 17.7 6.6 34.2 7.2 46.1 1.7 22.1-10.4 33.6-41.4 32.2-87.2-.6-19-2.1-29.4-8.6-58.5-4.4-19.6-5.5-23.5-9.6-31.4-8.5-16.8-26.5-23.9-50.4-20zm6.4 34.2c6.4 6.7 10.1 18.2 17.9 54.7 4.7 22.3 6.7 39.3 6.9 58.6.2 14.6 0 16.4-1.7 18.3-3.7 4.1-11.4 2.4-33.5-7-21-9-38.2-19.3-57.6-34.4-16.3-12.7-19.4-18.8-14.2-28.4 3.7-7 25.6-35 35-44.8 13.8-14.3 26-21.2 37.6-21.3 5.1 0 5.7.3 9.6 4.3zm-1.9 441.2c-3.3 1.3-11 5.8-17 9.8-6.1 4.1-15 10-19.7 13.1-9.8 6.3-18.5 15.2-22 22.3-3.5 7.2-3.8 17.4-.7 23.2 3.6 6.8 8.7 10.3 15.3 10.9 5.3.4 5.7.3 8.9-3.2 2.3-2.4 4.8-7.2 7.6-14.3 6.9-18 11.9-24 26-30.6 11.3-5.4 17.7-4.2 29.4 5.5 3.2 2.7 7.3 5.6 9 6.6 4.2 2.2 14.1 2.2 18.4-.1 6.9-3.7 9.2-12.9 5.3-20.6-3-5.8-12.3-13.7-21.5-18.1-15.6-7.5-28.2-9-39-4.5zm110.9 96c-13.3 2.3-45.5 12.9-56.7 18.6-4.7 2.4-7.8 6.4-7.8 10.1 0 3.9 3.2 10 7 13.2 5.1 4.2 9.9 3.6 23.3-2.9 9.8-4.8 12.6-5.7 22.2-7.1 8.6-1.2 12.6-2.4 18.4-5.2 8.5-4.3 9.2-5.5 9.5-15.9.1-6-.2-7.5-1.9-9.1-2.8-2.8-6-3.1-14-1.7zM496 693.6c-1.4.2-5.2.9-8.5 1.5-14.3 2.5-28.9 13.1-38.9 28.2-14.6 22.2-15.7 30.9-4.6 38.4 4.4 3.1 10.6 3 15.1 0 2.1-1.4 4.9-5 7.4-9.7 5.2-9.7 18.6-23.6 26.6-27.4 11.5-5.5 21.6-5.3 37.9.9 10.9 4.1 16 4.4 22.1 1.2 8.4-4.5 9-10.9 1.8-19.1-6.1-7-11.3-9.1-28.9-12-9.3-1.6-26.1-2.7-30-2zm508.5 35.1c-33.2 9-33.6 9.2-37.1 12.8-3.4 3.7-4.9 8.7-3.4 11.5.5 1 2.4 2.3 4.1 2.9 5.8 2 11.4 1.3 22.6-3 9.9-3.8 11.7-4.1 22.3-4.5 14.6-.5 24.4-2.1 26.3-4.2 4-4.5 3.2-12.5-1.8-17.7-2.9-3.1-3.8-3.5-8.1-3.4-2.7.1-13.9 2.6-24.9 5.6zm-278.2 3.8c-26.1 4.7-49.3 19.5-62.3 39.6-6.3 9.8-7.7 18.6-4.1 26.4 4.2 9 13.2 14.2 31.8 18.1 26.7 5.6 31.6 7.4 33.2 11.7 1.9 4.9 6.2 38.9 6.2 49 0 9.6-.4 11.7-3.7 21.7-5.8 17.6-12.3 25.8-24.6 31.5-19.3 8.8-43.3 2.8-63.6-15.9-5.1-4.6-10.8-9-12.7-9.6-5.3-1.8-9.8.8-13.1 7.6-2.3 4.8-2.6 6.3-2.2 12.4.8 11.3 7.2 19.6 20.3 26.2 15.8 8.1 32.7 11.3 54.4 10.5 28.6-1 43.1-8.3 52.3-26 7.7-14.8 15.9-23.6 24.2-25.8 3.6-1 4.9-.9 10.6 1.2 5.9 2.2 8.4 2.4 26 2.7 10.7.2 25.3-.1 32.4-.7 15.6-1.3 20.4-3.2 29.5-11.7 3.5-3.2 10.7-9.5 15.9-13.9 12.7-10.6 13.8-12.8 16.4-33.1 1.2-9.2 1.7-17.5 1.3-20.1-.8-5.5-5.1-10.6-10.3-12.1-5.3-1.6-15.5-1.5-19.5.2-6.2 2.6-7 4.5-7.8 17.9-.9 13.6-3.7 26.2-7 30.9-3 4.2-10.1 8.5-18.4 11.1-8.9 2.8-26.6 3-36.5.4-15.1-4-27.1-12.8-30.4-22.2-.8-2.6-2-9.3-2.7-14.9-2.1-18.9 1-31.7 12.9-53.4 11.6-20.9 13.5-25.5 14-34.1.3-7.1.2-7.9-2.6-12.3-5.8-9-22.6-14.8-42.2-14.7-5.8 0-13.7.7-17.7 1.4zm256.5 73.6c-4.4 1.3-8.8 6-8.8 9.5 0 4 2.5 8.8 6.1 11.8 3.2 2.7 3.6 2.8 9.9 2 14.2-1.8 18-1.2 28.2 3.9s14 5.7 19.3 3.1c4.3-2 13.5-11.7 13.5-14.2 0-5.6-9.9-11.1-25.7-14.3-11.5-2.3-36.9-3.4-42.5-1.8zm-497.3 13c-17.1 5.9-38.4 18.8-47.8 28.9-5.6 6-8.6 12.3-7.4 15.4 1.1 2.9 5.7 3.9 11.4 2.8 6.8-1.4 50.5-19.6 56.6-23.6 6.8-4.5 7.6-16.8 1.5-23.4-2.7-2.8-6.4-2.8-14.3-.1zm-2.5 63.6c-1.4.2-6 1.5-10.2 2.9-19.5 6.4-34 22.5-30.8 34.3 1.4 5.2 6.2 10.8 10.1 11.6 4.3 1 12.5-3.3 18.5-9.6 2.7-2.8 5.8-5.6 6.9-6.2 1.2-.6 7.1-1.1 14-1.2 10.4 0 12.6-.4 16.2-2.3 7-3.7 8.8-9.3 5.4-16.7-4.6-10.2-16.2-15.1-30.1-12.8zm12.5 64.2c-4.6 2.1-10.6 7.7-22.7 21.5-11.7 13.1-13.2 19.1-6.6 25.6 8.9 8.9 26.1 4.1 35.4-10 3.5-5.2 6.1-6.7 14.4-8.5 13.9-2.9 18-6.2 18-14.6 0-5.7-1.8-8-8.5-10.9-4.7-2-18.8-5-23.4-5-1.4 0-4.4.9-6.6 1.9zM300.3 832.5c-3.4 1.5-3.7 2.3-3.3 9.5.5 9.4 7.1 21.2 18 32 8.6 8.7 15.3 12.5 20.1 11.5 4.2-.9 9.5-5.9 10.9-10 1.5-4.6.3-8.3-5.9-17.7-9.5-14.5-18.2-22-29-25.2-6.5-1.9-6.7-1.9-10.8-.1zm-66.2 28.1c-1.3.9-2.9 3.2-3.7 5-2.5 6-1.9 7.8 4.7 13.6 7 6 9.9 10.6 13.3 20.5 4.5 13.1 8.1 15.9 18.8 14.7 8.3-.9 10.2-2.9 9.5-9.8-1-9.4-5.3-18.9-11.8-26-9.8-10.7-22.2-19.6-27.1-19.6-.8 0-2.4.7-3.7 1.6zm-65.7 31.9c-2.6 4-1.4 10.4 3.4 17.7 5.6 8.7 8.7 15.7 11.6 26.7 1.4 5.2 3.3 10.2 4.1 11 1 1 3.3 1.6 6.1 1.6 4 0 5-.5 7.9-3.6 8.3-9.1 3.8-29-10-43.8-10.8-11.5-19.5-15.1-23.1-9.6z\"/></svg>',\n                \"</g>\"\n            );\n    }\n\n    error Cost();\n    error MaxSupplyReached();\n\n    function setMaxSupply(uint256 _maxSupply) public onlyOwner {\n        maxSupply = _maxSupply;\n    }\n\n    function setMintCost(uint256 _newMintCost) public onlyOwner {\n        mintCost = _newMintCost;\n    }\n\n    function currentSupply() public view returns (uint256) {\n        return _tokenIds.current();\n    }\n\n    // ----------------------------------------- overrides\n\n    function ownerOf(\n        uint256 tokenId\n    ) public view override(IERC721, ERC721, IDeco) returns (address owner) {\n        return ERC721.ownerOf(tokenId);\n    }\n\n    function balanceOf(\n        address owner\n    ) public view override(IERC721, ERC721, IDeco) returns (uint256) {\n        return ERC721.balanceOf(owner);\n    }\n\n    function tokenURI(\n        uint256 tokenId\n    ) public view override(ERC721, IDeco) returns (string memory) {\n        return IDeco.tokenURI(tokenId);\n    }\n\n    // ----------------------------------------- soulbound\n\n    function approve(\n        address to,\n        uint256 tokenId\n    ) public override(IERC721, ERC721) {\n        if (soulbound[tokenId]) revert SoulBound();\n        ERC721.approve(to, tokenId);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal override {\n        if (soulbound[firstTokenId]) revert SoulBound();\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\n    }\n}\n"
    },
    "contracts/chainellations/decos/Empty_Deco.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"../../interfaces/IDeco.sol\";\n\ncontract Empty_Deco is IDeco {\n    function getMetadata(\n        uint256 tokenId\n    ) public view override returns (string memory) {\n        return\n            string.concat(\n                '\"name\": \"Two Moons Empty Decoration\", ',\n                '\"description\": \"Two Moons Empty Decoration\"'\n            );\n    }\n\n    function getDeco(\n        uint256 tokenId,\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime\n    ) public pure override returns (string memory) {\n        return string.concat('<g id=\"deco\">', \"</g>\");\n    }\n}\n"
    },
    "contracts/chainellations/decos/Empty_Silhouette.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"../../interfaces/IDeco.sol\";\n\ncontract Empty_Silhouette is IDeco {\n    function getMetadata(\n        uint256 tokenId\n    ) public view override returns (string memory) {\n        return\n            string.concat(\n                '\"name\": \"Two Moons Empty Silhouette\", ',\n                '\"description\": \"Two Moons Empty Silhouette\"'\n            );\n    }\n\n    function getDeco(\n        uint256 tokenId,\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime\n    ) public pure override returns (string memory) {\n        return string.concat('<g id=\"silhouette\">', \"</g>\");\n    }\n}\n"
    },
    "contracts/chainellations/decos/Empty_SkyMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"../../interfaces/IDeco.sol\";\n\ncontract Empty_SkyMath is IDeco {\n    function getMetadata(\n        uint256 tokenId\n    ) public view override returns (string memory) {\n        return\n            string.concat(\n                '\"name\": \"Two Moons Empty Skymath\", ',\n                '\"description\": \"Two Moons Empty Skymath\"'\n            );\n    }\n\n    function getDeco(\n        uint256 tokenId,\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime\n    ) public pure override returns (string memory) {\n        return string.concat('<g id=\"skymath\">', \"</g>\");\n    }\n}\n"
    },
    "contracts/chainellations/decos/MountainLine.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"../../interfaces/IDeco.sol\";\n\ncontract MountainLine is IDeco {\n    using Strings for uint256;\n\n    function getMetadata(\n        uint256 tokenId\n    ) public view override returns (string memory) {\n        return\n            string.concat(\n                '\"name\": \"chainellation Mountains #',\n                tokenId.toString(),\n                '\",',\n                '\"description\": \"A mountline Silhouette for your Two Moons Night Sky\"'\n            );\n    }\n\n    function getDeco(\n        uint256 tokenId,\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime\n    ) public pure override returns (string memory) {\n        return\n            string.concat(\n                '<g id=\"silhouette\">',\n                '<filter id=\"g\"><feDropShadow dy=\"-5\" stdDeviation=\"5\" flood-color=\"#fff\" flood-opacity=\".1\"/></filter>',\n                buildMountains(\n                    dna.groundSeed,\n                    Color.HSL(dna.primaryHue, 100, 30)\n                ),\n                \"</g>\"\n            );\n    }\n\n    function buildMountains(\n        uint256 groundSeed,\n        Color.HSL memory primary\n    ) public pure returns (string memory) {\n        Color.HSL memory background = primary;\n\n        string memory mountains = \"\";\n        uint16 baseS = 50;\n        uint16 baseL = 20; //24;\n\n        background.S = baseS;\n        background.L = baseL;\n\n        for (uint16 i = 1; i < 4; i++) {\n            background.L = Color.subZero(baseL, (5 * (i + 1)));\n\n            mountains = string.concat(\n                mountains,\n                getSingleMountain(\n                    groundSeed,\n                    i,\n                    270 + Color.wiggleUp(groundSeed, i, (i * 50), 20),\n                    background\n                )\n            );\n        }\n        background.L = 0;\n\n        return mountains;\n    }\n\n    function getSingleMountain(\n        uint256 groundSeed,\n        uint16 nonce,\n        uint16 height,\n        Color.HSL memory background\n    ) public pure returns (string memory) {\n        uint16[] memory xCoords = getXCoordsArray(groundSeed, nonce);\n\n        uint16[] memory yCoords = getYCoords2(\n            groundSeed,\n            nonce,\n            height,\n            xCoords\n        );\n\n        uint16 distance = (uint16)(512 / xCoords[xCoords.length - 1]) + 1;\n\n        string memory land = string.concat(\n            '<path  d=\"M ',\n            Color.toString((xCoords[0]) * distance),\n            \", \",\n            Color.toString(yCoords[0])\n        );\n\n        for (uint16 i = 1; i < xCoords.length; i++) {\n            land = string.concat(\n                land,\n                \" C \",\n                Color.toString(\n                    (xCoords[i - 1] * distance) +\n                        (((xCoords[i] * distance) -\n                            (xCoords[i - 1] * distance)) / 2)\n                ),\n                \", \",\n                Color.toString(yCoords[i] - (distance / 2)),\n                \" \",\n                Color.toString(\n                    (xCoords[i - 1] * distance) +\n                        (((xCoords[i] * distance) -\n                            (xCoords[i - 1] * distance)) / 2)\n                ),\n                \", \",\n                Color.toString(yCoords[i] - (distance / 2)),\n                \" \",\n                Color.toString((xCoords[i] + 0) * distance),\n                \", \",\n                Color.toString(yCoords[i]),\n                \" \"\n            );\n        }\n\n        land = string.concat(\n            land,\n            \" L 512, \",\n            Color.wiggleString(\n                groundSeed,\n                nonce,\n                yCoords[yCoords.length - 1],\n                10\n            )\n        );\n\n        land = string.concat(\n            land,\n            ' L 512, 512 L 0 512 z\" fill=\"',\n            Color.HSLtoString(background),\n            '\" filter=\"url(#g)\"/>'\n        );\n\n        return land;\n    }\n\n    function getXCoordsArray(\n        uint256 groundSeed,\n        uint16 nonce\n    ) public pure returns (uint16[] memory) {\n        uint16 valleyCount = (uint16)(\n            (Color.psuedorandom(groundSeed, nonce) % 20) + 18\n        );\n\n        uint16[] memory valleys = new uint16[](valleyCount);\n        valleys[0] = 0;\n\n        for (uint16 i = 1; i < valleyCount; i++) {\n            valleys[i] =\n                Color.wiggleUp(groundSeed, nonce * i, valleys[i - 1] + 1, 5) +\n                1;\n        }\n\n        return (valleys);\n    }\n\n    function getYCoords2(\n        uint256 groundSeed,\n        uint256 nonce,\n        uint16 height,\n        uint16[] memory inputArray\n    ) public pure returns (uint16[] memory) {\n        uint16[] memory outputArray = new uint16[](inputArray.length);\n\n        uint16 midpoint = Color.wiggle(\n            groundSeed,\n            nonce,\n            (uint16)(inputArray.length / 2),\n            2\n        );\n\n        uint8 groupSize = 0;\n\n        uint16 currentNum = (uint16)(height);\n\n        bool add = true;\n\n        outputArray[0] = height;\n        for (uint16 i = 1; i < inputArray.length; i++) {\n            if (i == midpoint) {\n                outputArray[i] = currentNum + 5;\n            } else {\n                if (i < midpoint) {\n                    add = true;\n                } else if (i > midpoint) {\n                    add = false;\n                }\n\n                if (\n                    i == 0 ||\n                    (inputArray[i] - inputArray[i - 1] < 2) ||\n                    groupSize < 4\n                ) {\n                    outputArray[i] =\n                        Color.wiggle(groundSeed, nonce * i, currentNum, 5) +\n                        3;\n                    groupSize++;\n                } else {\n                    if (add) {\n                        currentNum = currentNum + 10;\n                    } else {\n                        currentNum = currentNum - 10;\n                    }\n\n                    outputArray[i] =\n                        Color.wiggle(groundSeed, nonce * i, currentNum, 7) +\n                        8;\n                    groupSize = 0;\n                }\n            }\n        }\n        return outputArray;\n    }\n}\n"
    },
    "contracts/chainellations/decos/SkyCircle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"../../interfaces/IDeco.sol\";\n\ncontract SkyCircle is IDeco {\n    using Strings for uint256;\n\n    function getMetadata(\n        uint256 tokenId\n    ) public view override returns (string memory) {\n        return\n            string.concat(\n                '\"name\": \"Two Moons Sky Math #',\n                tokenId.toString(),\n                '\",',\n                '\"description\": \"A mathematical anomaly for your Two Moons Night Sky\"'\n            );\n    }\n\n    function getDeco(\n        uint256 tokenId,\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime\n    ) public pure override returns (string memory) {\n        return string.concat(\"<g>\", getCircles(gazes), \"</g>\");\n    }\n\n    function getCircles(uint256 gazes) public pure returns (string memory) {\n        string memory math = string.concat(\n            '<g id=\"skymath\" opacity=\"1\" fill=\"none\" stroke=\"white\" stroke-width=\"1\">',\n            '<circle r=\"80\" cx=\"340\" cy=\"170\" stroke-dasharray=\"0 1 0\" opacity=\"0.8\" />',\n            '<circle r=\"85\" cx=\"340\" cy=\"170\" stroke-dasharray=\"1 0 1\" opacity=\"0.8\" />',\n            '<circle r=\"90\" cx=\"340\" cy=\"170\" stroke-dasharray=\"0 1 0\" opacity=\"0.8\" />'\n        );\n\n        // This is where we set how many stargazes are required to add a circle\n        uint8 unlocked = (uint8)(gazes / 6);\n\n        uint8 active = unlocked >= 5 ? 5 : unlocked;\n        for (uint16 i = 0; i < active; i++) {\n            math = string.concat(\n                math,\n                '<path d = \"M',\n                Color.toString(330 + (5 * i)),\n                ' 0 v 80\" opacity=\"0.5\" />',\n                '<path d = \"M',\n                Color.toString(330 + (5 * i)),\n                ' 260 v 280\" opacity=\"0.5\" />'\n            );\n        }\n\n        math = string.concat(math, \"</g>\");\n\n        return math;\n    }\n}\n"
    },
    "contracts/chainellations/decos/UFO.sol": {
      "content": "// // SPDX-License-Identifier: MIT\n// pragma solidity 0.8.18;\n\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\n// import \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\";\n// import \"@openzeppelin/contracts/utils/Counters.sol\";\n// import \"@openzeppelin/contracts/utils/Base64.sol\";\n// import \"../../interfaces/IDeco.sol\";\n\n// contract UFO is ERC721Burnable, IDeco, Ownable {\n//     using Strings for uint256;\n//     using Counters for Counters.Counter;\n\n//     Counters.Counter private _tokenIds;\n\n//     uint256 public maxSupply = 500;\n//     uint256 public mintCost = 5 * 10 ** 16;\n\n//     constructor() ERC721(\"chainellation UFO\", \"UFO\") {}\n\n//     function mint() public payable {\n//         if (msg.value < mintCost) revert Cost();\n\n//         _tokenIds.increment();\n//         if (_tokenIds.current() >= maxSupply) revert MaxSupplyReached();\n//         uint256 newItemId = _tokenIds.current();\n//         _safeMint(msg.sender, newItemId);\n//     }\n\n//     function tokenURI(\n//         uint256 tokenId\n//     ) public view virtual override returns (string memory) {\n//         bytes memory dataURI = abi.encodePacked(\n//             \"{\",\n//             '\"name\": \"chainellation UFO #',\n//             tokenId.toString(),\n//             '\",',\n//             '\"description\": \"chainellation UFO\",',\n//             '\"image\": \"',\n//             generateCharacter(tokenId),\n//             '\"',\n//             \"}\"\n//         );\n//         return\n//             string(\n//                 abi.encodePacked(\n//                     \"data:application/json;base64,\",\n//                     Base64.encode(dataURI)\n//                 )\n//             );\n//     }\n\n//     function generateCharacter(\n//         uint256 tokenId\n//     ) public view returns (string memory) {\n//         Color.DNA memory dna = Color.genDNA(\n//             tokenId,\n//             Color.defaultColors(tokenId)\n//         );\n//         bytes memory svg = abi.encodePacked(\n//             packageAsSVG(tokenId, dna, 0, true)\n//         );\n\n//         return\n//             string(\n//                 abi.encodePacked(\n//                     \"data:image/svg+xml;base64,\",\n//                     Base64.encode(svg)\n//                 )\n//             );\n//     }\n\n//     function packageAsSVG(\n//         uint256 tokenId,\n//         Color.DNA memory dna,\n//         uint256 gazes,\n//         bool daytime\n//     ) public view returns (string memory) {\n//         return\n//             string.concat(\n//                 \"<svg>\",\n//                 getDeco(tokenId, dna, gazes, daytime),\n//                 \"</svg>\"\n//             );\n//     }\n\n//     function getDeco(\n//         uint256 tokenId,\n//         Color.DNA memory dna,\n//         uint256 gazes,\n//         bool daytime\n//     ) public pure override returns (string memory) {\n//         return\n//             string.concat(\n//                 '<g id=\"deco\">',\n//                 '<circle cx=\"128\" cy=\"128\" r=\"20\" fill=\"#C0C0C0\"/>',\n//                 \"</g>\"\n//             );\n//     }\n\n//     error Cost();\n//     error MaxSupplyReached();\n\n//     function setMaxSupply(uint256 _maxSupply) public onlyOwner {\n//         maxSupply = _maxSupply;\n//     }\n\n//     function setMintCost(uint256 _newMintCost) public onlyOwner {\n//         mintCost = _newMintCost;\n//     }\n\n//     function currentSupply() public view returns (uint256) {\n//         return _tokenIds.current();\n//     }\n\n//     function ownerOf(\n//         uint256 tokenId\n//     ) public view override(ERC721, IDeco) returns (address owner) {\n//         return super.ownerOf(tokenId);\n//     }\n\n//     function safeTransferFrom(\n//         address from,\n//         address to,\n//         uint256 tokenId\n//     ) public override(ERC721, IDeco) {\n//         return super.safeTransferFrom(from, to, tokenId);\n//     }\n\n//     function getApproved(\n//         uint256 tokenId\n//     ) public view override(ERC721, IDeco) returns (address operator) {\n//         return super.getApproved(tokenId);\n//     }\n\n//     function burn(uint256 tokenId) public override(ERC721Burnable, IDeco) {\n//         super.burn(tokenId);\n//     }\n\n//     function balanceOf(\n//         address owner\n//     ) public view override(ERC721, IDeco) returns (uint256) {\n//         return super.balanceOf(owner);\n//     }\n// }\n"
    },
    "contracts/chainellations/decos/Window.sol": {
      "content": "// // SPDX-License-Identifier: MIT\n// pragma solidity 0.8.18;\n\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\n// import \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\";\n// import \"@openzeppelin/contracts/utils/Counters.sol\";\n// import \"@openzeppelin/contracts/utils/Base64.sol\";\n// import \"../../interfaces/IDeco.sol\";\n\n// contract Window is ERC721Burnable, IDeco, Ownable {\n//     using Strings for uint256;\n//     using Counters for Counters.Counter;\n\n//     Counters.Counter private _tokenIds;\n\n//     uint256 public maxSupply = 500;\n//     uint256 public mintCost = 5 * 10 ** 16;\n\n//     constructor() ERC721(\"chainellation window\", \"WINDOW\") {}\n\n//     function tokenURI(\n//         uint256 tokenId\n//     ) public view virtual override returns (string memory) {\n//         bytes memory dataURI = abi.encodePacked(\n//             \"{\",\n//             '\"name\": \"chainellation window #',\n//             tokenId.toString(),\n//             '\",',\n//             '\"description\": \"chainellation window silhouette\",',\n//             '\"image\": \"',\n//             generateCharacter(tokenId),\n//             '\"',\n//             \"}\"\n//         );\n//         return\n//             string(\n//                 abi.encodePacked(\n//                     \"data:application/json;base64,\",\n//                     Base64.encode(dataURI)\n//                 )\n//             );\n//     }\n\n//     function mint() public payable {\n//         if (msg.value < mintCost) revert Cost();\n\n//         _tokenIds.increment();\n//         if (_tokenIds.current() >= maxSupply) revert MaxSupplyReached();\n//         uint256 newItemId = _tokenIds.current();\n//         _safeMint(msg.sender, newItemId);\n//     }\n\n//     function generateCharacter(\n//         uint256 tokenId\n//     ) public view returns (string memory) {\n//         Color.DNA memory dna = Color.genDNA(\n//             tokenId,\n//             Color.defaultColors(tokenId)\n//         );\n//         bytes memory svg = abi.encodePacked(\n//             packageAsSVG(tokenId, dna, 0, true)\n//         );\n\n//         return\n//             string(\n//                 abi.encodePacked(\n//                     \"data:image/svg+xml;base64,\",\n//                     Base64.encode(svg)\n//                 )\n//             );\n//     }\n\n//     function getDeco(\n//         uint256 tokenId,\n//         Color.DNA memory dna,\n//         uint256 gazes,\n//         bool daytime\n//     ) public pure override returns (string memory) {\n//         return\n//             string.concat(\n//                 '<g id=\"silhouette\">',\n//                 '<path d=\"M0 512 v -512 h 512 v 512 h -512 M 128 0 v 512 M 256 0 v 512 M 384 0 v 512 M 0 128 h 512 M 0 256 h 512 M 0 384 h 512\" stroke=\"black\" stroke-width=\"5\" fill=\"none\"/>',\n//                 '<path d=\"M0 256 C 0 512 512 512 512 256 V 512 H 0 z\" fill=\"black\" stroke=\"black\" stroke-width=\"0\"/>',\n//                 \"</g>\"\n//             );\n//     }\n\n//     function packageAsSVG(\n//         uint256 tokenId,\n//         Color.DNA memory dna,\n//         uint256 gazes,\n//         bool daytime\n//     ) public view returns (string memory) {\n//         return\n//             string.concat(\n//                 \"<svg>\",\n//                 getDeco(tokenId, dna, gazes, daytime),\n//                 \"</svg>\"\n//             );\n//     }\n\n//     error Cost();\n//     error MaxSupplyReached();\n\n//     function setMaxSupply(uint256 _maxSupply) public onlyOwner {\n//         maxSupply = _maxSupply;\n//     }\n\n//     function setMintCost(uint256 _newMintCost) public onlyOwner {\n//         mintCost = _newMintCost;\n//     }\n\n//     function currentSupply() public view returns (uint256) {\n//         return _tokenIds.current();\n//     }\n\n//     function ownerOf(\n//         uint256 tokenId\n//     ) public view override(ERC721, IDeco) returns (address owner) {\n//         return super.ownerOf(tokenId);\n//     }\n\n//     function safeTransferFrom(\n//         address from,\n//         address to,\n//         uint256 tokenId\n//     ) public override(ERC721, IDeco) {\n//         return super.safeTransferFrom(from, to, tokenId);\n//     }\n\n//     function getApproved(\n//         uint256 tokenId\n//     ) public view override(ERC721, IDeco) returns (address operator) {\n//         return super.getApproved(tokenId);\n//     }\n\n//     function burn(uint256 tokenId) public override(ERC721Burnable, IDeco) {\n//         super.burn(tokenId);\n//     }\n\n//     function balanceOf(\n//         address owner\n//     ) public view override(ERC721, IDeco) returns (uint256) {\n//         return super.balanceOf(owner);\n//     }\n// }\n"
    },
    "contracts/Color.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nlibrary Color {\n    using Strings for uint256;\n\n    struct DNA {\n        uint256 tokenId;\n        uint16 primaryHue;\n        uint16 secondaryHue;\n        uint256 starSeed;\n        uint256 funkSeed;\n        uint256 circleSeed;\n        uint256 groundSeed;\n        uint256 constellationSeed;\n    }\n\n    struct HSL {\n        uint16 H;\n        uint16 S;\n        uint16 L;\n    }\n\n    struct Point {\n        uint16 x;\n        uint16 y;\n    }\n\n    struct Circle {\n        uint16 x;\n        uint16 y;\n        uint16 r;\n        uint8 count;\n        uint16 stroke;\n        bool active;\n    }\n\n    function HSLtoString(HSL memory color) public pure returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    \"hsl(\",\n                    ((uint256)(color.H)).toString(),\n                    \",\",\n                    ((uint256)(color.S)).toString(),\n                    \"%,\",\n                    ((uint256)(color.L)).toString(),\n                    \"%)\"\n                )\n            );\n    }\n\n    function toString(uint16 num) public pure returns (string memory) {\n        return ((uint256)(num)).toString();\n    }\n\n    function psuedorandom(\n        uint256 tokenId,\n        uint256 nonce\n    ) public pure returns (uint256) {\n        return uint(keccak256(abi.encodePacked(tokenId, nonce)));\n    }\n\n    function wiggle(\n        uint256 tokenId,\n        uint256 nonce,\n        uint16 base,\n        uint16 offset\n    ) public pure returns (uint16) {\n        uint16 wiggleAmount = (uint16)(psuedorandom(tokenId, nonce) % offset);\n        if ((uint8)(psuedorandom(tokenId, nonce) % 2) == 0) {\n            return base + wiggleAmount;\n        } else {\n            return subZero(base, wiggleAmount);\n        }\n    }\n\n    function wiggleString(\n        uint256 tokenId,\n        uint256 nonce,\n        uint16 base,\n        uint16 offset\n    ) public pure returns (string memory) {\n        return toString(wiggle(tokenId, nonce, base, offset));\n    }\n\n    function wiggleUp(\n        uint256 tokenId,\n        uint256 nonce,\n        uint16 base,\n        uint16 offset\n    ) public pure returns (uint16) {\n        uint16 wiggleAmount = (uint16)(psuedorandom(tokenId, nonce) % offset);\n        return base + wiggleAmount;\n    }\n\n    function subZero(uint16 first, uint16 second) public pure returns (uint16) {\n        if (first > second) {\n            return first - second;\n        } else {\n            return 0;\n        }\n    }\n\n    function flipColor(\n        Color.HSL memory color\n    ) public pure returns (Color.HSL memory) {\n        uint16 newH = color.H + 180 > 360 ? color.H - 180 : color.H + 180;\n        return Color.HSL(newH, color.S, color.L);\n    }\n\n    // TODO this isn't actually the rotate function because it zeros out\n    function rotateColor(\n        Color.HSL memory color,\n        uint16 amount\n    ) public pure returns (Color.HSL memory) {\n        uint16 hue = (color.H + amount) % 360;\n        return Color.HSL(hue, color.S, color.L);\n    }\n\n    function genDNA(\n        uint256 tokenId,\n        uint32 colors\n    ) public pure returns (DNA memory) {\n        DNA memory dna;\n        dna.tokenId = tokenId;\n        dna.primaryHue = uint16(colors >> 16);\n        dna.secondaryHue = uint16(colors);\n        dna.starSeed = psuedorandom(tokenId, 123);\n        dna.funkSeed = psuedorandom(tokenId, 234);\n        dna.circleSeed = psuedorandom(tokenId, 345);\n        dna.groundSeed = psuedorandom(tokenId, 456);\n        dna.constellationSeed = tokenId;\n\n        return dna;\n    }\n\n    function defaultColors(uint256 tokenId) public pure returns (uint32) {\n        uint16 primary = uint16((tokenId % 16) * 10);\n        uint16 secondary = rotateColor(HSL(primary, 0, 0), 60).H;\n        return (uint32(primary) << 16) | uint32(secondary);\n    }\n}\n"
    },
    "contracts/deployment/DeployInitialRules.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../tokens/Region.sol\";\nimport \"../games/Explorer.sol\";\nimport \"../loot/ItemVault.sol\";\nimport \"../tokens/Loot.sol\";\n\ncontract DeployInitialRules is Ownable {\n    Region private _region;\n    Explorer private _explorer;\n    address private _landBaron;\n    ItemVault private _vault;\n    Loot private _loot;\n\n    string[] private wildsActions = [\"explore\", \"hunt\", \"forage\"];\n    string[] private settlementActions = [\n        \"explore\",\n        \"build\",\n        \"socialize\",\n        \"observe\"\n    ];\n    string[] private ruinsActions = [\"explore\", \"scavenge\", \"dig\"];\n    string[] private voidActions = [\"explore\", \"observe\"];\n    string[] private allActions = [\n        \"explore\",\n        \"hunt\",\n        \"forage\",\n        \"build\",\n        \"socialize\",\n        \"observe\",\n        \"scavenge\",\n        \"dig\"\n    ];\n\n    constructor(\n        address landbaron,\n        address payable region,\n        address explorer,\n        address vault,\n        address loot\n    ) {\n        _region = Region(region);\n        _explorer = Explorer(explorer);\n        _landBaron = landbaron;\n        _vault = ItemVault(vault);\n        _loot = Loot(loot);\n    }\n\n    bool private deployed;\n    error AlreadyDeployed();\n\n    function deployIt() public onlyOwner {\n        if (deployed) {\n            revert AlreadyDeployed();\n        }\n        deployed = true;\n        defineActions();\n\n        mintMountains();\n        mintForest();\n        mintStrange();\n        mintSwamp();\n        mintDesert();\n        mintMirror();\n        addDrops();\n    }\n\n    function defineActions() public onlyOwner {\n        _explorer.addAction(\n            \"explore\",\n            40 minutes,\n            0,\n            \"rollForLoot(string,uint256)\",\n            address(_explorer)\n        );\n        _explorer.addAction(\n            \"hunt\",\n            40 minutes,\n            0,\n            \"rollForLoot(string,uint256)\",\n            address(_explorer)\n        );\n        _explorer.addAction(\n            \"scavenge\",\n            40 minutes,\n            0,\n            \"rollForLoot(string,uint256)\",\n            address(_explorer)\n        );\n        _explorer.addAction(\n            \"forage\",\n            40 minutes,\n            0,\n            \"rollForLoot(string,uint256)\",\n            address(_explorer)\n        );\n        _explorer.addAction(\n            \"build\",\n            40 minutes,\n            0,\n            \"rollForLoot(string,uint256)\",\n            address(_explorer)\n        );\n        _explorer.addAction(\n            \"socialize\",\n            40 minutes,\n            0,\n            \"rollForLoot(string,uint256)\",\n            address(_explorer)\n        );\n        // _explorer.addAction(\"havest\", 40 minutes, 0, \"rollForLoot(string,uint256,address)\", address(_explorer));\n        _explorer.addAction(\n            \"dig\",\n            40 minutes,\n            0,\n            \"rollForLoot(string,uint256)\",\n            address(_explorer)\n        );\n        _explorer.addAction(\n            \"observe\",\n            40 minutes,\n            0,\n            \"rollForLoot(string,uint256)\",\n            address(_explorer)\n        );\n    }\n\n    function mintMountains() public onlyOwner {\n        uint256 id = _region.safeMint(_landBaron, \"mountain\");\n        addBuilding(id, \"planetarium\", 0, settlementActions);\n        addBuilding(id, \"summit\", 0, wildsActions);\n        addBuilding(id, \"volcano\", 0, wildsActions);\n        addBuilding(id, \"alpinehuts\", 0, settlementActions);\n        addBuilding(id, \"ridgetemple\", 0, settlementActions);\n    }\n\n    function mintForest() public onlyOwner {\n        uint256 id = _region.safeMint(_landBaron, \"forest\");\n        addBuilding(id, \"overgrown roots\", 0, ruinsActions);\n        addBuilding(id, \"world tree\", 0, wildsActions);\n        addBuilding(id, \"grove\", 0, settlementActions);\n        addBuilding(id, \"cenote\", 0, wildsActions);\n        addBuilding(id, \"watchtower\", 0, settlementActions);\n    }\n\n    function mintStrange() public onlyOwner {\n        uint256 id = _region.safeMint(_landBaron, \"strange\");\n        addBuilding(id, \"void\", 0, voidActions);\n    }\n\n    function mintSwamp() public onlyOwner {\n        uint256 id = _region.safeMint(_landBaron, \"swamp\");\n        addBuilding(id, \"mangrove\", 0, wildsActions);\n        addBuilding(id, \"submerged reactor\", 0, ruinsActions);\n        addBuilding(id, \"sunken temple\", 0, ruinsActions);\n        addBuilding(id, \"world roots\", 0, wildsActions);\n        addBuilding(id, \"walking hut\", 0, settlementActions);\n    }\n\n    function mintDesert() public onlyOwner {\n        uint256 id = _region.safeMint(_landBaron, \"desert\");\n        addBuilding(id, \"wonderous oasis\", 0, wildsActions);\n        addBuilding(id, \"pyramid\", 0, ruinsActions);\n        addBuilding(id, \"solar lab\", 0, settlementActions);\n        addBuilding(id, \"pit\", 0, wildsActions);\n        addBuilding(id, \"windrider camp\", 0, settlementActions);\n    }\n\n    function mintMirror() public onlyOwner {\n        uint256 id = _region.safeMint(_landBaron, \"mirror\");\n        addBuilding(id, \"library\", 0, settlementActions);\n        addBuilding(id, \"fractal lab\", 0, settlementActions);\n        addBuilding(id, \"sharded prism\", 0, ruinsActions);\n        addBuilding(id, \"reflective pool\", 0, wildsActions);\n        addBuilding(id, \"funhouse\", 0, settlementActions);\n    }\n\n    function addDrops() public onlyOwner {\n        _loot.addDrop(0, 5, \"explore\");\n        _loot.addDrop(1, 5, \"explore\");\n        _loot.addDrop(2, 5, \"explore\");\n        _loot.addDrop(3, 5, \"explore\");\n        _loot.addDrop(4, 5, \"explore\");\n        _loot.addDrop(5, 5, \"explore\");\n\n        //  _explorer.addAction(\"explore\", 40 minutes, 0, \"rollForLoot(string,uint256)\", address(_explorer));\n        //  _explorer.addAction(\"hunt\", 40 minutes, 0, \"rollForLoot(string,uint256)\", address(_explorer));\n        //  _explorer.addAction(\"scavenge\", 40 minutes, 0, \"rollForLoot(string,uint256)\", address(_explorer));\n        //  _explorer.addAction(\"forage\", 40 minutes, 0, \"rollForLoot(string,uint256)\", address(_explorer));\n        //  _explorer.addAction(\"build\", 40 minutes, 0, \"rollForLoot(string,uint256)\", address(_explorer));\n        //  _explorer.addAction(\"socialize\", 40 minutes, 0, \"rollForLoot(string,uint256)\", address(_explorer));\n        //  _explorer.addAction(\"havest\", 40 minutes, 0, \"rollForLoot(string,uint256,address)\", address(_explorer));\n        //  _explorer.addAction(\"dig\", 40 minutes, 0, \"rollForLoot(string,uint256)\", address(_explorer));\n        //  _explorer.addAction(\"observe\", 40 minutes, 0, \"rollForLoot(string,uint256)\", address(_explorer));\n    }\n\n    function addBuilding(\n        uint256 regionId,\n        string memory buildingName,\n        uint16 skill,\n        string[] storage actions\n    ) internal {\n        _region.addBuilding(regionId, buildingName, skill);\n        for (uint256 i = 0; i < actions.length; i++) {\n            _region.addAction(regionId, buildingName, actions[i]);\n        }\n    }\n}\n"
    },
    "contracts/games/Explorer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\nimport \"./../interfaces/IStarShip.sol\";\nimport \"./../interfaces/IStarShipSheet.sol\";\nimport \"./../interfaces/IItemVault.sol\";\nimport \"./../interfaces/IRegion.sol\";\n\n// import \"hardhat/console.sol\";\n\ncontract Explorer is AccessControl {\n    using Counters for Counters.Counter;\n\n    bytes32 public constant EXPLORER_ROLE = keccak256(\"EXPLORER_ROLE\");\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\"MAINTAINER_ROLE\");\n\n    IStarShip private _castle;\n    IItemVault private _itemVault;\n    IStarShipSheet private _castleStats;\n    IRegion private _region;\n\n    mapping(uint256 => uint256) public regionStartTime;\n    mapping(uint256 => uint256) public activeRegion;\n    mapping(uint256 => LiveAction) public liveActions;\n    mapping(string => Action) public actionsRepository;\n\n    struct Action {\n        string name;\n        uint8 stat;\n        string payload;\n        address to;\n        uint256 duration;\n        bool initialized;\n    }\n\n    struct LiveAction {\n        uint256 castleId;\n        uint256 regionId;\n        string actionName;\n        bool active;\n        uint256 startTime;\n        string buildingName;\n    }\n\n    constructor(\n        address payable skyCastleAddress,\n        address itemVaultAddress,\n        address castleStats,\n        address payable region\n    ) {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(MAINTAINER_ROLE, msg.sender);\n        _grantRole(EXPLORER_ROLE, address(this));\n\n        _castle = IStarShip(skyCastleAddress);\n        _itemVault = IItemVault(itemVaultAddress);\n        _castleStats = IStarShipSheet(castleStats);\n        _region = IRegion(region);\n    }\n\n    //------------------------------------------------------ Regions\n\n    function getMyRegions(\n        uint256 castleId\n    ) public view returns (uint256[] memory) {\n        uint256 regionCount = getRegionCount(castleId);\n\n        uint256[] memory _regions = new uint256[](regionCount);\n        for (uint8 i = 0; i < regionCount; i++) {\n            _regions[i] = getIdempotentRandom(\n                _region.totalSupply(),\n                castleId,\n                regionStartTime[castleId] + i\n            );\n        }\n        return _regions;\n    }\n\n    function getMyRegionNames(\n        uint256 castleId\n    ) public view returns (string[] memory) {\n        uint256 regionCount = getRegionCount(castleId);\n\n        uint256[] memory _ids = getMyRegions(castleId);\n\n        string[] memory _regions = new string[](regionCount);\n        for (uint8 i = 0; i < regionCount; i++) {\n            _regions[i] = _region.regionName(_ids[i]);\n        }\n        return _regions;\n    }\n\n    // Assumes the UI has served `getMyRegions` and the user is providing an index within that array\n    function chooseRegion(uint256 castleId, uint256 regionIndex) public {\n        require(\n            block.timestamp >\n                regionStartTime[castleId] + getRegionLock(castleId),\n            \"Region choice hasn't expired yet\"\n        );\n        require(\n            msg.sender == _castle.ownerOf(castleId),\n            \"can only explore with a castle you own\"\n        );\n\n        uint256[] memory regionIds = getMyRegions(castleId);\n        require(regionIndex < regionIds.length, \"Region index out of bounds\");\n\n        activeRegion[castleId] = regionIds[regionIndex];\n        regionStartTime[castleId] = block.timestamp;\n    }\n\n    function getMyActiveRegion(\n        uint256 castleId\n    ) public view returns (string memory) {\n        require(\n            block.timestamp <\n                regionStartTime[castleId] + getRegionLock(castleId),\n            \"No Active Region\"\n        );\n\n        return _region.regionName(activeRegion[castleId]);\n    }\n\n    //------------------------------------------------------ Buildings\n\n    function getMyBuildings(\n        uint256 castleId\n    ) public view returns (string[] memory) {\n        // console.log(\n        //     \"getMyBuildings curTime: %s, unlocks at: %s\",\n        //     block.timestamp,\n        //     regionStartTime[castleId] + getRegionLock(castleId)\n        // );\n        require(\n            block.timestamp <\n                regionStartTime[castleId] + getRegionLock(castleId),\n            \"No Active Region for buildings\"\n        );\n\n        return _region.getBuildingNames(activeRegion[castleId]);\n    }\n\n    //------------------------------------------------------ Actions\n\n    function getActions(\n        uint256 castleId,\n        string memory buildingName\n    ) public view returns (string[] memory) {\n        // console.log(\n        //     \"getActions curTime: %s, unlocks at: %s\",\n        //     block.timestamp,\n        //     regionStartTime[castleId] + getRegionLock(castleId)\n        // );\n\n        require(\n            block.timestamp <\n                regionStartTime[castleId] + getRegionLock(castleId),\n            \"No Active Region for actions\"\n        );\n\n        return _region.getBuildingActions(activeRegion[castleId], buildingName);\n    }\n\n    function performAction(\n        uint256 castleId,\n        uint256 buildingIndex,\n        uint256 actionIndex\n    ) public {\n        require(\n            block.timestamp <\n                regionStartTime[castleId] + getRegionLock(castleId),\n            \"Region not selected\"\n        );\n        require(\n            msg.sender == _castle.ownerOf(castleId),\n            \"can only explore with a castle you own\"\n        );\n\n        uint256 regionId = activeRegion[castleId];\n\n        string[] memory buildingNames = getMyBuildings(castleId);\n        require(\n            buildingIndex < buildingNames.length,\n            \"Building index out of bounds\"\n        );\n\n        string[] memory actionNames = getActions(\n            castleId,\n            buildingNames[buildingIndex]\n        );\n        require(actionIndex < actionNames.length, \"Action index out of bounds\");\n\n        liveActions[castleId] = LiveAction({\n            castleId: castleId,\n            regionId: regionId,\n            actionName: actionNames[actionIndex],\n            startTime: block.timestamp,\n            active: true,\n            buildingName: buildingNames[buildingIndex]\n        });\n    }\n\n    function resolveAction(uint256 castleId) public {\n        require(\n            block.timestamp <\n                regionStartTime[castleId] + getRegionLock(castleId),\n            \"Region not selected\"\n        );\n        require(\n            msg.sender == _castle.ownerOf(castleId),\n            \"can only explore with a castle you own\"\n        );\n        require(liveActions[castleId].active, \"No action is currently active\");\n\n        Action memory action = actionsRepository[\n            liveActions[castleId].actionName\n        ];\n        require(\n            block.timestamp > liveActions[castleId].startTime + action.duration,\n            \"Action hasn't expired yet\"\n        );\n\n        liveActions[castleId].active = false;\n\n        (bool success, ) = action.to.call(\n            abi.encodeWithSignature(action.payload, action.name, castleId)\n        );\n\n        require(success, \"action failed\");\n    }\n\n    function addAction(\n        string calldata name,\n        uint256 _duration,\n        uint8 _stat,\n        string calldata _payload,\n        address _to\n    ) public onlyRole(MAINTAINER_ROLE) {\n        require(!actionsRepository[name].initialized, \"Action already exists\");\n\n        actionsRepository[name] = Action({\n            name: name,\n            stat: _stat,\n            payload: _payload,\n            to: _to,\n            duration: _duration,\n            initialized: true\n        });\n    }\n\n    // ------------------------------------------------------ Actionable\n\n    function rollForLoot(\n        string memory actionName,\n        uint256 castleId\n    ) public onlyRole(EXPLORER_ROLE) {\n        // console.log(\"rolling\");\n\n        _itemVault.rollForLoot(actionName, castleId);\n\n        //TODO boost stat value if needed\n    }\n\n    //------------------------------------------------------ Stats\n\n    function getRegionLock(uint256 tokenId) public pure returns (uint256) {\n        //TODO region lock based on a stat is shorter better?\n        return 7 days;\n    }\n\n    function getRegionCount(uint256 tokenId) public pure returns (uint256) {\n        //TODO region count based on a stat\n        return 3;\n    }\n\n    //------------------------------------------------------ Utils\n\n    function getIdempotentRandom(\n        uint256 outOf,\n        uint256 first,\n        uint256 second\n    ) internal view virtual returns (uint256) {\n        return\n            uint256(\n                uint256(\n                    keccak256(abi.encodePacked(msg.sender, first, second))\n                ) % outOf\n            );\n    }\n\n    // Observatory astromancy\n    // Ruins geomancy\n    // Fire Dance Lunacy\n\n    // authority,\n    // sustainability,\n    // resiliency,\n    // literacy,\n    // creativity,\n    // culture\n\n    // astromancy,\n    // horomancy,\n    // geomancy,\n    // technomancy,\n    // lunacy\n\n    //players can submit an action against a building using their stats to influence the outcome\n\n    // build\n    // socialize\n    // scavenge  materials\n    // harvest drinks\n    // dig\n    // hunt food\n    // observe\n}\n"
    },
    "contracts/interfaces/IChainellationRenderer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"../Color.sol\";\n\ninterface IChainellationRenderer {\n    function generateSVG(\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime,\n        uint8 cloudDays,\n        address decorator\n    ) external view returns (string memory);\n\n    function subZero(\n        uint16 first,\n        uint16 second\n    ) external pure returns (uint16);\n\n    function psuedorandom(\n        uint256 tokenId,\n        uint256 nonce\n    ) external pure returns (uint256);\n}\n"
    },
    "contracts/interfaces/IDeco.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\nimport \"../Color.sol\";\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\n\nabstract contract IDeco {\n    mapping(uint256 => bool) public soulbound;\n\n    function soulbind(uint256 tokenId) external {\n        if (ownerOf(tokenId) != tx.origin) revert NotOwner();\n        soulbound[tokenId] = true;\n    }\n\n    function getDeco(\n        uint256 tokenId,\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime\n    ) public view virtual returns (string memory);\n\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return tx.origin;\n    }\n\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        return 1;\n    }\n\n    function packageAsSVG(\n        uint256 tokenId,\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime\n    ) public view returns (string memory) {\n        return\n            string.concat(\n                '<svg viewBox=\"0 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\">',\n                getDeco(tokenId, dna, gazes, daytime),\n                \"</svg>\"\n            );\n    }\n\n    function generateCharacter(\n        uint256 tokenId\n    ) public view returns (string memory) {\n        Color.DNA memory dna = Color.genDNA(\n            tokenId,\n            Color.defaultColors(tokenId)\n        );\n        bytes memory svg = abi.encodePacked(\n            packageAsSVG(tokenId, dna, 0, true)\n        );\n\n        return\n            string(\n                abi.encodePacked(\n                    \"data:image/svg+xml;base64,\",\n                    Base64.encode(svg)\n                )\n            );\n    }\n\n    function getMetadata(\n        uint256 tokenId\n    ) public view virtual returns (string memory);\n\n    function tokenURI(\n        uint256 tokenId\n    ) public view virtual returns (string memory) {\n        bytes memory dataURI = abi.encodePacked(\n            \"{\",\n            getMetadata(tokenId),\n            \",\",\n            '\"image\": \"',\n            generateCharacter(tokenId),\n            '\"',\n            \"}\"\n        );\n        return\n            string(\n                abi.encodePacked(\n                    \"data:application/json;base64,\",\n                    Base64.encode(dataURI)\n                )\n            );\n    }\n\n    error NotOwner();\n    error SoulBound();\n}\n"
    },
    "contracts/interfaces/IDecorations.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./IDeco.sol\";\n\ninterface IDecorations {\n    function getFocus(\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime\n    ) external view returns (string memory);\n\n    function getSilhouette(\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime\n    ) external view returns (string memory);\n\n    function getSkyMath(\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime\n    ) external view returns (string memory);\n\n    function getDecorationOne(\n        Color.DNA memory dna,\n        uint256 gazes,\n        bool daytime\n    ) external view returns (string memory);\n}\n"
    },
    "contracts/interfaces/IItemVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\ninterface IItemVault {\n    function rollForLoot(\n        string memory tableName,\n        uint256 castleId\n    ) external returns (uint256);\n\n    function rollForBulkLoot(\n        string memory tableName,\n        uint256 castleId,\n        uint256 amount\n    ) external returns (uint256);\n}\n"
    },
    "contracts/interfaces/ILoot.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\ninterface ILoot {\n    function mint(address to, uint256 tokenId, uint256 amount) external;\n\n    function getShareSum(string calldata table) external view returns (uint16);\n\n    function getDropsInTable(\n        string calldata table\n    ) external view returns (uint256);\n\n    function getShares(uint256 tokenId) external view returns (uint8);\n\n    function getDropId(\n        string calldata table,\n        uint256 dropIndex\n    ) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IRegion.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\ninterface IRegion {\n    function ownerOf(uint256 tokenId) external view returns (address);\n\n    function totalSupply() external view returns (uint256);\n\n    function regionName(uint256 id) external view returns (string memory);\n\n    function getBuildingNames(\n        uint256 id\n    ) external view returns (string[] memory);\n\n    function getBuildingActions(\n        uint256 id,\n        string memory buildingName\n    ) external view returns (string[] memory);\n}\n"
    },
    "contracts/interfaces/IStarShip.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\ninterface IStarShip {\n    function ownerOf(uint256 tokenId) external view returns (address);\n}\n"
    },
    "contracts/interfaces/IStarShipSheet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\ninterface IStarShipSheet {\n    function calculateStatsForMint(uint256 tokenId) external;\n\n    function mintPrice() external view returns (uint256);\n}\n"
    },
    "contracts/loot/ItemVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\nimport \"../interfaces/ILoot.sol\";\nimport \"../interfaces/IStarShip.sol\";\nimport \"../interfaces/IItemVault.sol\";\n\n// import \"hardhat/console.sol\";\n\ncontract ItemVault is AccessControl, IItemVault {\n    using Counters for Counters.Counter;\n    bytes32 public constant LOOTER_ROLE = keccak256(\"LOOTER_ROLE\");\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\"MAINTAINER_ROLE\");\n\n    Counters.Counter private _nonce;\n\n    ILoot private _loot; // TODO support 20, 721, and 1155 - ideally multiple of each....\n    IStarShip private _starShip;\n\n    constructor(address loot, address starships) {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(LOOTER_ROLE, msg.sender);\n        _grantRole(MAINTAINER_ROLE, msg.sender);\n        _loot = ILoot(loot);\n        _starShip = IStarShip(starships);\n    }\n\n    function addLooter(address newLooter) public onlyRole(MAINTAINER_ROLE) {\n        _grantRole(LOOTER_ROLE, newLooter);\n    }\n\n    function rollForBulkLoot(\n        string memory tableName,\n        uint256 castleId,\n        uint256 amount\n    ) external onlyRole(LOOTER_ROLE) returns (uint256) {\n        return roll(tableName, castleId, amount);\n    }\n\n    function rollForLoot(\n        string memory tableName,\n        uint256 castleId\n    ) public onlyRole(LOOTER_ROLE) returns (uint256) {\n        return roll(tableName, castleId, 1);\n    }\n\n    function roll(\n        string memory tableName,\n        uint256 castleId,\n        uint256 amount\n    ) internal returns (uint256) {\n        address receiver = _starShip.ownerOf(castleId);\n        uint8 randomNumber = getRandom(_loot.getShareSum(tableName), receiver);\n        uint256 available = _loot.getDropsInTable(tableName);\n        uint8 rateCount = 0;\n        uint256 mintedId;\n        bool minted = false;\n\n        for (uint8 index = 0; index < available; index++) {\n            if (\n                randomNumber <\n                rateCount + (_loot.getShares(_loot.getDropId(tableName, index)))\n            ) {\n                _loot.mint(receiver, index, amount);\n                minted = true;\n                mintedId = index;\n                break;\n            } else {\n                rateCount =\n                    rateCount +\n                    _loot.getShares(_loot.getDropId(tableName, index));\n            }\n        }\n        // console.log(\"minted: %s \", minted);\n        // console.log(\"mintedID: %s \", mintedId);\n        require(minted, \"nothing minted\");\n        emit LootDropped(mintedId, receiver);\n        return mintedId;\n    }\n\n    function getRandom(\n        uint16 shareSum,\n        address receiver\n    ) internal virtual returns (uint8) {\n        return\n            uint8(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            getNonce(),\n                            receiver,\n                            block.timestamp,\n                            block.number\n                        )\n                    )\n                ) % shareSum\n            );\n    }\n\n    function getNonce() internal returns (uint256) {\n        uint256 nonce = _nonce.current();\n        _nonce.increment();\n        return nonce;\n    }\n\n    event LootDropped(uint256 mintedID, address indexed receiver);\n}\n"
    },
    "contracts/mocks/Mockellation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"../chainellations/Chainellation.sol\";\n\ncontract Mockellation is Chainellation {\n    uint256 public time;\n\n    constructor(address renderer) Chainellation(renderer) {\n        time = block.timestamp;\n    }\n\n    function systemTime() public view override returns (uint256) {\n        return time;\n    }\n\n    function setSystemTime(uint256 _time) public {\n        time = _time;\n    }\n}\n"
    },
    "contracts/mocks/MockExplorer.sol": {
      "content": "// // SPDX-License-Identifier: MIT\n// pragma solidity 0.8.11;\n\n// import \"../games/Explorer.sol\";\n// import \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n// contract MockExplorer is Explorer {\n//     using SafeMath for uint256;\n\n//     uint256 startTime;\n\n//     constructor(\n//         address payable skyCastleAddress,\n//         address itemVaultAddress,\n//         address skyCastleStats\n//     ) Explorer(skyCastleAddress, itemVaultAddress, skyCastleStats) {}\n\n//     function setStartTime(uint256 newStart) public {\n//         startTime = newStart;\n//     }\n\n//     // function getFuelSpent(uint256 tokenId) public view override returns (uint256) {\n//     //     require(tokenId >= 0, \"fixing warnings\");\n//     //     return 0;\n//     //     // return (block.timestamp.sub(startTime).div(TIME_FOR_FUEL));\n//     // }\n// }\n"
    },
    "contracts/mocks/MockItemVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"../loot/ItemVault.sol\";\n\ncontract MockItemVault is ItemVault {\n    uint8 private _randomResult;\n\n    constructor(address loot, address castle) ItemVault(loot, castle) {}\n\n    function setRandom(uint8 newRandom) public {\n        _randomResult = newRandom;\n    }\n\n    function getRandom(\n        uint16 shareSum,\n        address receiver\n    ) internal view override returns (uint8) {\n        require(receiver != address(this), \"fixing warnings\");\n        require(shareSum >= 0, \"fixing warnings\");\n        return _randomResult;\n    }\n}\n"
    },
    "contracts/mocks/MockStarShipSheet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"../starships/StarShipSheet.sol\";\n\ncontract MockStarShipSheet is StarShipSheet {\n    // uint256[] private _shares = [1];\n    // address[] private _team = [0xdF3e18d64BC6A983f673Ab319CCaE4f1a57C7097];\n\n    constructor(\n        address payable skyCastleAddress\n    ) StarShipSheet(skyCastleAddress) {}\n\n    function boostEra(uint256 tokenId) public {\n        calculateStatsForMint(tokenId);\n    }\n\n    uint8 private _randomResult;\n    bool private _useSuper;\n\n    function setRandom(uint8 newRandom) public {\n        _randomResult = newRandom;\n        _useSuper = false;\n    }\n\n    function useSuper() public {\n        _useSuper = true;\n    }\n\n    function getRandom(\n        uint8 outOf,\n        uint8 first\n    ) internal override returns (uint8) {\n        if (_useSuper) {\n            return super.getRandom(outOf, first);\n        } else {\n            _useSuper = true;\n            return _randomResult;\n        }\n    }\n}\n"
    },
    "contracts/starships/StarShip.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/finance/PaymentSplitter.sol\";\nimport \"../interfaces/IStarShipSheet.sol\";\n\ncontract StarShip is ERC721, ERC721Enumerable, Ownable, PaymentSplitter {\n    using Counters for Counters.Counter;\n    using SafeMath for uint256;\n    using Strings for uint256;\n\n    IStarShipSheet internal _stats;\n\n    Counters.Counter private _tokenIdCounter;\n\n    uint256 private maxSupply = 500;\n    string private _metaDataBaseUrl =\n        \"https://ipfs.io/ipfs/QmXo6FGCvyTpEYskBnKfJS2JCX73FGDcugUWeWdCVFBw5t/\";\n\n    constructor(\n        uint256[] memory shares,\n        address[] memory team\n    ) ERC721(\"Asgard SkyCastle\", \"2m-ASGARD\") PaymentSplitter(team, shares) {}\n\n    function setCastleStats(address castleStats) external onlyOwner {\n        _stats = IStarShipSheet(castleStats);\n    }\n\n    //------------------------------------------------------ External Mint\n\n    function mint() external payable {\n        if (msg.value < _stats.mintPrice()) revert Cost();\n\n        if (_tokenIdCounter.current() >= maxSupply) revert MaxSupplyReached();\n        _tokenIdCounter.increment();\n        uint256 newItemId = _tokenIdCounter.current();\n\n        _safeMint(msg.sender, newItemId);\n\n        _stats.calculateStatsForMint(newItemId);\n    }\n\n    function tokenURI(\n        uint256 tokenId\n    ) public view virtual override returns (string memory) {\n        require(\n            _exists(tokenId),\n            \"ERC721Metadata: URI query for nonexistent token\"\n        );\n\n        return\n            bytes(_metaDataBaseUrl).length > 0\n                ? string(\n                    abi.encodePacked(\n                        _metaDataBaseUrl,\n                        tokenId.toString(),\n                        \".json\"\n                    )\n                )\n                : \"\";\n    }\n\n    function contractURI() public view returns (string memory) {\n        return string(abi.encodePacked(_metaDataBaseUrl, \"contract.json\"));\n    }\n\n    //------------------------------------------------------ Owner\n\n    function setMetaDataBaseUrl(string calldata baseUrl) external onlyOwner {\n        _metaDataBaseUrl = baseUrl;\n    }\n\n    function setMaxSupply(uint256 _maxSupply) external onlyOwner {\n        maxSupply = _maxSupply;\n    }\n\n    //------------------------------------------------------ Errors\n    error Cost();\n    error MaxSupplyReached();\n\n    //------------------------------------------------------ Solidity Overrides\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 batchSize\n    ) internal override(ERC721, ERC721Enumerable) {\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\n    }\n\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view override(ERC721, ERC721Enumerable) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/starships/StarShipSheet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"../interfaces/IStarShip.sol\";\nimport \"../interfaces/IStarShipSheet.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\ncontract StarShipSheet is IStarShipSheet, AccessControl {\n    using Counters for Counters.Counter;\n\n    bytes32 public constant STARSHIP_ROLE = keccak256(\"STARSHIP_ROLE\");\n    bytes32 public constant BUILDER_ROLE = keccak256(\"BUILDER_ROLE\");\n    bytes32 public constant UPGRADER_ROLE = keccak256(\"UPGRADER_ROLE\");\n\n    IStarShip private _starShip;\n\n    Counters.Counter private _nonce;\n\n    mapping(uint256 => uint8[6]) public _statsArray;\n    mapping(uint256 => mapping(string => uint16)) public _skills;\n    mapping(uint256 => uint8) public rarity;\n\n    //s-tier, legendary, epic, rare, uncommon, common\n    // this tracks the baseline rarity that can be rolled, based on the mint count.\n    uint16[] private _genPopulation = [500, 1000, 2500, 7500, 15000];\n    // odds don't collapse so you'll always have an X percent chance of getting a legendary for example.\n    uint8[6] private _rarityOdds = [0, 3, 7, 15, 25, 50];\n    uint8[6] private _startingStats = [87, 84, 81, 78, 75, 72];\n\n    uint256 public mintPrice = 0 * 10 ** 18;\n    uint8 public baseRarity = 0;\n\n    constructor(address payable starShipAddress) {\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        _grantRole(STARSHIP_ROLE, starShipAddress);\n        _grantRole(BUILDER_ROLE, _msgSender());\n        _grantRole(UPGRADER_ROLE, _msgSender());\n\n        _starShip = IStarShip(starShipAddress);\n    }\n\n    function calculateStatsForMint(\n        uint256 tokenId\n    ) public override onlyRole(STARSHIP_ROLE) {\n        // if population hit a threshold, bump the gen\n        if (baseRarity != 5 && tokenId > _genPopulation[baseRarity]) {\n            baseRarity = baseRarity + 1;\n        }\n\n        uint8 currentRarity;\n        uint8 oddsAt = 0;\n\n        //roll for rarity.\n        uint8 randomNumber = getRandom(100, baseRarity);\n        // console.log(\"got random: \", randomNumber);\n        for (uint8 index = 0; index < _rarityOdds.length; index++) {\n            if (randomNumber <= oddsAt + (_rarityOdds[index])) {\n                // console.log(\"rarity set, \", index);\n                currentRarity = index;\n                break;\n            } else {\n                // console.log(\"settping over\");\n                oddsAt = oddsAt + _rarityOdds[index];\n            }\n        }\n        // if roll is greater than base, then it's base.\n        if (currentRarity > baseRarity) {\n            currentRarity = baseRarity;\n        }\n\n        // console.log(\"finalizing rarity: \", currentRarity);\n        rarity[tokenId] = currentRarity;\n        _statsArray[tokenId] = getStartingStats(tokenId, currentRarity);\n    }\n\n    function getStartingStats(\n        uint256 tokenId,\n        uint8 gen\n    ) internal returns (uint8[6] memory) {\n        uint8 randomNumber;\n        uint8 points = _startingStats[gen];\n        uint8[6] memory stats;\n\n        while (points > 0) {\n            randomNumber = getRandom(6, points);\n            if (_statsArray[tokenId][randomNumber] < 20) {\n                stats[randomNumber] = stats[randomNumber] + 1;\n                points = points - 1;\n            }\n        }\n        return stats;\n    }\n\n    function updateMintRules(\n        uint256 newPrice,\n        uint8[6] memory rollOdds\n    ) external onlyRole(BUILDER_ROLE) {\n        mintPrice = newPrice;\n        _rarityOdds = rollOdds;\n    }\n\n    function getRandom(\n        uint8 outOf,\n        uint8 secondNonce\n    ) internal virtual returns (uint8) {\n        return\n            uint8(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            getNonce(),\n                            secondNonce,\n                            block.timestamp\n                        )\n                    )\n                ) % outOf\n            );\n    }\n\n    function getNonce() internal returns (uint256) {\n        uint256 nonce = _nonce.current();\n        _nonce.increment();\n        return nonce;\n    }\n\n    function getRarityOdds() external view returns (uint8[6] memory) {\n        return _rarityOdds;\n    }\n\n    function getStats(uint256 tokenId) external view returns (uint8[6] memory) {\n        return _statsArray[tokenId];\n    }\n\n    function getSkill(\n        uint256 tokenId,\n        string memory name\n    ) external view returns (uint16) {\n        return _skills[tokenId][name];\n    }\n\n    function addStat(\n        uint256 tokenId,\n        uint8 stat,\n        uint8 amount\n    ) public onlyRole(UPGRADER_ROLE) {\n        _statsArray[tokenId][stat] = _statsArray[tokenId][stat] + amount;\n    }\n\n    function addSkill(\n        uint256 tokenId,\n        string memory name,\n        uint16 amount\n    ) public onlyRole(UPGRADER_ROLE) {\n        _skills[tokenId][name] = _skills[tokenId][name] + amount;\n    }\n}\n"
    },
    "contracts/tokens/Loot.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"../interfaces/ILoot.sol\";\n\ncontract Loot is ERC1155, AccessControl, ILoot {\n    using Strings for uint256;\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\"MAINTAINER_ROLE\");\n\n    string public name;\n    string public symbol;\n    string public baseURL;\n\n    // uint16 public shareSum;\n    mapping(uint256 => uint8) public _shares;\n    mapping(string => uint256[]) private _lootTables;\n\n    constructor() ERC1155(\"\") {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(MINTER_ROLE, msg.sender);\n        _grantRole(MAINTAINER_ROLE, msg.sender);\n\n        baseURL = \"https://ipfs.io/ipfs/QmW3MVRk53U1Qcf6CPxaw7WwhfkabGmycC9QifFSiLbtQL/\";\n        name = \"Two Moons Loot\";\n        symbol = \"2M-Loot\";\n    }\n\n    function setURI(string memory newuri) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        baseURL = newuri;\n    }\n\n    function contractURI() public view returns (string memory) {\n        return string(abi.encodePacked(baseURL, \"contract.json\"));\n    }\n\n    function uri(uint256 tokenId) public view override returns (string memory) {\n        return string(abi.encodePacked(baseURL, tokenId.toString(), \".json\"));\n    }\n\n    function tokenURI(\n        uint256 tokenId\n    ) public view virtual returns (string memory) {\n        return string(abi.encodePacked(baseURL, tokenId.toString()));\n    }\n\n    function mint(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) public onlyRole(MINTER_ROLE) {\n        _mint(account, id, amount, \"0x00\");\n    }\n\n    function addDrop(\n        uint256 tokenId,\n        uint8 share,\n        string calldata table\n    ) public onlyRole(MAINTAINER_ROLE) {\n        _shares[tokenId] = share;\n        _lootTables[table].push(tokenId);\n        // shareSum += share;\n    }\n\n    function getShareSum(string calldata table) public view returns (uint16) {\n        uint16 sum = 0;\n        for (uint256 i = 0; i < _lootTables[table].length; i++) {\n            sum += _shares[_lootTables[table][i]];\n        }\n        return sum;\n    }\n\n    function getShares(uint256 tokenId) public view returns (uint8) {\n        return _shares[tokenId];\n    }\n\n    function getDropsInTable(\n        string calldata table\n    ) public view returns (uint256) {\n        return _lootTables[table].length;\n    }\n\n    function getDropId(\n        string calldata table,\n        uint256 dropIndex\n    ) public view returns (uint256) {\n        return _lootTables[table][dropIndex];\n    }\n\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view override(ERC1155, AccessControl) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/tokens/Region.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\ncontract Region is ERC721, AccessControl, ERC721Enumerable {\n    using Counters for Counters.Counter;\n    using Strings for uint256;\n\n    bytes32 public constant EXPLORER_ROLE = keccak256(\"EXPLORER_ROLE\");\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\"MAINTAINER_ROLE\");\n    string private _metaDataBaseUrl = \"\";\n    Counters.Counter private _tokenIdCounter;\n\n    struct Building {\n        bool initialized;\n        uint8 level;\n        uint16 skill;\n        string[] actions;\n    }\n\n    mapping(uint256 => mapping(string => Building)) public buildings;\n    mapping(uint256 => string[]) public buildingNames;\n\n    mapping(uint256 => string) public regionName;\n\n    constructor() ERC721(\"TwoMoons-Region\", \"2m-REG\") {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(EXPLORER_ROLE, msg.sender);\n        _grantRole(MAINTAINER_ROLE, msg.sender);\n    }\n\n    // ------------------------------------------------------ External Mint\n\n    function safeMint(\n        address to,\n        string calldata name\n    ) public onlyRole(MAINTAINER_ROLE) returns (uint256) {\n        uint256 tokenId = _tokenIdCounter.current();\n        _tokenIdCounter.increment();\n        regionName[tokenId] = name;\n        _safeMint(to, tokenId);\n        return tokenId;\n    }\n\n    // ------------------------------------------------------ Modifiers\n\n    function levelUpBuilding(\n        uint256 tokenId,\n        string calldata buildingName\n    ) public onlyRole(EXPLORER_ROLE) {\n        require(\n            _exists(tokenId),\n            \"ERC721Metadata: URI query for nonexistent token\"\n        );\n\n        buildings[tokenId][buildingName].level++;\n    }\n\n    // ------------------------------------------------------ Owner\n\n    function setMetaDataBaseUrl(\n        string calldata baseUrl\n    ) external onlyRole(MAINTAINER_ROLE) {\n        _metaDataBaseUrl = baseUrl;\n    }\n\n    function addBuilding(\n        uint256 regionId,\n        string memory buildingName,\n        uint16 skill\n    ) public onlyRole(MAINTAINER_ROLE) {\n        require(regionId < totalSupply(), \"Region doesn't exist\");\n        require(\n            !buildings[regionId][buildingName].initialized,\n            \"Building already initialized\"\n        );\n\n        buildingNames[regionId].push(buildingName);\n\n        buildings[regionId][buildingName].initialized = true;\n        buildings[regionId][buildingName].skill = skill;\n        buildings[regionId][buildingName].level = 0;\n    }\n\n    function addAction(\n        uint256 regionId,\n        string memory buildingName,\n        string memory actionName\n    ) public onlyRole(MAINTAINER_ROLE) {\n        require(regionId < totalSupply(), \"Region doesn't exist\");\n        require(\n            buildings[regionId][buildingName].initialized,\n            \"Building not initialized\"\n        );\n\n        buildings[regionId][buildingName].actions.push(actionName);\n    }\n\n    function disableBuilding(\n        uint256 regionId,\n        string memory buildingName\n    ) public onlyRole(MAINTAINER_ROLE) {\n        require(regionId < totalSupply(), \"Region doesn't exist\");\n        require(\n            buildings[regionId][buildingName].initialized,\n            \"Building isn't initialized\"\n        );\n\n        buildings[regionId][buildingName].initialized = false;\n    }\n\n    //------------------------------------------------------ View\n\n    function getBuildingNames(\n        uint256 regionId\n    ) public view returns (string[] memory) {\n        require(regionId < totalSupply(), \"Region doesn't exist\");\n        return buildingNames[regionId];\n    }\n\n    function getBuildingActions(\n        uint256 regionId,\n        string memory buildingName\n    ) public view returns (string[] memory) {\n        require(regionId < totalSupply(), \"Region doesn't exist\");\n        return (buildings[regionId][buildingName].actions);\n    }\n\n    function tokenURI(\n        uint256 tokenId\n    ) public view virtual override returns (string memory) {\n        require(\n            _exists(tokenId),\n            \"ERC721Metadata: URI query for nonexistent token\"\n        );\n\n        return\n            bytes(_metaDataBaseUrl).length > 0\n                ? string(\n                    abi.encodePacked(\n                        _metaDataBaseUrl,\n                        tokenId.toString(),\n                        \".json\"\n                    )\n                )\n                : \"\";\n    }\n\n    function contractURI() public view returns (string memory) {\n        return string(abi.encodePacked(_metaDataBaseUrl, \"contract.json\"));\n    }\n\n    //------------------------------------------------------ Solidity\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 batchSize\n    ) internal override(ERC721, ERC721Enumerable) {\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\n    }\n\n    function supportsInterface(\n        bytes4 interfaceId\n    )\n        public\n        view\n        override(ERC721, ERC721Enumerable, AccessControl)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}