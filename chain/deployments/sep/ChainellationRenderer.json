{
  "address": "0x7AEA948696B9d2a50ed3BeC30037985A857997F4",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "primaryHue",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "secondaryHue",
              "type": "uint16"
            },
            {
              "internalType": "uint8",
              "name": "constellation",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "cloudsAt",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "starSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "funkSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "circleSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "groundSeed",
              "type": "uint256"
            }
          ],
          "internalType": "struct Color.DNA",
          "name": "dna",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "gazes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "daytime",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "decorator",
          "type": "address"
        }
      ],
      "name": "generateSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "day",
          "type": "bool"
        }
      ],
      "name": "getBackgrounds",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        }
      ],
      "name": "getFilters",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "H",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "S",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "L",
              "type": "uint16"
            }
          ],
          "internalType": "struct Color.HSL",
          "name": "primary",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "H",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "S",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "L",
              "type": "uint16"
            }
          ],
          "internalType": "struct Color.HSL",
          "name": "secondary",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "cloudDays",
          "type": "uint8"
        }
      ],
      "name": "getGradients",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "starSeed",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "constellationId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "gazes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "daytime",
          "type": "bool"
        }
      ],
      "name": "getStars",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "psuedorandom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "first",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "second",
          "type": "uint16"
        }
      ],
      "name": "subZero",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x3084c4242b732357929b8ff23c527ff2db1be08d90f6564264aab7859bef2c46",
  "receipt": {
    "to": null,
    "from": "0x0a12A6777fc7D65b1461070648dA9CAE6962fcEe",
    "contractAddress": "0x7AEA948696B9d2a50ed3BeC30037985A857997F4",
    "transactionIndex": 21,
    "gasUsed": "2680322",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xddf0579426477cd111d692321258a3fd9af7b6be52190aed23855e3c7774c70c",
    "transactionHash": "0x3084c4242b732357929b8ff23c527ff2db1be08d90f6564264aab7859bef2c46",
    "logs": [],
    "blockNumber": 4701819,
    "cumulativeGasUsed": "6122462",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "56930af7b938deac2ecf057e8304b3a4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"primaryHue\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"secondaryHue\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"constellation\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"cloudsAt\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"starSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funkSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circleSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"groundSeed\",\"type\":\"uint256\"}],\"internalType\":\"struct Color.DNA\",\"name\":\"dna\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"gazes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"daytime\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"decorator\",\"type\":\"address\"}],\"name\":\"generateSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"day\",\"type\":\"bool\"}],\"name\":\"getBackgrounds\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"getFilters\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"H\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"S\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"L\",\"type\":\"uint16\"}],\"internalType\":\"struct Color.HSL\",\"name\":\"primary\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"H\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"S\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"L\",\"type\":\"uint16\"}],\"internalType\":\"struct Color.HSL\",\"name\":\"secondary\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"cloudDays\",\"type\":\"uint8\"}],\"name\":\"getGradients\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"starSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"constellationId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"gazes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"daytime\",\"type\":\"bool\"}],\"name\":\"getStars\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"psuedorandom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"first\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"second\",\"type\":\"uint16\"}],\"name\":\"subZero\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/chainellations/ChainellationRenderer.sol\":\"ChainellationRenderer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Color.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary Color {\\n    using Strings for uint256;\\n\\n    struct DNA {\\n        uint256 tokenId;\\n        uint16 primaryHue;\\n        uint16 secondaryHue;\\n        uint8 constellation;\\n        uint8 cloudsAt;\\n        uint256 starSeed;\\n        uint256 funkSeed;\\n        uint256 circleSeed;\\n        uint256 groundSeed;\\n        // uint256 constellationSeed;\\n    }\\n\\n    struct HSL {\\n        uint16 H;\\n        uint16 S;\\n        uint16 L;\\n    }\\n\\n    struct Point {\\n        uint16 x;\\n        uint16 y;\\n    }\\n\\n    struct Circle {\\n        uint16 x;\\n        uint16 y;\\n        uint16 r;\\n        uint8 count;\\n        uint16 stroke;\\n        bool active;\\n    }\\n\\n    function HSLtoString(HSL memory color) public pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"hsl(\\\",\\n                    ((uint256)(color.H)).toString(),\\n                    \\\",\\\",\\n                    ((uint256)(color.S)).toString(),\\n                    \\\"%,\\\",\\n                    ((uint256)(color.L)).toString(),\\n                    \\\"%)\\\"\\n                )\\n            );\\n    }\\n\\n    function toString(uint16 num) public pure returns (string memory) {\\n        return ((uint256)(num)).toString();\\n    }\\n\\n    function psuedorandom(\\n        uint256 tokenId,\\n        uint256 nonce\\n    ) public pure returns (uint256) {\\n        return uint(keccak256(abi.encodePacked(tokenId, nonce)));\\n    }\\n\\n    function wiggle(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        uint16 base,\\n        uint16 offset\\n    ) public pure returns (uint16) {\\n        uint16 wiggleAmount = (uint16)(psuedorandom(tokenId, nonce) % offset);\\n        if ((uint8)(psuedorandom(tokenId, nonce) % 2) == 0) {\\n            return base + wiggleAmount;\\n        } else {\\n            return subZero(base, wiggleAmount);\\n        }\\n    }\\n\\n    function wiggleString(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        uint16 base,\\n        uint16 offset\\n    ) public pure returns (string memory) {\\n        return toString(wiggle(tokenId, nonce, base, offset));\\n    }\\n\\n    function wiggleUp(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        uint16 base,\\n        uint16 offset\\n    ) public pure returns (uint16) {\\n        uint16 wiggleAmount = (uint16)(psuedorandom(tokenId, nonce) % offset);\\n        return base + wiggleAmount;\\n    }\\n\\n    function subZero(uint16 first, uint16 second) public pure returns (uint16) {\\n        if (first > second) {\\n            return first - second;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function flipColor(\\n        Color.HSL memory color\\n    ) public pure returns (Color.HSL memory) {\\n        uint16 newH = color.H + 180 > 360 ? color.H - 180 : color.H + 180;\\n        return Color.HSL(newH, color.S, color.L);\\n    }\\n\\n    // TODO this isn't actually the rotate function because it zeros out\\n    function rotateColor(\\n        Color.HSL memory color,\\n        uint16 amount\\n    ) public pure returns (Color.HSL memory) {\\n        uint16 hue = (color.H + amount) % 360;\\n        return Color.HSL(hue, color.S, color.L);\\n    }\\n\\n    function genDNA(\\n        uint256 tokenId,\\n        uint32 colors,\\n        uint8 clouds,\\n        uint8 constellation\\n    ) public pure returns (DNA memory) {\\n        DNA memory dna;\\n        dna.tokenId = tokenId;\\n        dna.primaryHue = uint16(colors >> 16);\\n        dna.secondaryHue = uint16(colors);\\n        dna.starSeed = psuedorandom(tokenId, 123);\\n        dna.funkSeed = psuedorandom(tokenId, 234);\\n        dna.circleSeed = psuedorandom(tokenId, 345);\\n        dna.groundSeed = psuedorandom(tokenId, 456);\\n        dna.constellation = constellation;\\n        dna.cloudsAt = clouds;\\n\\n        return dna;\\n    }\\n\\n    function defaultColors(uint256 tokenId) public pure returns (uint32) {\\n        uint16 primary = uint16((tokenId % 16) * 10);\\n        uint16 secondary = rotateColor(HSL(primary, 0, 0), 60).H;\\n        return (uint32(primary) << 16) | uint32(secondary);\\n    }\\n}\\n\",\"keccak256\":\"0x7d1b7a78a120bcbd3d1f3bb9951c2c3f4882feec426a8ef18d971a3e1fcff815\",\"license\":\"MIT\"},\"contracts/chainellations/ChainellationRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"../Color.sol\\\";\\nimport \\\"./Constellations.sol\\\";\\nimport \\\"../interfaces/IDecorations.sol\\\";\\nimport \\\"../interfaces/IChainellationRenderer.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract ChainellationRenderer is IChainellationRenderer {\\n    function generateSVG(\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime,\\n        address decorator\\n    ) public view returns (string memory) {\\n        Color.HSL memory primary = Color.HSL(dna.primaryHue, 100, 30);\\n        Color.HSL memory secondary = Color.HSL(dna.secondaryHue, 100, 30);\\n        // console.log(\\\"Colors are %s and %s \\\", primary.H, secondary.H);\\n        string memory svg = string.concat(\\n            '<svg viewBox=\\\"0 0 512 512\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><clipPath id=\\\"box\\\"><path d=\\\"M0 0h512v512H0z\\\"/></clipPath><defs>',\\n            getGradients(dna.starSeed, primary, secondary, dna.cloudsAt),\\n            getFilters(dna.funkSeed),\\n            '</defs><svg viewBox=\\\"0 0 512 512\\\" clip-path=\\\"url(#box)\\\">',\\n            getBackgrounds(daytime),\\n            // '<path d=\\\"M 0, 340 h 512\\\" stroke=\\\"white\\\" opacity=\\\"0.4\\\"/>',\\n            // '<path d=\\\"M 0, 170 h 512\\\" stroke=\\\"white\\\" opacity=\\\"0.4\\\"/>',\\n            // '<path d=\\\"M 170, 0 v 512\\\" stroke=\\\"white\\\" opacity=\\\"0.4\\\"/>',\\n            // '<path d=\\\"M 340, 0 v 512\\\" stroke=\\\"white\\\" opacity=\\\"0.4\\\"/>',\\n            // '<path d=\\\"M250 80 h 180 v 180 h -180 v-180\\\" stroke=\\\"white\\\" fill=\\\"none\\\"/>',\\n\\n            // buildStars(dna.starSeed, dna.constellationSeed, gazes, daytime),\\n            getStars(dna.starSeed, dna.constellation, gazes, daytime),\\n            getDecos(decorator, dna, gazes, daytime),\\n            // getFocus(decorator, dna, gazes, daytime),\\n            // getSkyMath(decorator, dna, gazes, daytime),\\n            // getDecorationOne(decorator, dna, gazes, daytime),\\n            // getSilhouette(decorator, dna, gazes, daytime),\\n            \\\"</svg>\\\",\\n            \\\"</svg>\\\"\\n        );\\n        return svg;\\n    }\\n\\n    function getGradients(\\n        uint256 seed,\\n        Color.HSL memory primary,\\n        Color.HSL memory secondary,\\n        uint8 cloudDays\\n    ) public pure returns (string memory) {\\n        string memory rotation = Color.toString(\\n            (uint16)(Color.psuedorandom(seed, 123) % 45)\\n        );\\n        string memory sky = string.concat(\\n            '<linearGradient id=\\\"skyGradient\\\" gradientTransform=\\\"rotate(',\\n            rotation,\\n            ')\\\">'\\n        );\\n\\n        sky = string.concat(\\n            sky,\\n            '<stop offset=\\\"0%\\\"',\\n            ' stop-color=\\\"',\\n            Color.HSLtoString(primary),\\n            '\\\"/>'\\n        );\\n\\n        sky = string.concat(\\n            sky,\\n            '<stop offset=\\\"100%\\\"',\\n            ' stop-color=\\\"',\\n            Color.HSLtoString(secondary),\\n            '\\\"/>'\\n        );\\n\\n        sky = string.concat(\\n            sky,\\n            '</linearGradient><linearGradient id=\\\"cloudGradient\\\" gradientTransform=\\\"rotate(',\\n            rotation,\\n            ')\\\"><stop stop-opacity=\\\".',\\n            Color.toString(cloudDays == 0 ? 1 : cloudDays),\\n            '\\\" offset=\\\"15%\\\"/><stop stop-opacity=\\\".5\\\" offset=\\\"30%\\\"/>',\\n            '<stop stop-opacity=\\\".',\\n            Color.toString(cloudDays == 0 ? 1 : cloudDays),\\n            '\\\" offset=\\\"50%\\\"/></linearGradient>'\\n        );\\n\\n        Color.HSL memory bright = Color.rotateColor(primary, 240);\\n        bright.L = 90;\\n        sky = string.concat(\\n            sky,\\n            '<linearGradient id=\\\"dayGradient\\\" gradientTransform=\\\"rotate(13)\\\">',\\n            '<stop offset=\\\"0%\\\" stop-color=\\\"',\\n            Color.HSLtoString(Color.rotateColor(primary, 180)),\\n            '\\\"/>',\\n            '<stop offset=\\\"100%\\\" stop-color=\\\"',\\n            Color.HSLtoString(Color.rotateColor(secondary, 180)),\\n            '\\\"/>',\\n            \\\"</linearGradient>\\\"\\n        );\\n\\n        return sky;\\n    }\\n\\n    function getBackgrounds(bool day) public pure returns (string memory) {\\n        string memory bg = \\\"\\\";\\n\\n        bg = string.concat(\\n            '<rect width=\\\"100%\\\" height=\\\"100%\\\" filter=\\\"url(#stars)\\\" opacity=\\\"',\\n            Color.toString(day ? 0 : 1),\\n            '\\\"/>',\\n            '<path fill=\\\"url(#dayGradient)\\\" d=\\\"M0 0h512v512H0z\\\" opacity=\\\"',\\n            Color.toString(day ? 1 : 0),\\n            '\\\"  filter=\\\"url(#light)\\\"/>',\\n            '<path fill=\\\"url(#skyGradient)\\\"  d=\\\"M0 0h512v512H0z\\\" opacity=\\\".',\\n            Color.toString(day ? 0 : 7),\\n            '\\\"/>',\\n            '<path fill=\\\"url(#cloudGradient)\\\" filter=\\\"url(#clouds)\\\" d=\\\"M-512-512h1536v1536h-2048z\\\"><animateTransform attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" type=\\\"translate\\\" from=\\\"0\\\" to=\\\"512 512\\\" dur=\\\"50s\\\" repeatCount=\\\"indefinite\\\"/></path>'\\n        );\\n\\n        return bg;\\n    }\\n\\n    function getFilters(uint256 seed) public pure returns (string memory) {\\n        string memory filters = \\\"\\\";\\n        filters = string.concat(\\n            filters,\\n            '<filter id=\\\"stars\\\"><feTurbulence baseFrequency=\\\".35\\\" seed=\\\"',\\n            Color.toString((uint16)(Color.psuedorandom(seed, 123) % 10000)),\\n            '\\\"/>',\\n            '<feColorMatrix values=\\\"0 0 0 9 -4 0 0 0 9 -4 0 0 0 9 -4 0 0 0 0 1\\\"/></filter>'\\n        );\\n        filters = string.concat(\\n            filters,\\n            '<filter id=\\\"clouds\\\" x=\\\"-50%\\\" y=\\\"-50%\\\" height=\\\"200%\\\" width=\\\"200%\\\"><feGaussianBlur in=\\\"sky\\\" stdDeviation=\\\"20\\\" result=\\\"skyblur\\\"/>',\\n            '<feTurbulence type=\\\"fractalNoise\\\" baseFrequency=\\\".01\\\" numOctaves=\\\"5\\\" result=\\\"skynoise\\\" seed=\\\"',\\n            Color.toString((uint16)(Color.psuedorandom(seed, 123) % 10000)),\\n            '\\\"/>',\\n            '<feColorMatrix values=\\\"1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 3 -1 -1 0 0\\\"/>',\\n            '<feComposite operator=\\\"in\\\" in2=\\\"SourceGraphic\\\"/></filter>'\\n        );\\n\\n        filters = string.concat(\\n            filters,\\n            '<filter id=\\\"light\\\"><feSpecularLighting result=\\\"specOut\\\" specularExponent=\\\"100\\\" lighting-color=\\\"white\\\">',\\n            '<fePointLight x=\\\"10\\\" y=\\\"70\\\" z=\\\"300\\\"/></feSpecularLighting>',\\n            '<feComposite in=\\\"SourceGraphic\\\" in2=\\\"specOut\\\" operator=\\\"arithmetic\\\" k1=\\\"0\\\" k2=\\\"1\\\" k3=\\\"1\\\" k4=\\\"0\\\"/></filter>'\\n        );\\n\\n        return filters;\\n    }\\n\\n    function getStars(\\n        uint256 starSeed,\\n        uint8 constellationId,\\n        uint256 gazes,\\n        bool daytime\\n    ) public view returns (string memory) {\\n        if (daytime) {\\n            return \\\"\\\";\\n        }\\n\\n        uint8 starCount = 0;\\n        uint8 constCount = 0;\\n        if (gazes > 50) {\\n            constCount = 20;\\n            starCount = 30;\\n            gazes = 50;\\n        }\\n        while (starCount + constCount < gazes) {\\n            if (Color.psuedorandom(starSeed, constCount + starCount) % 3 == 1) {\\n                constCount++;\\n            } else {\\n                starCount++;\\n            }\\n        }\\n\\n        (string memory constellation, uint8 leftovers) = drawConstellation(\\n            constellationId,\\n            constCount\\n        );\\n        string memory stars = \\\"\\\";\\n\\n        console.log(\\\"constCount \\\", constCount);\\n        console.log(\\\"starCount \\\", starCount);\\n        console.log(\\\"leftovers \\\", leftovers);\\n        stars = string.concat(stars, constellation);\\n        stars = string.concat(\\n            stars,\\n            drawStars(starSeed, starCount + leftovers)\\n        );\\n        return stars;\\n    }\\n\\n    function drawStars(\\n        uint256 starSeed,\\n        uint8 toShow\\n    ) private pure returns (string memory) {\\n        string memory stars = '<g fill=\\\"#fff\\\">';\\n        string memory x = \\\"\\\";\\n        string memory y = \\\"\\\";\\n        uint8 seed = 0;\\n        for (uint8 i = 0; i < toShow; i++) {\\n            seed = (uint8)(Color.psuedorandom(starSeed, i) % 3);\\n            x = Color.toString(\\n                (uint16)(Color.psuedorandom(starSeed, i) % 462) + 25\\n            );\\n\\n            y = Color.toString(\\n                (uint16)(Color.psuedorandom(starSeed + seed, i) % 462) + 25\\n            );\\n            if (seed == 0) {\\n                stars = string.concat(\\n                    stars,\\n                    '<circle r=\\\"1\\\" cx=\\\"',\\n                    x,\\n                    '\\\" cy=\\\"',\\n                    y,\\n                    '\\\" fill=\\\"#fff\\\"  opacity=\\\"1\\\">',\\n                    '<animate attributeName=\\\"r\\\" values=\\\"0;3;1\\\" dur=\\\"1s\\\"/></circle>'\\n                );\\n            } else if (seed == 1) {\\n                stars = string.concat(\\n                    stars,\\n                    '<path d=\\\"M ',\\n                    x,\\n                    \\\",\\\",\\n                    y,\\n                    'c 7,0 7,0 7,-7 c 0,7 0,7 7,7 c -7,0 -7,0 -7,7 c 0,-7 0,-7 -7,-7\\\">',\\n                    \\\"</path>\\\"\\n                    // '<animateTransform attributeName=\\\"transform\\\" type=\\\"scale\\\" from=\\\"0 0\\\" to=\\\"1 1\\\" begin=\\\"0s\\\" dur=\\\"0.5s\\\" repeatCount=\\\"1\\\"/></path>'\\n                );\\n            } else if (seed == 2) {\\n                stars = string.concat(\\n                    stars,\\n                    '<circle r=\\\"3\\\" cx=\\\"',\\n                    x,\\n                    '\\\" cy=\\\"',\\n                    y,\\n                    '\\\" opacity=\\\"0.3\\\"><animate attributeName=\\\"r\\\" values=\\\"0;5;3\\\" dur=\\\"1s\\\"/></circle>',\\n                    '<circle r=\\\"1\\\" cx=\\\"',\\n                    x,\\n                    '\\\" cy=\\\"',\\n                    y,\\n                    '\\\"><animate attributeName=\\\"r\\\" values=\\\"0;3;1\\\" dur=\\\"1s\\\"/></circle>'\\n                );\\n            }\\n        }\\n        return string.concat(stars, \\\"</g>\\\");\\n    }\\n\\n    function drawConstellation(\\n        uint8 constellationID,\\n        uint8 toShow\\n    ) private view returns (string memory, uint8 leftovers) {\\n        (string memory constellation, uint8 count) = Constellations\\n            .getConstellation(constellationID, toShow);\\n        return (\\n            string.concat('<g id=\\\"constellation\\\">', constellation, \\\"</g>\\\"),\\n            count\\n        );\\n    }\\n\\n    function psuedorandom(\\n        uint256 tokenId,\\n        uint256 nonce\\n    ) public pure returns (uint256) {\\n        return Color.psuedorandom(tokenId, nonce);\\n    }\\n\\n    function subZero(uint16 first, uint16 second) public pure returns (uint16) {\\n        return Color.subZero(first, second);\\n    }\\n\\n    function getDecos(\\n        address decorator,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) private view returns (string memory) {\\n        return\\n            string.concat(\\n                // getFocus(dna, gazes, daytime),\\n                getSkyMath(decorator, dna, gazes, daytime),\\n                getDecorationOne(decorator, dna, gazes, daytime),\\n                getSilhouette(decorator, dna, gazes, daytime)\\n            );\\n    }\\n\\n    function getSilhouette(\\n        address decorator,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) private view returns (string memory) {\\n        if (decorator == address(0)) return \\\"\\\";\\n        IDecorations deco = IDecorations(decorator);\\n        return deco.getSilhouette(dna, gazes, daytime);\\n    }\\n\\n    function getSkyMath(\\n        address decorator,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) private view returns (string memory) {\\n        if (decorator == address(0)) return \\\"\\\";\\n        IDecorations deco = IDecorations(decorator);\\n        return deco.getSkyMath(dna, gazes, daytime);\\n    }\\n\\n    function getDecorationOne(\\n        address decorator,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) private view returns (string memory) {\\n        if (decorator == address(0)) return \\\"\\\";\\n        IDecorations deco = IDecorations(decorator);\\n        return deco.getDecorationOne(dna, gazes, daytime);\\n    }\\n}\\n\",\"keccak256\":\"0xefbe9822cff5300cf556b3c8657c52a8e717fbb73347d86873932900b438f60e\",\"license\":\"MIT\"},\"contracts/chainellations/Constellations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary Constellations {\\n    using Strings for uint256;\\n\\n    function getConstellation(\\n        uint256 seed,\\n        uint8 gazed\\n    ) public view returns (string memory, uint8 leftovers) {\\n        if (seed == 0) {\\n            return Aries(gazed);\\n        } else if (seed == 1) {\\n            return Sagittarius(gazed);\\n        } else if (seed == 2) {\\n            return Capricorn(gazed);\\n        } else if (seed == 3) {\\n            return Aquarius(gazed);\\n        } else if (seed == 4) {\\n            return Pisces(gazed);\\n        } else if (seed == 5) {\\n            return Scorpio(gazed);\\n        } else if (seed == 6) {\\n            return Libra(gazed);\\n        } else if (seed == 7) {\\n            return Virgo(gazed);\\n        } else if (seed == 8) {\\n            return Leo(gazed);\\n        } else if (seed == 9) {\\n            return Cancer(gazed);\\n        } else if (seed == 10) {\\n            return Gemini(gazed);\\n        } else if (seed == 11) {\\n            return Taurus(gazed);\\n        } else if (seed == 12) {\\n            return Pegasus(gazed);\\n        } else if (seed == 13) {\\n            return UrsaMinor(gazed);\\n        } else {\\n            return Cygnus(gazed);\\n        }\\n    }\\n\\n    function buildStar(\\n        string[] memory stars,\\n        string memory open,\\n        string memory close,\\n        uint8 show\\n    ) public view returns (string memory, uint8 leftovers) {\\n        uint8 overflow = 0;\\n        console.log(\\\"show from buildStar: \\\", show);\\n        console.log(\\\"stars length from buildStar: \\\", stars.length);\\n        if (show > stars.length) {\\n            overflow = show - (uint8)(stars.length);\\n            show = (uint8)(stars.length);\\n        }\\n\\n        console.log(\\\"overflow from buildStar: \\\", overflow);\\n        string memory constellation = \\\"\\\";\\n        constellation = string.concat(constellation, open);\\n        for (uint8 i = 0; i < show; i++) {\\n            constellation = string.concat(constellation, stars[i]);\\n        }\\n        if (show == stars.length) {\\n            constellation = string.concat(constellation, close);\\n        } else {\\n            constellation = string.concat(constellation, \\\"</g>\\\");\\n        }\\n        // return (constellation, ((uint8)(stars.length) - show));\\n        return (constellation, overflow);\\n    }\\n\\n    function Aries(\\n        uint8 show\\n    ) public view returns (string memory, uint8 leftovers) {\\n        string[] memory stars = new string[](6);\\n\\n        string\\n            memory open = '<g transform=\\\"translate(316,133), rotate(0)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n\\n        stars[0] = '<circle cx=\\\"-30\\\" cy=\\\"60\\\" r=\\\"2\\\"/>';\\n        stars[1] = '<circle cx=\\\"-10\\\" cy=\\\"45\\\" r=\\\"2\\\"/>';\\n        stars[2] = '<circle cx=\\\"5\\\" cy=\\\"0\\\" r=\\\"2\\\"/>';\\n        stars[3] = '<circle cx=\\\"55\\\" cy=\\\"10\\\" r=\\\"2\\\"/>';\\n        stars[4] = '<circle cx=\\\"80\\\" cy=\\\"30\\\" r=\\\"2\\\"/>';\\n        stars[5] = '<circle cx=\\\"85\\\" cy=\\\"45\\\" r=\\\"2\\\"/>';\\n\\n        string\\n            memory close = '<path d=\\\"m -30 60 L -10 45 L 5 0 L 55 10 L 80 30 L 85 45\\\" fill=\\\"none\\\" stroke=\\\"white\\\" opacity=\\\".5\\\"/></g>';\\n        return buildStar(stars, open, close, show);\\n    }\\n\\n    function Sagittarius(\\n        uint8 show\\n    ) public view returns (string memory, uint8 leftovers) {\\n        string\\n            memory open = '<g transform=\\\"translate(234,-290), rotate(0)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n        string[] memory stars = new string[](20);\\n\\n        stars[0] = '<circle r=\\\"2\\\" cx=\\\"169\\\" cy=\\\"447\\\"/>';\\n        stars[1] = '<circle r=\\\"2\\\" cx=\\\"148\\\" cy=\\\"462\\\"/>';\\n        stars[2] = '<circle r=\\\"2\\\" cx=\\\"139\\\" cy=\\\"482\\\"/>';\\n        stars[3] = '<circle r=\\\"2\\\" cx=\\\"136\\\" cy=\\\"419\\\"/>';\\n        stars[4] = '<circle r=\\\"2\\\" cx=\\\"134\\\" cy=\\\"457\\\"/>';\\n        stars[5] = '<circle r=\\\"2\\\" cx=\\\"132\\\" cy=\\\"475\\\"/>';\\n        stars[6] = '<circle r=\\\"2\\\" cx=\\\"128\\\" cy=\\\"441\\\"/>';\\n        stars[7] = '<circle r=\\\"2\\\" cx=\\\"110\\\" cy=\\\"449\\\"/>';\\n        stars[8] = '<circle r=\\\"2\\\" cx=\\\"100\\\" cy=\\\"446\\\"/>';\\n        stars[9] = '<circle r=\\\"2\\\" cx=\\\"97\\\" cy=\\\"460\\\"/>';\\n        stars[10] = '<circle r=\\\"2\\\" cx=\\\"97\\\" cy=\\\"421\\\"/>';\\n        stars[11] = '<circle r=\\\"2\\\" cx=\\\"91\\\" cy=\\\"519\\\"/>';\\n        stars[12] = '<circle r=\\\"2\\\" cx=\\\"91\\\" cy=\\\"453\\\"/>';\\n        stars[13] = '<circle r=\\\"2\\\" cx=\\\"90\\\" cy=\\\"426\\\"/>';\\n        stars[14] = '<circle r=\\\"2\\\" cx=\\\"88\\\" cy=\\\"507\\\"/>';\\n        stars[15] = '<circle r=\\\"2\\\" cx=\\\"81\\\" cy=\\\"424\\\"/>';\\n        stars[16] = '<circle r=\\\"2\\\" cx=\\\"71\\\" cy=\\\"515\\\"/>';\\n        stars[17] = '<circle r=\\\"2\\\" cx=\\\"66\\\" cy=\\\"415\\\"/>';\\n        stars[18] = '<circle r=\\\"2\\\" cx=\\\"62\\\" cy=\\\"446\\\"/>';\\n        stars[19] = '<circle r=\\\"2\\\" cx=\\\"42\\\" cy=\\\"468\\\"/>';\\n\\n        string\\n            memory close = '<path d=\\\"m169, 447 L 148, 462 L 134,457 L 132, 475 L 139, 482 M 134,457 L 128,441 L 136,419 M 128, 441 L 110, 449 L 100,446 L 90,426 L 97,421 M 90,426 L 81,424 L 66,415 M 110, 449 L 97, 460 L 91, 453 L 100,446 M 91,453 L 62, 446 L 42, 468 L 71, 515 L 88,507 M 71,515 L 91,519\\\" stroke=\\\"#fff\\\" opacity=\\\".5\\\" fill=\\\"none\\\"/></g>';\\n\\n        return buildStar(stars, open, close, show);\\n    }\\n\\n    function Capricorn(\\n        uint8 show\\n    ) public view returns (string memory, uint8 leftovers) {\\n        string[] memory stars = new string[](11);\\n\\n        string\\n            memory open = '<g transform=\\\"translate(114,-300), rotate(0)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n        stars[0] = '<circle r=\\\"2\\\" cx=\\\"254\\\" cy=\\\"492\\\"/>';\\n        stars[1] = '<circle r=\\\"2\\\" cx=\\\"253\\\" cy=\\\"483\\\"/>';\\n        stars[2] = '<circle r=\\\"2\\\" cx=\\\"241\\\" cy=\\\"498\\\"/>';\\n        stars[3] = '<circle r=\\\"2\\\" cx=\\\"232\\\" cy=\\\"424\\\"/>';\\n        stars[4] = '<circle r=\\\"2\\\" cx=\\\"231\\\" cy=\\\"414\\\"/>';\\n        stars[5] = '<circle r=\\\"2\\\" cx=\\\"221\\\" cy=\\\"510\\\"/>';\\n        stars[6] = '<circle r=\\\"2\\\" cx=\\\"212\\\" cy=\\\"481\\\"/>';\\n        stars[7] = '<circle r=\\\"2\\\" cx=\\\"202\\\" cy=\\\"514\\\"/>';\\n        stars[8] = '<circle r=\\\"2\\\" cx=\\\"201\\\" cy=\\\"495\\\"/>';\\n        stars[9] = '<circle r=\\\"2\\\" cx=\\\"191\\\" cy=\\\"511\\\"/>';\\n        stars[10] = '<circle r=\\\"2\\\" cx=\\\"189\\\" cy=\\\"519\\\"/>';\\n        string\\n            memory close = '<path d=\\\"M 254, 492 L 241, 498 L 221, 510 L 202,514 L 189, 519 L 191, 511 L 201,495 L 212, 481 L 232, 424 L 231 414 M 232, 424 L 253, 483\\\" stroke=\\\"#fff\\\" opacity=\\\".5\\\" fill=\\\"none\\\"/></g>';\\n        return buildStar(stars, open, close, show);\\n    }\\n\\n    function Aquarius(\\n        uint8 show\\n    ) public view returns (string memory, uint8 leftovers) {\\n        string[] memory stars = new string[](13);\\n        string\\n            memory open = '<g transform=\\\"translate(-6,-300), rotate(0)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n        stars[0] = '<circle r=\\\"2\\\" cx=\\\"378\\\" cy=\\\"406 \\\"/>';\\n        stars[1] = '<circle r=\\\"2\\\" cx=\\\"372\\\" cy=\\\"530 \\\"/>';\\n        stars[2] = '<circle r=\\\"2\\\" cx=\\\"354\\\" cy=\\\"517 \\\"/>';\\n        stars[3] = '<circle r=\\\"2\\\" cx=\\\"347\\\" cy=\\\"512 \\\"/>';\\n        stars[4] = '<circle r=\\\"2\\\" cx=\\\"339\\\" cy=\\\"435 \\\"/>';\\n        stars[5] = '<circle r=\\\"2\\\" cx=\\\"335\\\" cy=\\\"476 \\\"/>';\\n        stars[6] = '<circle r=\\\"2\\\" cx=\\\"325\\\" cy=\\\"515 \\\"/>';\\n        stars[7] = '<circle r=\\\"2\\\" cx=\\\"319\\\" cy=\\\"534 \\\"/>';\\n        stars[8] = '<circle r=\\\"2\\\" cx=\\\"302\\\" cy=\\\"459 \\\"/>';\\n        stars[9] = '<circle r=\\\"2\\\" cx=\\\"302\\\" cy=\\\"480 \\\"/>';\\n        stars[10] = '<circle r=\\\"2\\\" cx=\\\"292\\\" cy=\\\"484 \\\"/>';\\n        stars[11] = '<circle r=\\\"2\\\" cx=\\\"289\\\" cy=\\\"492 \\\"/>';\\n        stars[12] = '<circle r=\\\"2\\\" cx=\\\"365\\\" cy=\\\"472 \\\"/>';\\n        string\\n            memory close = '<path d=\\\"M378, 406 L 339, 435 L 302, 459 L 302, 480 L 292 484 L 289, 492 L 319 534 L 325,515 L 347,512 L 354,517 L 372,530 M 302,459 L 335,476 L 365 472\\\" fill=\\\"none\\\" stroke=\\\"#fff\\\" opacity=\\\".5\\\"/></g>';\\n        return buildStar(stars, open, close, show);\\n    }\\n\\n    function Pisces(\\n        uint8 show\\n    ) public view returns (string memory, uint8 leftovers) {\\n        string[] memory stars = new string[](17);\\n\\n        string\\n            memory open = '<g transform=\\\"translate(14,-170), rotate(0) scale(0.7)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n        stars[0] = '<circle r=\\\"2.86\\\" cx=\\\"523\\\" cy=\\\"547 \\\"/>';\\n        stars[1] = '<circle r=\\\"2.86\\\" cx=\\\"502\\\" cy=\\\"526 \\\"/>';\\n        stars[2] = '<circle r=\\\"2.86\\\" cx=\\\"495\\\" cy=\\\"541 \\\"/>';\\n        stars[3] = '<circle r=\\\"2.86\\\" cx=\\\"482\\\" cy=\\\"502 \\\"/>';\\n        stars[4] = '<circle r=\\\"2.86\\\" cx=\\\"475\\\" cy=\\\"484 \\\"/>';\\n        stars[5] = '<circle r=\\\"2.86\\\" cx=\\\"474\\\" cy=\\\"417 \\\"/>';\\n        stars[6] = '<circle r=\\\"2.86\\\" cx=\\\"471\\\" cy=\\\"400 \\\"/>';\\n        stars[7] = '<circle r=\\\"2.86\\\" cx=\\\"468\\\" cy=\\\"427 \\\"/>';\\n        stars[8] = '<circle r=\\\"2.86\\\" cx=\\\"465\\\" cy=\\\"539 \\\"/>';\\n        stars[9] = '<circle r=\\\"2.86\\\" cx=\\\"459\\\" cy=\\\"445 \\\"/>';\\n        stars[10] = '<circle r=\\\"2.86\\\" cx=\\\"457\\\" cy=\\\"395 \\\"/>';\\n        stars[11] = '<circle r=\\\"2.86\\\" cx=\\\"454\\\" cy=\\\"425 \\\"/>';\\n        stars[12] = '<circle r=\\\"2.86\\\" cx=\\\"448\\\" cy=\\\"401 \\\"/>';\\n        stars[13] = '<circle r=\\\"2.86\\\" cx=\\\"445\\\" cy=\\\"413 \\\"/>';\\n        stars[14] = '<circle r=\\\"2.86\\\" cx=\\\"425\\\" cy=\\\"541 \\\"/>';\\n        stars[15] = '<circle r=\\\"2.86\\\" cx=\\\"415\\\" cy=\\\"553 \\\"/>';\\n        stars[16] = '<circle r=\\\"2.86\\\" cx=\\\"400\\\" cy=\\\"544 \\\"/>';\\n        string\\n            memory close = '<path d=\\\"m400, 544 L 415, 553 L 425,541 L465, 539 L 495, 541 L 523, 547 L 502, 526 L 482, 502 L 475, 484 L 459, 445 L 454, 425 L 445, 413 L 448, 401 L 457, 395 L 471, 400 L 474, 417 L 468, 427 L 454 425 \\\" stroke=\\\"#fff\\\" opacity=\\\".5\\\" fill=\\\"none\\\" stroke-width=\\\"1.43\\\"/></g>';\\n        return buildStar(stars, open, close, show);\\n    }\\n\\n    function Scorpio(\\n        uint8 show\\n    ) public view returns (string memory, uint8 leftovers) {\\n        string[] memory stars = new string[](15);\\n\\n        string\\n            memory open = '<g transform=\\\"translate(-121,-120), rotate(0)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n        stars[0] = '<circle r=\\\"2\\\" cx=\\\"513\\\" cy=\\\"256 \\\"/>';\\n        stars[1] = '<circle r=\\\"2\\\" cx=\\\"513\\\" cy=\\\"268 \\\"/>';\\n        stars[2] = '<circle r=\\\"2\\\" cx=\\\"510\\\" cy=\\\"248 \\\"/>';\\n        stars[3] = '<circle r=\\\"2\\\" cx=\\\"489\\\" cy=\\\"264 \\\"/>';\\n        stars[4] = '<circle r=\\\"2\\\" cx=\\\"481\\\" cy=\\\"268 \\\"/>';\\n        stars[5] = '<circle r=\\\"2\\\" cx=\\\"475\\\" cy=\\\"274 \\\"/>';\\n        stars[6] = '<circle r=\\\"2\\\" cx=\\\"458\\\" cy=\\\"296 \\\"/>';\\n        stars[7] = '<circle r=\\\"2\\\" cx=\\\"456\\\" cy=\\\"314 \\\"/>';\\n        stars[8] = '<circle r=\\\"2\\\" cx=\\\"452\\\" cy=\\\"328 \\\"/>';\\n        stars[9] = '<circle r=\\\"2\\\" cx=\\\"435\\\" cy=\\\"333 \\\"/>';\\n        stars[10] = '<circle r=\\\"2\\\" cx=\\\"419\\\" cy=\\\"304 \\\"/>';\\n        stars[11] = '<circle r=\\\"2\\\" cx=\\\"415\\\" cy=\\\"332 \\\"/>';\\n        stars[12] = '<circle r=\\\"2\\\" cx=\\\"410\\\" cy=\\\"313 \\\"/>';\\n        stars[13] = '<circle r=\\\"2\\\" cx=\\\"405\\\" cy=\\\"320 \\\"/>';\\n        stars[14] = '<circle r=\\\"2\\\" cx=\\\"513\\\" cy=\\\"281 \\\"/>';\\n        string\\n            memory close = '<path d=\\\"m419, 304 L 410, 313 L 405, 320 L 415, 332 L 435, 333 L  452, 328 L 456, 314 L 458, 296 L 475, 274 L 481, 268 L 489, 264 L 513, 256 L 510, 248 M 513, 256 L 513, 268 L 513 281\\\" stroke=\\\"#fff\\\" opacity=\\\".5\\\" fill=\\\"none\\\"/></g>';\\n        return buildStar(stars, open, close, show);\\n    }\\n\\n    function Libra(\\n        uint8 show\\n    ) public view returns (string memory, uint8 leftovers) {\\n        string[] memory stars = new string[](8);\\n        string\\n            memory open = '<g transform=\\\"translate(4,-120), rotate(0)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n        stars[0] = '<circle r=\\\"2\\\" cx=\\\"361\\\" cy=\\\"272 \\\"/>';\\n        stars[1] = '<circle r=\\\"2\\\" cx=\\\"356\\\" cy=\\\"307 \\\"/>';\\n        stars[2] = '<circle r=\\\"2\\\" cx=\\\"335\\\" cy=\\\"329 \\\"/>';\\n        stars[3] = '<circle r=\\\"2\\\" cx=\\\"335\\\" cy=\\\"321 \\\"/>';\\n        stars[4] = '<circle r=\\\"2\\\" cx=\\\"333\\\" cy=\\\"252 \\\"/>';\\n        stars[5] = '<circle r=\\\"2\\\" cx=\\\"324\\\" cy=\\\"276 \\\"/>';\\n        stars[6] = '<circle r=\\\"2\\\" cx=\\\"318\\\" cy=\\\"281 \\\"/>';\\n        stars[7] = '<circle r=\\\"2\\\" cx=\\\"309\\\" cy=\\\"287 \\\"/>';\\n        string\\n            memory close = '<path d=\\\"M 309, 287 L 318, 281 L 324, 276 L 333, 252 L 361, 272, 356, 307 L  335, 321 L 335, 329 M 356, 307 L 333, 252 \\\" stroke=\\\"#fff\\\" opacity=\\\".5\\\" fill=\\\"none\\\"/></g>';\\n        return buildStar(stars, open, close, show);\\n    }\\n\\n    function Virgo(\\n        uint8 show\\n    ) public view returns (string memory, uint8 leftovers) {\\n        string[] memory stars = new string[](12);\\n        string\\n            memory open = '<g transform=\\\"translate(114,-114), rotate(0)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n        stars[0] = '<circle r=\\\"2\\\" cx=\\\"261\\\" cy=\\\"296 \\\"/>';\\n        stars[1] = '<circle r=\\\"2\\\" cx=\\\"251\\\" cy=\\\"225 \\\"/>';\\n        stars[2] = '<circle r=\\\"2\\\" cx=\\\"248\\\" cy=\\\"276 \\\"/>';\\n        stars[3] = '<circle r=\\\"2\\\" cx=\\\"246\\\" cy=\\\"244 \\\"/>';\\n        stars[4] = '<circle r=\\\"2\\\" cx=\\\"241\\\" cy=\\\"327 \\\"/>';\\n        stars[5] = '<circle r=\\\"2\\\" cx=\\\"231\\\" cy=\\\"324 \\\"/>';\\n        stars[6] = '<circle r=\\\"2\\\" cx=\\\"225\\\" cy=\\\"249 \\\"/>';\\n        stars[7] = '<circle r=\\\"2\\\" cx=\\\"223\\\" cy=\\\"285 \\\"/>';\\n        stars[8] = '<circle r=\\\"2\\\" cx=\\\"221\\\" cy=\\\"342 \\\"/>';\\n        stars[9] = '<circle r=\\\"2\\\" cx=\\\"207\\\" cy=\\\"299 \\\"/>';\\n        stars[10] = '<circle r=\\\"2\\\" cx=\\\"198\\\" cy=\\\"242 \\\"/>';\\n        stars[11] = '<circle r=\\\"2\\\" cx=\\\"188\\\" cy=\\\"330 \\\"/>';\\n        string\\n            memory close = '<path d=\\\"m221, 342 L 231, 324 L 241, 327 L 261, 296 L 248, 276 L  246, 244 L 251, 225 M 246, 244 L 225, 249 L 198, 242 M 225, 249 L 223, 285 L 261, 296 M 223, 285 L 207 299 L 188 330\\\" stroke=\\\"#fff\\\" opacity=\\\".5\\\" fill=\\\"none\\\"/></g>';\\n        return buildStar(stars, open, close, show);\\n    }\\n\\n    function Leo(\\n        uint8 show\\n    ) public view returns (string memory, uint8 leftovers) {\\n        string[] memory stars = new string[](9);\\n\\n        string\\n            memory open = '<g transform=\\\"translate(254,-114), rotate(0)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n        stars[0] = '<circle r=\\\"2\\\" cx=\\\"136\\\" cy=\\\"276 \\\"/>';\\n        stars[1] = '<circle r=\\\"2\\\" cx=\\\"120\\\" cy=\\\"264 \\\"/>';\\n        stars[2] = '<circle r=\\\"2\\\" cx=\\\"108\\\" cy=\\\"224 \\\"/>';\\n        stars[3] = '<circle r=\\\"2\\\" cx=\\\"102\\\" cy=\\\"265 \\\"/>';\\n        stars[4] = '<circle r=\\\"2\\\" cx=\\\"94\\\" cy=\\\"226 \\\"/>';\\n        stars[5] = '<circle r=\\\"2\\\" cx=\\\"92\\\" cy=\\\"253 \\\"/>';\\n        stars[6] = '<circle r=\\\"2\\\" cx=\\\"80\\\" cy=\\\"324 \\\"/>';\\n        stars[7] = '<circle r=\\\"2\\\" cx=\\\"64\\\" cy=\\\"307 \\\"/>';\\n        stars[8] = '<circle r=\\\"2\\\" cx=\\\"61\\\" cy=\\\"344 \\\"/>';\\n        string\\n            memory close = '<path d=\\\"m108,224 L 94, 226 L 92, 253 L 102, 265 L 120 264 L  136 276 L 80 324 L 61 344L 64 307 L 102 265 M 80 324 L 120 264\\\" stroke=\\\"#fff\\\" opacity=\\\".5\\\" fill=\\\"none\\\"/></g>';\\n        return buildStar(stars, open, close, show);\\n    }\\n\\n    function Cancer(\\n        uint8 show\\n    ) public view returns (string memory, uint8 leftovers) {\\n        string[] memory stars = new string[](5);\\n\\n        string\\n            memory open = '<g transform=\\\"translate(-106,50), rotate(0)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n        stars[0] = '<circle r=\\\"2\\\" cx=\\\"491\\\" cy=\\\"143 \\\"/>';\\n        stars[1] = '<circle r=\\\"2\\\" cx=\\\"443\\\" cy=\\\"123 \\\"/>';\\n        stars[2] = '<circle r=\\\"2\\\" cx=\\\"440\\\" cy=\\\"157 \\\"/>';\\n        stars[3] = '<circle r=\\\"2\\\" cx=\\\"437\\\" cy=\\\"112 \\\"/>';\\n        stars[4] = '<circle r=\\\"2\\\" cx=\\\"418\\\" cy=\\\"88 \\\"/>';\\n        string\\n            memory close = '<path d=\\\"m491 143 L 443, 123 L 437 112 L 418 88 M 442 123 L 440 157   \\\" stroke=\\\"#fff\\\" opacity=\\\".5\\\" fill=\\\"none\\\"/></g>';\\n        return buildStar(stars, open, close, show);\\n    }\\n\\n    function Gemini(\\n        uint8 show\\n    ) public view returns (string memory, uint8 leftovers) {\\n        string[] memory stars = new string[](13);\\n\\n        string\\n            memory open = '<g transform=\\\"translate(4,50), rotate(0)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n        stars[0] = '<circle r=\\\"2\\\" cx=\\\"386\\\" cy=\\\"116 \\\"/>';\\n        stars[1] = '<circle r=\\\"2\\\" cx=\\\"377\\\" cy=\\\"115 \\\"/>';\\n        stars[2] = '<circle r=\\\"2\\\" cx=\\\"374\\\" cy=\\\"128 \\\"/>';\\n        stars[3] = '<circle r=\\\"2\\\" cx=\\\"365\\\" cy=\\\"144 \\\"/>';\\n        stars[4] = '<circle r=\\\"2\\\" cx=\\\"359\\\" cy=\\\"109 \\\"/>';\\n        stars[5] = '<circle r=\\\"2\\\" cx=\\\"359\\\" cy=\\\"162 \\\"/>';\\n        stars[6] = '<circle r=\\\"2\\\" cx=\\\"334\\\" cy=\\\"132 \\\"/>';\\n        stars[7] = '<circle r=\\\"2\\\" cx=\\\"324\\\" cy=\\\"89 \\\"/>';\\n        stars[8] = '<circle r=\\\"2\\\" cx=\\\"319\\\" cy=\\\"125 \\\"/>';\\n        stars[9] = '<circle r=\\\"2\\\" cx=\\\"315\\\" cy=\\\"87 \\\"/>';\\n        stars[10] = '<circle r=\\\"2\\\" cx=\\\"306\\\" cy=\\\"86 \\\"/>';\\n        stars[11] = '<circle r=\\\"2\\\" cx=\\\"297\\\" cy=\\\"116 \\\"/>';\\n        stars[12] = '<circle r=\\\"2\\\" cx=\\\"295\\\" cy=\\\"106 \\\"/>';\\n        string\\n            memory close = '<path d=\\\"m386 , 116 L 377, 115 L 374, 128 L 365, 144 L 334, 132 L  319, 125 L 297 116 L 295 106 L 306 86 L 315 87 L 324 89 L 359 109 L 377 115 M 365 144 L 359 162\\\" stroke=\\\"#fff\\\" opacity=\\\".5\\\" fill=\\\"none\\\"/></g>';\\n        return buildStar(stars, open, close, show);\\n    }\\n\\n    function Taurus(\\n        uint8 show\\n    ) public view returns (string memory, uint8 leftovers) {\\n        string[] memory stars = new string[](12);\\n\\n        string\\n            memory open = '<g transform=\\\"translate(194,80), rotate(0) scale(0.7)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n        stars[0] = '<circle r=\\\"2.86\\\" cx=\\\"262\\\" cy=\\\"184 \\\"/>';\\n        stars[1] = '<circle r=\\\"2.86\\\" cx=\\\"259\\\" cy=\\\"175 \\\"/>';\\n        stars[2] = '<circle r=\\\"2.86\\\" cx=\\\"228\\\" cy=\\\"154 \\\"/>';\\n        stars[3] = '<circle r=\\\"2.86\\\" cx=\\\"214\\\" cy=\\\"139 \\\"/>';\\n        stars[4] = '<circle r=\\\"2.86\\\" cx=\\\"214\\\" cy=\\\"129 \\\"/>';\\n        stars[5] = '<circle r=\\\"2.86\\\" cx=\\\"210\\\" cy=\\\"127 \\\"/>';\\n        stars[6] = '<circle r=\\\"2.86\\\" cx=\\\"210\\\" cy=\\\"121 \\\"/>';\\n        stars[7] = '<circle r=\\\"2.86\\\" cx=\\\"207\\\" cy=\\\"135 \\\"/>';\\n        stars[8] = '<circle r=\\\"2.86\\\" cx=\\\"203\\\" cy=\\\"100 \\\"/>';\\n        stars[9] = '<circle r=\\\"2.86\\\" cx=\\\"201\\\" cy=\\\"131 \\\"/>';\\n        stars[10] = '<circle r=\\\"2.86\\\" cx=\\\"184\\\" cy=\\\"67 \\\"/>';\\n        stars[11] = '<circle r=\\\"2.86\\\" cx=\\\"164\\\" cy=\\\"93 \\\"/>';\\n        string\\n            memory close = '<path d=\\\"m262 184 L 259 175 L 228 154 L 214 139 L 214 129 L 210 127 L 210 121 L 203 100 L 184 67 M 214 139 L 207 135 L 201 131 L 164 93\\\" stroke=\\\"#fff\\\" opacity=\\\".5\\\" fill=\\\"none\\\" stroke-width=\\\"1.43\\\"/></g>';\\n        return buildStar(stars, open, close, show);\\n    }\\n\\n    function Pegasus(\\n        uint8 show\\n    ) public view returns (string memory, uint8 leftovers) {\\n        string[] memory stars = new string[](12);\\n\\n        string\\n            memory open = '<g transform=\\\"translate(322 150)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n\\n        stars[0] = '<circle cx=\\\"-13\\\" r=\\\"2\\\"/>';\\n        stars[1] = '<circle cx=\\\"22\\\" cy=\\\"6\\\" r=\\\"2\\\"/>';\\n        stars[2] = '<circle cx=\\\"34\\\" cy=\\\"1\\\" r=\\\"2\\\"/>';\\n        stars[3] = '<circle cx=\\\"51\\\" cy=\\\"-7\\\" r=\\\"2\\\"/>';\\n        stars[4] = '<circle cx=\\\"-21\\\" cy=\\\"35\\\" r=\\\"2\\\"/>';\\n        stars[5] = '<circle cx=\\\"20\\\" cy=\\\"38\\\" r=\\\"2\\\"/>';\\n        stars[6] = '<circle cx=\\\"35\\\" cy=\\\"50\\\" r=\\\"2\\\"/>';\\n        stars[7] = '<circle cx=\\\"54\\\" cy=\\\"60\\\" r=\\\"2\\\"/>';\\n        stars[8] = '<circle cx=\\\"70\\\" cy=\\\"50\\\" r=\\\"2\\\"/>';\\n        stars[9] = '<circle cx=\\\"31\\\" cy=\\\"18\\\" r=\\\"2\\\"/>';\\n        stars[10] = '<circle cx=\\\"54\\\" cy=\\\"13\\\" r=\\\"2\\\"/>';\\n        stars[11] = '<circle cx=\\\"66\\\" cy=\\\"12\\\" r=\\\"2\\\"/>';\\n        string\\n            memory close = '<path d=\\\"M70 50 54 60 35 50 20 38l-41-3 8-35 35 6-2 32m46-26-12 1-23 5-9-12 12-5 17-8\\\" fill=\\\"none\\\" stroke=\\\"#fff\\\" opacity=\\\".5\\\"/></g>';\\n\\n        return buildStar(stars, open, close, show);\\n    }\\n\\n    function UrsaMinor(\\n        uint8 show\\n    ) public view returns (string memory, uint8 leftovers) {\\n        string[] memory stars = new string[](7);\\n\\n        string\\n            memory open = '<g transform=\\\"translate(320,130), rotate(-30)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n        stars[0] = '<circle cx=\\\"0\\\" cy=\\\"00\\\" r=\\\"2\\\" />';\\n        stars[1] = '<circle cx=\\\"-6\\\" cy=\\\"20\\\" r=\\\"2\\\" />';\\n        stars[2] = '<circle cx=\\\"-9\\\" cy=\\\"40\\\" r=\\\"2\\\" />';\\n        stars[3] = '<circle cx=\\\"-3\\\" cy=\\\"60\\\" r=\\\"2\\\" />';\\n        stars[4] = '<circle cx=\\\"-18\\\" cy=\\\"70\\\" r=\\\"2\\\"/>';\\n        stars[5] = '<circle cx=\\\"-12\\\" cy=\\\"92\\\" r=\\\"2\\\"/>';\\n        stars[6] = '<circle cx=\\\"8\\\" cy=\\\"91\\\" r=\\\"2\\\" />';\\n        string\\n            memory close = '<path d=\\\"m 0 00 L -6 20 L -9 40 L -3 60 L -18 70 L -12 92 L 8 91 L -3 60\\\" fill=\\\"none\\\" stroke=\\\"white\\\" opacity=\\\".5\\\"/></g>';\\n        return buildStar(stars, open, close, show);\\n    }\\n\\n    function Cygnus(\\n        uint8 show\\n    ) public view returns (string memory, uint8 leftovers) {\\n        string[] memory stars = new string[](6);\\n        string\\n            memory open = '<g transform=\\\"translate(134, -70) scale(3)\\\" fill=\\\"#fff\\\" opacity=\\\"0.8\\\">';\\n        stars[0] = '<circle r=\\\"0.66\\\" cx=\\\"87.000\\\" cy=\\\"76.000\\\"/>';\\n        stars[1] = '<circle r=\\\"0.66\\\" cx=\\\"72.000\\\" cy=\\\"76.000\\\"/>';\\n        stars[2] = '<circle r=\\\"0.66\\\" cx=\\\"62.000\\\" cy=\\\"93.000\\\"/>';\\n        stars[3] = '<circle r=\\\"0.66\\\" cx=\\\"61.000\\\" cy=\\\"64.000\\\"/>';\\n        stars[4] = '<circle r=\\\"0.66\\\" cx=\\\"59.000\\\" cy=\\\"80.000\\\"/>';\\n        stars[5] = '<circle r=\\\"0.66\\\" cx=\\\"49.000\\\" cy=\\\"79.000\\\"/>';\\n        string\\n            memory close = '<path d=\\\"m87 76 L 72 76 L 59 80 L 49 79 M 62 93 L 59 80 L 61 64\\\" stroke-width=\\\"0.333\\\" fill=\\\"none\\\" stroke=\\\"#fff\\\" opacity=\\\".5\\\"/></g>';\\n        return buildStar(stars, open, close, show);\\n    }\\n}\\n\",\"keccak256\":\"0x265f8c6c27512f8013daa56714a2b326d09939fbd50049227442fe1f5aa05d99\",\"license\":\"MIT\"},\"contracts/interfaces/IChainellationRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"../Color.sol\\\";\\n\\ninterface IChainellationRenderer {\\n    function generateSVG(\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime,\\n        address decorator\\n    ) external view returns (string memory);\\n\\n    function subZero(\\n        uint16 first,\\n        uint16 second\\n    ) external pure returns (uint16);\\n\\n    function psuedorandom(\\n        uint256 tokenId,\\n        uint256 nonce\\n    ) external pure returns (uint256);\\n}\\n\",\"keccak256\":\"0xe004e9c0389d22b905a80195f3e7ce402cd886eb4090d910025092f7bd421750\",\"license\":\"MIT\"},\"contracts/interfaces/IDeco.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\nimport \\\"../Color.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\nabstract contract IDeco {\\n    mapping(uint256 => bool) public soulbound;\\n\\n    function soulbind(uint256 tokenId) external {\\n        if (ownerOf(tokenId) != tx.origin) revert NotOwner();\\n        soulbound[tokenId] = true;\\n    }\\n\\n    function getDeco(\\n        uint256 tokenId,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) public view virtual returns (string memory);\\n\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        //TODO this is rough - the msg.sender is the Decoration contract but I need check with the EOA\\n        //breaks support for gas stations and contract owners.\\n        return tx.origin;\\n    }\\n\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        return 1;\\n    }\\n\\n    function packageAsSVG(\\n        uint256 tokenId,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) public view returns (string memory) {\\n        return\\n            string.concat(\\n                '<svg viewBox=\\\"0 0 512 512\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">',\\n                getDeco(tokenId, dna, gazes, daytime),\\n                \\\"</svg>\\\"\\n            );\\n    }\\n\\n    function generateCharacter(\\n        uint256 tokenId\\n    ) public view returns (string memory) {\\n        Color.DNA memory dna = Color.genDNA(\\n            tokenId,\\n            Color.defaultColors(tokenId),\\n            0,\\n            0\\n        );\\n        bytes memory svg = abi.encodePacked(\\n            packageAsSVG(tokenId, dna, 0, true)\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:image/svg+xml;base64,\\\",\\n                    Base64.encode(svg)\\n                )\\n            );\\n    }\\n\\n    function getMetadata(\\n        uint256 tokenId\\n    ) public view virtual returns (string memory);\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual returns (string memory) {\\n        bytes memory dataURI = abi.encodePacked(\\n            \\\"{\\\",\\n            getMetadata(tokenId),\\n            \\\",\\\",\\n            '\\\"image\\\": \\\"',\\n            generateCharacter(tokenId),\\n            '\\\"',\\n            \\\"}\\\"\\n        );\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(dataURI)\\n                )\\n            );\\n    }\\n\\n    error NotOwner();\\n    error SoulBound();\\n}\\n\",\"keccak256\":\"0x506f696f220b2cbe3bcb2cfe45a0ca62cf21d410180220de561376b31025a6fe\",\"license\":\"MIT\"},\"contracts/interfaces/IDecorations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./IDeco.sol\\\";\\n\\ninterface IDecorations {\\n    function getSilhouette(\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) external view returns (string memory);\\n\\n    function getSkyMath(\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) external view returns (string memory);\\n\\n    function getDecorationOne(\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x73d9bd46039ae8a897b231e0c8d36b0d4c3115ec5f6d71ab6995ba832570a6e5\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612fa3806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80633a20c8791161005b5780633a20c879146100e45780636e6e0cf0146101055780638de0890a14610118578063eec2fb541461012b57600080fd5b8063075d103714610082578063176a29a5146100ab5780633329f04f146100be575b600080fd5b610095610090366004611810565b61013e565b6040516100a291906118b2565b60405180910390f35b6100956100b93660046118d5565b610780565b6100d16100cc3660046118f0565b610968565b60405161ffff90911681526020016100a2565b6100f76100f2366004611929565b610a0c565b6040519081526020016100a2565b61009561011336600461194b565b610a8a565b610095610126366004611964565b610ce3565b6100956101393660046119c3565b610f3c565b604051633a20c87960e01b815260048101859052607b60248201526060906000907368AD5E2e4709849e1730aFF98C9b78648EF2752d90631b0d4b4d90602d908390633a20c87990604401602060405180830381865af41580156101a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ca9190611a8a565b6101d49190611aa3565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610213573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261023b9190810190611b43565b90506000816040516020016102509190611b94565b60408051601f19818403018152908290526303f1727f60e21b8252915081907368AD5E2e4709849e1730aFF98C9b78648EF2752d90630fc5c9fc90610299908a90600401611c26565b600060405180830381865af41580156102b6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102de9190810190611b43565b6040516020016102ef929190611c51565b60408051601f19818403018152908290526303f1727f60e21b8252915081907368AD5E2e4709849e1730aFF98C9b78648EF2752d90630fc5c9fc90610338908990600401611c26565b600060405180830381865af4158015610355573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261037d9190810190611b43565b60405160200161038e929190611ccf565b604051602081830303815290604052905080827368AD5E2e4709849e1730aFF98C9b78648EF2752d631b0d4b4d8760ff166000146103cc57876103cf565b60015b6040516001600160e01b031960e084901b16815260ff9091166004820152602401600060405180830381865af415801561040d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104359190810190611b43565b7368AD5E2e4709849e1730aFF98C9b78648EF2752d631b0d4b4d60ff89161561045e5788610461565b60015b6040516001600160e01b031960e084901b16815260ff9091166004820152602401600060405180830381865af415801561049f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104c79190810190611b43565b6040516020016104da9493929190611d4e565b60408051601f1981840301815290829052631b21034b60e31b825291506000907368AD5E2e4709849e1730aFF98C9b78648EF2752d9063d9081a5890610527908a9060f090600401611ef7565b606060405180830381865af4158015610544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105689190611f33565b605a60408083019190915251631b21034b60e31b815290915082907368AD5E2e4709849e1730aFF98C9b78648EF2752d90630fc5c9fc90829063d9081a58906105b8908d9060b490600401611ef7565b606060405180830381865af41580156105d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f99190611f33565b6040518263ffffffff1660e01b81526004016106159190611c26565b600060405180830381865af4158015610632573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261065a9190810190611b43565b7368AD5E2e4709849e1730aFF98C9b78648EF2752d630fc5c9fc7368AD5E2e4709849e1730aFF98C9b78648EF2752d63d9081a588b60b46040518363ffffffff1660e01b81526004016106ae929190611ef7565b606060405180830381865af41580156106cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ef9190611f33565b6040518263ffffffff1660e01b815260040161070b9190611c26565b600060405180830381865af4158015610728573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107509190810190611b43565b60405160200161076293929190611f87565b60408051601f1981840301815291905293505050505b949350505050565b6040805160208101909152600081526060907368AD5E2e4709849e1730aFF98C9b78648EF2752d631b0d4b4d846107b85760016107bb565b60005b6040516001600160e01b031960e084901b16815260ff9091166004820152602401600060405180830381865af41580156107f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108219190810190611b43565b7368AD5E2e4709849e1730aFF98C9b78648EF2752d631b0d4b4d8561084757600061084a565b60015b6040516001600160e01b031960e084901b16815260ff9091166004820152602401600060405180830381865af4158015610888573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108b09190810190611b43565b7368AD5E2e4709849e1730aFF98C9b78648EF2752d631b0d4b4d866108d65760076108d9565b60005b6040516001600160e01b031960e084901b16815260ff9091166004820152602401600060405180830381865af4158015610917573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261093f9190810190611b43565b604051602001610951939291906120a6565b60408051601f198184030181529190529392505050565b6040517f3329f04f00000000000000000000000000000000000000000000000000000000815261ffff8084166004830152821660248201526000907368AD5E2e4709849e1730aFF98C9b78648EF2752d90633329f04f90604401602060405180830381865af41580156109df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a03919061233b565b90505b92915050565b604051633a20c87960e01b815260048101839052602481018290526000907368AD5E2e4709849e1730aFF98C9b78648EF2752d90633a20c87990604401602060405180830381865af4158015610a66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a039190611a8a565b60408051602081018252600081529051633a20c87960e01b815260048101839052607b60248201526060919081907368AD5E2e4709849e1730aFF98C9b78648EF2752d90631b0d4b4d90612710908390633a20c87990604401602060405180830381865af4158015610b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b249190611a8a565b610b2e9190611aa3565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610b6d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b959190810190611b43565b604051602001610ba692919061235f565b60408051601f1981840301815290829052633a20c87960e01b825260048201859052607b6024830152915081907368AD5E2e4709849e1730aFF98C9b78648EF2752d90631b0d4b4d90612710908390633a20c87990604401602060405180830381865af4158015610c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3f9190611a8a565b610c499190611aa3565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610c88573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cb09190810190611b43565b604051602001610cc1929190612460565b6040516020818303038152906040529050806040516020016109519190612652565b60608115610d005750604080516020810190915260008152610778565b6000806032851115610d18575060329350601e905060145b84610d238284612801565b60ff161015610df05760037368AD5E2e4709849e1730aFF98C9b78648EF2752d633a20c87989610d538686612801565b6040516001600160e01b031960e085901b168152600481019290925260ff166024820152604401602060405180830381865af4158015610d97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbb9190611a8a565b610dc59190611aa3565b600103610dde5780610dd68161281a565b915050610d18565b81610de88161281a565b925050610d18565b600080610dfd8884610fe4565b6040805160208082018352600082528251808401909352600b83527f636f6e7374436f756e742000000000000000000000000000000000000000000090830152929450909250610e509060ff86166110b9565b610e926040518060400160405280600a81526020017f73746172436f756e7420000000000000000000000000000000000000000000008152508660ff166110b9565b610ed46040518060400160405280600a81526020017f6c6566746f7665727320000000000000000000000000000000000000000000008152508360ff166110b9565b8083604051602001610ee7929190612839565b60408051601f19818403018152919052905080610f0d8b610f088589612801565b611130565b604051602001610f1e929190612839565b60408051808303601f190181529190529a9950505050505050505050565b604080516060818101835260208088015161ffff90811684526064828501819052601e858701819052865180860188528b8801519093168352928201529384015260a08701516080880151919391600091610f9a918590859061013e565b610fa78960c00151610a8a565b610fb088610780565b610fc48b60a001518c606001518c8c610ce3565b610fd0898d8d8d61150a565b604051602001610762959493929190612868565b6040517f5b33e80e00000000000000000000000000000000000000000000000000000000815260ff8084166004830152821660248201526060906000908190819073A7Ab6592Ebc9193281899c374F690EBeeb463D5f90635b33e80e90604401600060405180830381865af4158015611061573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261108991908101906129d7565b915091508160405160200161109e9190612a1e565b60408051808303601f19018152919052969095509350505050565b61112c82826040516024016110cf929190612a71565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb60e72cc0000000000000000000000000000000000000000000000000000000017905261155b565b5050565b604080518082018252600f81527f3c672066696c6c3d2223666666223e00000000000000000000000000000000006020808301919091528251808201845260008082528451928301909452838252606093909190805b8660ff168160ff1610156114dd57604051633a20c87960e01b81526004810189905260ff821660248201526003907368AD5E2e4709849e1730aFF98C9b78648EF2752d90633a20c87990604401602060405180830381865af41580156111f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112149190611a8a565b61121e9190611aa3565b604051633a20c87960e01b8152600481018a905260ff831660248201529092507368AD5E2e4709849e1730aFF98C9b78648EF2752d90631b0d4b4d906101ce908390633a20c87990604401602060405180830381865af4158015611286573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112aa9190611a8a565b6112b49190611aa3565b6112bf906019612a93565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af41580156112fe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113269190810190611b43565b93507368AD5E2e4709849e1730aFF98C9b78648EF2752d631b0d4b4d6101ce82633a20c87961135860ff88168e612ab5565b6040516001600160e01b031960e084901b168152600481019190915260ff87166024820152604401602060405180830381865af415801561139d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c19190611a8a565b6113cb9190611aa3565b6113d6906019612a93565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015611415573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261143d9190810190611b43565b92508160ff166000036114755784848460405160200161145f93929190612ac8565b60405160208183030381529060405294506114cb565b8160ff166001036114955784848460405160200161145f93929190612bbe565b8160ff166002036114cb5784848486866040516020016114b9959493929190612cd5565b60405160208183030381529060405294505b806114d58161281a565b915050611186565b50836040516020016114ef9190612e6d565b60405160208183030381529060405294505050505092915050565b60606115188585858561157c565b6115248686868661163b565b611530878787876116ab565b60405160200161154293929190612e95565b6040516020818303038152906040529050949350505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60606001600160a01b0385166115a15750604080516020810190915260008152610778565b6040517ffb431aad00000000000000000000000000000000000000000000000000000000815285906001600160a01b0382169063fb431aad906115ec90889088908890600401612ed8565b600060405180830381865afa158015611609573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116319190810190611b43565b9695505050505050565b60606001600160a01b0385166116605750604080516020810190915260008152610778565b6040517f31f32ada00000000000000000000000000000000000000000000000000000000815285906001600160a01b038216906331f32ada906115ec90889088908890600401612ed8565b60606001600160a01b0385166116d05750604080516020810190915260008152610778565b6040517f0e82b0af00000000000000000000000000000000000000000000000000000000815285906001600160a01b03821690630e82b0af906115ec90889088908890600401612ed8565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156117545761175461171b565b60405290565b604051610120810167ffffffffffffffff811182821017156117545761175461171b565b61ffff8116811461178e57600080fd5b50565b803561179c8161177e565b919050565b6000606082840312156117b357600080fd5b6117bb611731565b905081356117c88161177e565b815260208201356117d88161177e565b602082015260408201356117eb8161177e565b604082015292915050565b60ff8116811461178e57600080fd5b803561179c816117f6565b600080600080610100858703121561182757600080fd5b8435935061183886602087016117a1565b925061184786608087016117a1565b915060e0850135611857816117f6565b939692955090935050565b60005b8381101561187d578181015183820152602001611865565b50506000910152565b6000815180845261189e816020860160208601611862565b601f01601f19169290920160200192915050565b602081526000610a036020830184611886565b8035801515811461179c57600080fd5b6000602082840312156118e757600080fd5b610a03826118c5565b6000806040838503121561190357600080fd5b823561190e8161177e565b9150602083013561191e8161177e565b809150509250929050565b6000806040838503121561193c57600080fd5b50508035926020909101359150565b60006020828403121561195d57600080fd5b5035919050565b6000806000806080858703121561197a57600080fd5b84359350602085013561198c816117f6565b9250604085013591506119a1606086016118c5565b905092959194509250565b80356001600160a01b038116811461179c57600080fd5b6000806000808486036101808112156119db57600080fd5b610120808212156119eb57600080fd5b6119f361175a565b915086358252611a0560208801611791565b6020830152611a1660408801611791565b6040830152611a2760608801611805565b6060830152611a3860808801611805565b608083015260a0878101359083015260c0808801359083015260e0808801359083015261010080880135908301529094508501359250611a7b61014086016118c5565b91506119a161016086016119ac565b600060208284031215611a9c57600080fd5b5051919050565b600082611ac057634e487b7160e01b600052601260045260246000fd5b500690565b600082601f830112611ad657600080fd5b815167ffffffffffffffff80821115611af157611af161171b565b604051601f8301601f19908116603f01168101908282118183101715611b1957611b1961171b565b81604052838152866020858801011115611b3257600080fd5b611631846020830160208901611862565b600060208284031215611b5557600080fd5b815167ffffffffffffffff811115611b6c57600080fd5b61077884828501611ac5565b60008151611b8a818560208601611862565b9290920192915050565b7f3c6c696e6561724772616469656e742069643d22736b794772616469656e742281527f206772616469656e745472616e73666f726d3d22726f74617465280000000000602082015260008251611bf281603b850160208701611862565b7f29223e0000000000000000000000000000000000000000000000000000000000603b939091019283015250603e01919050565b60608101610a068284805161ffff908116835260208083015182169084015260409182015116910152565b60008351611c63818460208801611862565b7f3c73746f70206f66667365743d223025220000000000000000000000000000009083019081526c1039ba37b816b1b7b637b91e9160991b60118201528351611cb381601e840160208801611862565b6211179f60e91b601e9290910191820152602101949350505050565b60008351611ce1818460208801611862565b80830190507f3c73746f70206f66667365743d2231303025220000000000000000000000000081526c1039ba37b816b1b7b637b91e9160991b60138201528351611d32816020840160208801611862565b6211179f60e91b60209290910191820152602301949350505050565b60008551611d60818460208a01611862565b80830190507f3c2f6c696e6561724772616469656e743e3c6c696e6561724772616469656e7481527f2069643d22636c6f75644772616469656e7422206772616469656e745472616e60208201527f73666f726d3d22726f746174652800000000000000000000000000000000000060408201528551611de781604e840160208a01611862565b7f29223e3c73746f702073746f702d6f7061636974793d222e0000000000000000604e92909101918201528451611e25816066840160208901611862565b7f22206f66667365743d22313525222f3e3c73746f702073746f702d6f70616369606692909101918201527f74793d222e3522206f66667365743d22333025222f3e0000000000000000000060868201527f3c73746f702073746f702d6f7061636974793d222e0000000000000000000000609c8201528351611eaf8160b1840160208801611862565b611eeb60b1828401017f22206f66667365743d22353025222f3e3c2f6c696e6561724772616469656e748152601f60f91b602082015260210190565b98975050505050505050565b60808101611f228285805161ffff908116835260208083015182169084015260409182015116910152565b61ffff831660608301529392505050565b600060608284031215611f4557600080fd5b611f4d611731565b8251611f588161177e565b81526020830151611f688161177e565b60208201526040830151611f7b8161177e565b60408201529392505050565b60008451611f99818460208901611862565b80830190507f3c6c696e6561724772616469656e742069643d226461794772616469656e742281527f206772616469656e745472616e73666f726d3d22726f7461746528313329223e60208201527f3c73746f70206f66667365743d223025222073746f702d636f6c6f723d2200006040820152845161202081605e840160208901611862565b8082019150506211179f60e91b80605e8301527f3c73746f70206f66667365743d2231303025222073746f702d636f6c6f723d226061830152845161206c816081850160208901611862565b60819201918201527f3c2f6c696e6561724772616469656e743e000000000000000000000000000000608482015260950195945050505050565b7f3c726563742077696474683d223130302522206865696768743d22313030252281527f2066696c7465723d2275726c282373746172732922206f7061636974793d220060208201526000845161210481603f850160208901611862565b6211179f60e91b603f918401918201527f3c706174682066696c6c3d2275726c28236461794772616469656e742922206460428201527f3d224d302030683531327635313248307a22206f7061636974793d22000000006062820152845161217381607e840160208901611862565b7f22202066696c7465723d2275726c28236c6967687429222f3e00000000000000607e92909101918201527f3c706174682066696c6c3d2275726c2823736b794772616469656e742922202060978201527f643d224d302030683531327635313248307a22206f7061636974793d222e000060b78201526121f760d5820185611b78565b6211179f60e91b815290507f3c706174682066696c6c3d2275726c2823636c6f75644772616469656e74292260038201527f2066696c7465723d2275726c2823636c6f756473292220643d224d2d3531322d60238201527f35313268313533367631353336682d323034387a223e3c616e696d617465547260438201527f616e73666f726d206174747269627574654e616d653d227472616e73666f726d60638201527f2220617474726962757465547970653d22584d4c2220747970653d227472616e60838201527f736c617465222066726f6d3d22302220746f3d2235313220353132222064757260a38201527f3d223530732220726570656174436f756e743d22696e646566696e697465222f60c38201527f3e3c2f706174683e00000000000000000000000000000000000000000000000060e382015260eb8101611631565b60006020828403121561234d57600080fd5b81516123588161177e565b9392505050565b60008351612371818460208801611862565b80830190507f3c66696c7465722069643d227374617273223e3c666554757262756c656e636581527f20626173654672657175656e63793d222e33352220736565643d220000000000602082015283516123d281603b840160208801611862565b6211179f60e91b603b92909101918201527f3c6665436f6c6f724d61747269782076616c7565733d2230203020302039202d603e8201527f342030203020302039202d342030203020302039202d34203020302030203020605e8201527f31222f3e3c2f66696c7465723e00000000000000000000000000000000000000607e820152608b01949350505050565b60008351612472818460208801611862565b80830190507f3c66696c7465722069643d22636c6f7564732220783d222d3530252220793d2281527f2d35302522206865696768743d2232303025222077696474683d22323030252260208201527f3e3c6665476175737369616e426c757220696e3d22736b79222073746444657660408201527f696174696f6e3d2232302220726573756c743d22736b79626c7572222f3e000060608201527f3c666554757262756c656e636520747970653d226672616374616c4e6f697365607e8201527f2220626173654672657175656e63793d222e303122206e756d4f637461766573609e8201527f3d22352220726573756c743d22736b796e6f6973652220736565643d2200000060be82015283516125918160db840160208801611862565b6211179f60e91b910160db81018290527f3c6665436f6c6f724d61747269782076616c7565733d2231203020302030203060de8201527f20312030203020302030203120302030203020302033202d31202d312030203060fe82015261011e8101919091527f3c6665436f6d706f73697465206f70657261746f723d22696e2220696e323d226101218201527f536f7572636547726170686963222f3e3c2f66696c7465723e0000000000000061014182015261015a810195945050505050565b60008251612664818460208701611862565b7f3c66696c7465722069643d226c69676874223e3c666553706563756c61724c699201918252507f676874696e6720726573756c743d22737065634f7574222073706563756c617260208201527f4578706f6e656e743d2231303022206c69676874696e672d636f6c6f723d227760408201527f68697465223e000000000000000000000000000000000000000000000000000060608201527f3c6665506f696e744c6967687420783d2231302220793d22373022207a3d223360668201527f3030222f3e3c2f666553706563756c61724c69676874696e673e00000000000060868201527f3c6665436f6d706f7369746520696e3d22536f7572636547726170686963222060a08201527f696e323d22737065634f757422206f70657261746f723d2261726974686d657460c08201527f696322206b313d223022206b323d223122206b333d223122206b343d2230222f60e08201527f3e3c2f66696c7465723e0000000000000000000000000000000000000000000061010082015261010a01919050565b634e487b7160e01b600052601160045260246000fd5b60ff8181168382160190811115610a0657610a066127eb565b600060ff821660ff8103612830576128306127eb565b60010192915050565b6000835161284b818460208801611862565b83519083019061285f818360208801611862565b01949350505050565b7f3c7376672076696577426f783d2230203020353132203531322220786d6c6e7381527f3d22687474703a2f2f7777772e77332e6f72672f323030302f737667223e3c6360208201527f6c6970506174682069643d22626f78223e3c7061746820643d224d302030683560408201527f31327635313248307a222f3e3c2f636c6970506174683e3c646566733e00000060608201526000865161291281607d850160208b01611862565b86519083019061292981607d840160208b01611862565b7f3c2f646566733e3c7376672076696577426f783d223020302035313220353132607d92909101918201527f2220636c69702d706174683d2275726c2823626f7829223e0000000000000000609d820152855161298d8160b5840160208a01611862565b6129a561299f60b58385010188611b78565b86611b78565b9150506129ba81651e17b9bb339f60d11b9052565b651e17b9bb339f60d11b6006820152600c01979650505050505050565b600080604083850312156129ea57600080fd5b825167ffffffffffffffff811115612a0157600080fd5b612a0d85828601611ac5565b925050602083015161191e816117f6565b7f3c672069643d22636f6e7374656c6c6174696f6e223e00000000000000000000815260008251612a56816016850160208701611862565b631e17b39f60e11b6016939091019283015250601a01919050565b604081526000612a846040830185611886565b90508260208301529392505050565b61ffff818116838216019080821115612aae57612aae6127eb565b5092915050565b80820180821115610a0657610a066127eb565b60008451612ada818460208901611862565b7f3c636972636c6520723d2231222063783d2200000000000000000000000000009083019081528451612b14816012840160208901611862565b65111031bc9e9160d11b601292909101918201528351612b3b816018840160208801611862565b7f222066696c6c3d22236666662220206f7061636974793d2231223e0000000000601892909101918201527f3c616e696d617465206174747269627574654e616d653d2272222076616c756560338201527f733d22303b333b3122206475723d223173222f3e3c2f636972636c653e000000605382015260700195945050505050565b60008451612bd0818460208901611862565b7f3c7061746820643d224d200000000000000000000000000000000000000000009083019081528451612c0a81600b840160208901611862565b7f2c00000000000000000000000000000000000000000000000000000000000000600b92909101918201528351612c4881600c840160208801611862565b7f6320372c3020372c3020372c2d37206320302c3720302c3720372c372063202d600c92909101918201527f372c30202d372c30202d372c37206320302c2d3720302c2d37202d372c2d3722602c820152601f60f91b604c8201527f3c2f706174683e00000000000000000000000000000000000000000000000000604d82015260540195945050505050565b60008651612ce7818460208b01611862565b7f3c636972636c6520723d2233222063783d2200000000000000000000000000009083019081528651612d21816012840160208b01611862565b65111031bc9e9160d11b601292909101918201528551612d48816018840160208a01611862565b7f22206f7061636974793d22302e33223e3c616e696d6174652061747472696275601892909101918201527f74654e616d653d2272222076616c7565733d22303b353b3322206475723d223160388201527f73222f3e3c2f636972636c653e0000000000000000000000000000000000000060588201527f3c636972636c6520723d2231222063783d22000000000000000000000000000060658201528451612df8816077840160208901611862565b01612e0e6077820165111031bc9e9160d11b9052565b611eeb612e1e607d830186611b78565b7f223e3c616e696d617465206174747269627574654e616d653d2272222076616c81527f7565733d22303b333b3122206475723d223173222f3e3c2f636972636c653e006020820152603f0190565b60008251612e7f818460208701611862565b631e17b39f60e11b920191825250600401919050565b60008451612ea7818460208901611862565b845190830190612ebb818360208901611862565b8451910190612ece818360208801611862565b0195945050505050565b60006101608201905084518252602085015161ffff808216602085015280604088015116604085015250506060850151612f17606084018260ff169052565b506080850151612f2c608084018260ff169052565b5060a085015160a083015260c085015160c083015260e085015160e0830152610100808601518184015250836101208301526107786101408301841515905256fea2646970667358221220f9c3c06a0f1972d72a231b0d68728c4eac43e9529bad295960a3975860e5f03864736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80633a20c8791161005b5780633a20c879146100e45780636e6e0cf0146101055780638de0890a14610118578063eec2fb541461012b57600080fd5b8063075d103714610082578063176a29a5146100ab5780633329f04f146100be575b600080fd5b610095610090366004611810565b61013e565b6040516100a291906118b2565b60405180910390f35b6100956100b93660046118d5565b610780565b6100d16100cc3660046118f0565b610968565b60405161ffff90911681526020016100a2565b6100f76100f2366004611929565b610a0c565b6040519081526020016100a2565b61009561011336600461194b565b610a8a565b610095610126366004611964565b610ce3565b6100956101393660046119c3565b610f3c565b604051633a20c87960e01b815260048101859052607b602482015260609060009073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90631b0d4b4d90602d908390633a20c87990604401602060405180830381865af41580156101a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ca9190611a8a565b6101d49190611aa3565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610213573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261023b9190810190611b43565b90506000816040516020016102509190611b94565b60408051601f19818403018152908290526303f1727f60e21b82529150819073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90630fc5c9fc90610299908a90600401611c26565b600060405180830381865af41580156102b6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102de9190810190611b43565b6040516020016102ef929190611c51565b60408051601f19818403018152908290526303f1727f60e21b82529150819073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90630fc5c9fc90610338908990600401611c26565b600060405180830381865af4158015610355573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261037d9190810190611b43565b60405160200161038e929190611ccf565b6040516020818303038152906040529050808273__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d8760ff166000146103cc57876103cf565b60015b6040516001600160e01b031960e084901b16815260ff9091166004820152602401600060405180830381865af415801561040d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104359190810190611b43565b73__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d60ff89161561045e5788610461565b60015b6040516001600160e01b031960e084901b16815260ff9091166004820152602401600060405180830381865af415801561049f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104c79190810190611b43565b6040516020016104da9493929190611d4e565b60408051601f1981840301815290829052631b21034b60e31b8252915060009073__$11e21e6c56ca563b85c74e3fd3a08242f9$__9063d9081a5890610527908a9060f090600401611ef7565b606060405180830381865af4158015610544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105689190611f33565b605a60408083019190915251631b21034b60e31b8152909150829073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90630fc5c9fc90829063d9081a58906105b8908d9060b490600401611ef7565b606060405180830381865af41580156105d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f99190611f33565b6040518263ffffffff1660e01b81526004016106159190611c26565b600060405180830381865af4158015610632573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261065a9190810190611b43565b73__$11e21e6c56ca563b85c74e3fd3a08242f9$__630fc5c9fc73__$11e21e6c56ca563b85c74e3fd3a08242f9$__63d9081a588b60b46040518363ffffffff1660e01b81526004016106ae929190611ef7565b606060405180830381865af41580156106cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ef9190611f33565b6040518263ffffffff1660e01b815260040161070b9190611c26565b600060405180830381865af4158015610728573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107509190810190611b43565b60405160200161076293929190611f87565b60408051601f1981840301815291905293505050505b949350505050565b60408051602081019091526000815260609073__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d846107b85760016107bb565b60005b6040516001600160e01b031960e084901b16815260ff9091166004820152602401600060405180830381865af41580156107f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108219190810190611b43565b73__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d8561084757600061084a565b60015b6040516001600160e01b031960e084901b16815260ff9091166004820152602401600060405180830381865af4158015610888573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108b09190810190611b43565b73__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d866108d65760076108d9565b60005b6040516001600160e01b031960e084901b16815260ff9091166004820152602401600060405180830381865af4158015610917573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261093f9190810190611b43565b604051602001610951939291906120a6565b60408051601f198184030181529190529392505050565b6040517f3329f04f00000000000000000000000000000000000000000000000000000000815261ffff80841660048301528216602482015260009073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90633329f04f90604401602060405180830381865af41580156109df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a03919061233b565b90505b92915050565b604051633a20c87960e01b8152600481018390526024810182905260009073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90633a20c87990604401602060405180830381865af4158015610a66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a039190611a8a565b60408051602081018252600081529051633a20c87960e01b815260048101839052607b602482015260609190819073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90631b0d4b4d90612710908390633a20c87990604401602060405180830381865af4158015610b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b249190611a8a565b610b2e9190611aa3565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610b6d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b959190810190611b43565b604051602001610ba692919061235f565b60408051601f1981840301815290829052633a20c87960e01b825260048201859052607b60248301529150819073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90631b0d4b4d90612710908390633a20c87990604401602060405180830381865af4158015610c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3f9190611a8a565b610c499190611aa3565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610c88573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cb09190810190611b43565b604051602001610cc1929190612460565b6040516020818303038152906040529050806040516020016109519190612652565b60608115610d005750604080516020810190915260008152610778565b6000806032851115610d18575060329350601e905060145b84610d238284612801565b60ff161015610df057600373__$11e21e6c56ca563b85c74e3fd3a08242f9$__633a20c87989610d538686612801565b6040516001600160e01b031960e085901b168152600481019290925260ff166024820152604401602060405180830381865af4158015610d97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbb9190611a8a565b610dc59190611aa3565b600103610dde5780610dd68161281a565b915050610d18565b81610de88161281a565b925050610d18565b600080610dfd8884610fe4565b6040805160208082018352600082528251808401909352600b83527f636f6e7374436f756e742000000000000000000000000000000000000000000090830152929450909250610e509060ff86166110b9565b610e926040518060400160405280600a81526020017f73746172436f756e7420000000000000000000000000000000000000000000008152508660ff166110b9565b610ed46040518060400160405280600a81526020017f6c6566746f7665727320000000000000000000000000000000000000000000008152508360ff166110b9565b8083604051602001610ee7929190612839565b60408051601f19818403018152919052905080610f0d8b610f088589612801565b611130565b604051602001610f1e929190612839565b60408051808303601f190181529190529a9950505050505050505050565b604080516060818101835260208088015161ffff90811684526064828501819052601e858701819052865180860188528b8801519093168352928201529384015260a08701516080880151919391600091610f9a918590859061013e565b610fa78960c00151610a8a565b610fb088610780565b610fc48b60a001518c606001518c8c610ce3565b610fd0898d8d8d61150a565b604051602001610762959493929190612868565b6040517f5b33e80e00000000000000000000000000000000000000000000000000000000815260ff8084166004830152821660248201526060906000908190819073__$a8306bbe53a8cb7e168140ba991fce4a09$__90635b33e80e90604401600060405180830381865af4158015611061573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261108991908101906129d7565b915091508160405160200161109e9190612a1e565b60408051808303601f19018152919052969095509350505050565b61112c82826040516024016110cf929190612a71565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb60e72cc0000000000000000000000000000000000000000000000000000000017905261155b565b5050565b604080518082018252600f81527f3c672066696c6c3d2223666666223e00000000000000000000000000000000006020808301919091528251808201845260008082528451928301909452838252606093909190805b8660ff168160ff1610156114dd57604051633a20c87960e01b81526004810189905260ff8216602482015260039073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90633a20c87990604401602060405180830381865af41580156111f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112149190611a8a565b61121e9190611aa3565b604051633a20c87960e01b8152600481018a905260ff8316602482015290925073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90631b0d4b4d906101ce908390633a20c87990604401602060405180830381865af4158015611286573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112aa9190611a8a565b6112b49190611aa3565b6112bf906019612a93565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af41580156112fe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113269190810190611b43565b935073__$11e21e6c56ca563b85c74e3fd3a08242f9$",
  "libraries": {
    "Color": "0x68AD5E2e4709849e1730aFF98C9b78648EF2752d",
    "Constellations": "0xA7Ab6592Ebc9193281899c374F690EBeeb463D5f"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}