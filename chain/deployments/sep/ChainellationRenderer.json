{
  "address": "0xb6F38EfB4eF37d763dA3a1de14A2be09e5eC56c7",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "primaryHue",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "secondaryHue",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "starSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "funkSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "circleSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "groundSeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "constellationSeed",
              "type": "uint256"
            }
          ],
          "internalType": "struct Color.DNA",
          "name": "dna",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "gazes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "daytime",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "cloudDays",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "decorator",
          "type": "address"
        }
      ],
      "name": "generateSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "day",
          "type": "bool"
        }
      ],
      "name": "getBackgrounds",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        }
      ],
      "name": "getFilters",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "H",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "S",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "L",
              "type": "uint16"
            }
          ],
          "internalType": "struct Color.HSL",
          "name": "primary",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "H",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "S",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "L",
              "type": "uint16"
            }
          ],
          "internalType": "struct Color.HSL",
          "name": "secondary",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "cloudDays",
          "type": "uint8"
        }
      ],
      "name": "getGradients",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "starSeed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gazes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "daytime",
          "type": "bool"
        }
      ],
      "name": "getStars",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "psuedorandom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "first",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "second",
          "type": "uint16"
        }
      ],
      "name": "subZero",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x78b7b6cfd797da9741f0babd478e652c898c466312513366afe0663abb174059",
  "receipt": {
    "to": null,
    "from": "0x0a12A6777fc7D65b1461070648dA9CAE6962fcEe",
    "contractAddress": "0xb6F38EfB4eF37d763dA3a1de14A2be09e5eC56c7",
    "transactionIndex": 25,
    "gasUsed": "2402184",
    "logsBloom": "0x
    "blockHash": "0x0e1414fbbc40da29244bd9f3e12442effa625d303bd8b32f72be389a5b8e66cd",
    "transactionHash": "0x78b7b6cfd797da9741f0babd478e652c898c466312513366afe0663abb174059",
    "logs": [],
    "blockNumber": 4602872,
    "cumulativeGasUsed": "7049434",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "024556009ac9c877de40b16c8147d315",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"primaryHue\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"secondaryHue\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"starSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funkSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circleSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"groundSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"constellationSeed\",\"type\":\"uint256\"}],\"internalType\":\"struct Color.DNA\",\"name\":\"dna\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"gazes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"daytime\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"cloudDays\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"decorator\",\"type\":\"address\"}],\"name\":\"generateSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"day\",\"type\":\"bool\"}],\"name\":\"getBackgrounds\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"getFilters\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"H\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"S\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"L\",\"type\":\"uint16\"}],\"internalType\":\"struct Color.HSL\",\"name\":\"primary\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"H\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"S\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"L\",\"type\":\"uint16\"}],\"internalType\":\"struct Color.HSL\",\"name\":\"secondary\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"cloudDays\",\"type\":\"uint8\"}],\"name\":\"getGradients\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"starSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gazes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"daytime\",\"type\":\"bool\"}],\"name\":\"getStars\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"psuedorandom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"first\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"second\",\"type\":\"uint16\"}],\"name\":\"subZero\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/chainellations/ChainellationRenderer.sol\":\"ChainellationRenderer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Color.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary Color {\\n    using Strings for uint256;\\n\\n    struct DNA {\\n        uint256 tokenId;\\n        uint16 primaryHue;\\n        uint16 secondaryHue;\\n        uint256 starSeed;\\n        uint256 funkSeed;\\n        uint256 circleSeed;\\n        uint256 groundSeed;\\n        uint256 constellationSeed;\\n    }\\n\\n    struct HSL {\\n        uint16 H;\\n        uint16 S;\\n        uint16 L;\\n    }\\n\\n    struct Point {\\n        uint16 x;\\n        uint16 y;\\n    }\\n\\n    struct Circle {\\n        uint16 x;\\n        uint16 y;\\n        uint16 r;\\n        uint8 count;\\n        uint16 stroke;\\n        bool active;\\n    }\\n\\n    function HSLtoString(HSL memory color) public pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"hsl(\\\",\\n                    ((uint256)(color.H)).toString(),\\n                    \\\",\\\",\\n                    ((uint256)(color.S)).toString(),\\n                    \\\"%,\\\",\\n                    ((uint256)(color.L)).toString(),\\n                    \\\"%)\\\"\\n                )\\n            );\\n    }\\n\\n    function toString(uint16 num) public pure returns (string memory) {\\n        return ((uint256)(num)).toString();\\n    }\\n\\n    function psuedorandom(\\n        uint256 tokenId,\\n        uint256 nonce\\n    ) public pure returns (uint256) {\\n        return uint(keccak256(abi.encodePacked(tokenId, nonce)));\\n    }\\n\\n    function wiggle(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        uint16 base,\\n        uint16 offset\\n    ) public pure returns (uint16) {\\n        uint16 wiggleAmount = (uint16)(psuedorandom(tokenId, nonce) % offset);\\n        if ((uint8)(psuedorandom(tokenId, nonce) % 2) == 0) {\\n            return base + wiggleAmount;\\n        } else {\\n            return subZero(base, wiggleAmount);\\n        }\\n    }\\n\\n    function wiggleString(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        uint16 base,\\n        uint16 offset\\n    ) public pure returns (string memory) {\\n        return toString(wiggle(tokenId, nonce, base, offset));\\n    }\\n\\n    function wiggleUp(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        uint16 base,\\n        uint16 offset\\n    ) public pure returns (uint16) {\\n        uint16 wiggleAmount = (uint16)(psuedorandom(tokenId, nonce) % offset);\\n        return base + wiggleAmount;\\n    }\\n\\n    function subZero(uint16 first, uint16 second) public pure returns (uint16) {\\n        if (first > second) {\\n            return first - second;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function flipColor(\\n        Color.HSL memory color\\n    ) public pure returns (Color.HSL memory) {\\n        uint16 newH = color.H + 180 > 360 ? color.H - 180 : color.H + 180;\\n        return Color.HSL(newH, color.S, color.L);\\n    }\\n\\n    // TODO this isn't actually the rotate function because it zeros out\\n    function rotateColor(\\n        Color.HSL memory color,\\n        uint16 amount\\n    ) public pure returns (Color.HSL memory) {\\n        uint16 hue = (color.H + amount) % 360;\\n        return Color.HSL(hue, color.S, color.L);\\n    }\\n\\n    function genDNA(\\n        uint256 tokenId,\\n        uint32 colors\\n    ) public pure returns (DNA memory) {\\n        DNA memory dna;\\n        dna.tokenId = tokenId;\\n        dna.primaryHue = uint16(colors >> 16);\\n        dna.secondaryHue = uint16(colors);\\n        dna.starSeed = psuedorandom(tokenId, 123);\\n        dna.funkSeed = psuedorandom(tokenId, 234);\\n        dna.circleSeed = psuedorandom(tokenId, 345);\\n        dna.groundSeed = psuedorandom(tokenId, 456);\\n        dna.constellationSeed = tokenId;\\n\\n        return dna;\\n    }\\n\\n    function defaultColors(uint256 tokenId) public pure returns (uint32) {\\n        uint16 primary = uint16((tokenId % 16) * 10);\\n        uint16 secondary = rotateColor(HSL(primary, 0, 0), 60).H;\\n        return (uint32(primary) << 16) | uint32(secondary);\\n    }\\n}\\n\",\"keccak256\":\"0x60057b99ad7d554097021055407591b9cf2f1171561a97d43cf01c1e6aaab4ce\",\"license\":\"MIT\"},\"contracts/chainellations/ChainellationRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"../Color.sol\\\";\\n// import \\\"./Constellations.sol\\\";\\nimport \\\"../interfaces/IDecorations.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract ChainellationRenderer {\\n    function generateSVG(\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime,\\n        uint8 cloudDays,\\n        address decorator\\n    ) public view returns (string memory) {\\n        Color.HSL memory primary = Color.HSL(dna.primaryHue, 100, 30);\\n        Color.HSL memory secondary = Color.HSL(dna.secondaryHue, 100, 30);\\n        // console.log(\\\"Colors are %s and %s \\\", primary.H, secondary.H);\\n        string memory svg = string.concat(\\n            '<svg viewBox=\\\"0 0 512 512\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><clipPath id=\\\"box\\\"><path d=\\\"M0 0h512v512H0z\\\"/></clipPath><defs>',\\n            getGradients(dna.starSeed, primary, secondary, cloudDays),\\n            getFilters(dna.funkSeed),\\n            '</defs><svg viewBox=\\\"0 0 512 512\\\" clip-path=\\\"url(#box)\\\">',\\n            getBackgrounds(daytime),\\n            // '<path d=\\\"M 0, 340 h 512\\\" stroke=\\\"white\\\" opacity=\\\"0.4\\\"/>',\\n            // '<path d=\\\"M 0, 170 h 512\\\" stroke=\\\"white\\\" opacity=\\\"0.4\\\"/>',\\n            // '<path d=\\\"M 170, 0 v 512\\\" stroke=\\\"white\\\" opacity=\\\"0.4\\\"/>',\\n            // '<path d=\\\"M 340, 0 v 512\\\" stroke=\\\"white\\\" opacity=\\\"0.4\\\"/>',\\n            // '<path d=\\\"M250 80 h 180 v 180 h -180 v-180\\\" stroke=\\\"white\\\" fill=\\\"none\\\"/>',\\n\\n            // buildStars(dna.starSeed, dna.constellationSeed, gazes, daytime),\\n            getStars(dna.starSeed, gazes, daytime),\\n            getDecos(decorator, dna, gazes, daytime),\\n            // getFocus(decorator, dna, gazes, daytime),\\n            // getSkyMath(decorator, dna, gazes, daytime),\\n            // getDecorationOne(decorator, dna, gazes, daytime),\\n            // getSilhouette(decorator, dna, gazes, daytime),\\n            \\\"</svg>\\\",\\n            \\\"</svg>\\\"\\n        );\\n        return svg;\\n    }\\n\\n    function getGradients(\\n        uint256 seed,\\n        Color.HSL memory primary,\\n        Color.HSL memory secondary,\\n        uint8 cloudDays\\n    ) public pure returns (string memory) {\\n        string memory rotation = Color.toString(\\n            (uint16)(Color.psuedorandom(seed, 123) % 45)\\n        );\\n        string memory sky = string.concat(\\n            '<linearGradient id=\\\"skyGradient\\\" gradientTransform=\\\"rotate(',\\n            rotation,\\n            ')\\\">'\\n        );\\n\\n        sky = string.concat(\\n            sky,\\n            '<stop offset=\\\"0%\\\"',\\n            ' stop-color=\\\"',\\n            Color.HSLtoString(primary),\\n            '\\\"/>'\\n        );\\n\\n        sky = string.concat(\\n            sky,\\n            '<stop offset=\\\"100%\\\"',\\n            ' stop-color=\\\"',\\n            Color.HSLtoString(secondary),\\n            '\\\"/>'\\n        );\\n\\n        sky = string.concat(\\n            sky,\\n            '</linearGradient><linearGradient id=\\\"cloudGradient\\\" gradientTransform=\\\"rotate(',\\n            rotation,\\n            ')\\\"><stop stop-opacity=\\\".',\\n            Color.toString(cloudDays == 0 ? 1 : cloudDays),\\n            '\\\" offset=\\\"15%\\\"/><stop stop-opacity=\\\".5\\\" offset=\\\"30%\\\"/>',\\n            '<stop stop-opacity=\\\".',\\n            Color.toString(cloudDays == 0 ? 1 : cloudDays),\\n            '\\\" offset=\\\"50%\\\"/></linearGradient>'\\n        );\\n\\n        Color.HSL memory bright = Color.rotateColor(primary, 240);\\n        bright.L = 90;\\n        sky = string.concat(\\n            sky,\\n            '<linearGradient id=\\\"dayGradient\\\" gradientTransform=\\\"rotate(13)\\\">',\\n            '<stop offset=\\\"0%\\\" stop-color=\\\"',\\n            Color.HSLtoString(Color.rotateColor(primary, 180)),\\n            '\\\"/>',\\n            '<stop offset=\\\"100%\\\" stop-color=\\\"',\\n            Color.HSLtoString(Color.rotateColor(secondary, 180)),\\n            '\\\"/>',\\n            \\\"</linearGradient>\\\"\\n        );\\n\\n        return sky;\\n    }\\n\\n    function getBackgrounds(bool day) public pure returns (string memory) {\\n        string memory bg = \\\"\\\";\\n\\n        bg = string.concat(\\n            '<rect width=\\\"100%\\\" height=\\\"100%\\\" filter=\\\"url(#stars)\\\" opacity=\\\"',\\n            Color.toString(day ? 0 : 1),\\n            '\\\"/>',\\n            '<path fill=\\\"url(#dayGradient)\\\" d=\\\"M0 0h512v512H0z\\\" opacity=\\\"',\\n            Color.toString(day ? 1 : 0),\\n            '\\\"  filter=\\\"url(#light)\\\"/>',\\n            '<path fill=\\\"url(#skyGradient)\\\"  d=\\\"M0 0h512v512H0z\\\" opacity=\\\".',\\n            Color.toString(day ? 0 : 7),\\n            '\\\"/>',\\n            '<path fill=\\\"url(#cloudGradient)\\\" filter=\\\"url(#clouds)\\\" d=\\\"M0 0h565v512H0z\\\"/>'\\n        );\\n\\n        return bg;\\n    }\\n\\n    function getFilters(uint256 seed) public pure returns (string memory) {\\n        string memory filters = \\\"\\\";\\n        filters = string.concat(\\n            filters,\\n            '<filter id=\\\"stars\\\"><feTurbulence baseFrequency=\\\".35\\\" seed=\\\"',\\n            Color.toString((uint16)(Color.psuedorandom(seed, 123) % 10000)),\\n            '\\\"/>',\\n            '<feColorMatrix values=\\\"0 0 0 9 -4 0 0 0 9 -4 0 0 0 9 -4 0 0 0 0 1\\\"/></filter>'\\n        );\\n        filters = string.concat(\\n            filters,\\n            '<filter id=\\\"clouds\\\" x=\\\"-50%\\\" y=\\\"-50%\\\" height=\\\"200%\\\" width=\\\"200%\\\"><feGaussianBlur in=\\\"sky\\\" stdDeviation=\\\"20\\\" result=\\\"skyblur\\\"/>',\\n            '<feTurbulence type=\\\"fractalNoise\\\" baseFrequency=\\\".01\\\" numOctaves=\\\"5\\\" result=\\\"skynoise\\\" seed=\\\"',\\n            Color.toString((uint16)(Color.psuedorandom(seed, 123) % 10000)),\\n            '\\\"/>',\\n            '<feColorMatrix values=\\\"1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 3 -1 -1 0 0\\\"/>',\\n            '<feComposite operator=\\\"in\\\" in2=\\\"SourceGraphic\\\"/></filter>'\\n        );\\n\\n        filters = string.concat(\\n            filters,\\n            '<filter id=\\\"light\\\"><feSpecularLighting result=\\\"specOut\\\" specularExponent=\\\"100\\\" lighting-color=\\\"white\\\">',\\n            '<fePointLight x=\\\"10\\\" y=\\\"70\\\" z=\\\"300\\\"/></feSpecularLighting>',\\n            '<feComposite in=\\\"SourceGraphic\\\" in2=\\\"specOut\\\" operator=\\\"arithmetic\\\" k1=\\\"0\\\" k2=\\\"1\\\" k3=\\\"1\\\" k4=\\\"0\\\"/></filter>'\\n        );\\n\\n        return filters;\\n    }\\n\\n    // function getStars(\\n    //     // uint256 starSeed,\\n    //     // uint256 gazes,\\n    //     // bool day\\n\\n    //     address decorator,\\n    //     Color.DNA memory dna,\\n    //     uint256 gazes,\\n    //     bool daytime\\n    // ) public view returns (string memory) {\\n    //     if (daytime) {\\n    //         return \\\"\\\";\\n    //     }\\n    //     uint8 starCount;\\n\\n    //     if (starCount > 30) {\\n    //         starCount = 30;\\n    //     } else {\\n    //         starCount = (uint8)(gazes);\\n    //     }\\n\\n    //     return\\n    //         string.concat(\\n    //             '<g fill=\\\"white\\\" opacity=\\\"0.7\\\">',\\n    //             getStars(dna.starSeed, starCount),\\n    //             \\\"</g>\\\",\\n    //             getFocus(decorator, dna, gazes, daytime)\\n    //         );\\n    // }\\n\\n    // function buildStars(\\n    //     uint256 starSeed,\\n    //     uint256 constellationSeed,\\n    //     uint256 gazes,\\n    //     bool day\\n    // ) public view returns (string memory) {\\n    //     if (day) {\\n    //         return \\\"\\\";\\n    //     }\\n    //     string memory stars = \\\"\\\";\\n    //     //determine how many are random and how many are constellation\\n    //     uint8 starCount = 0;\\n    //     uint8 constellationCount = 0;\\n    //     if (gazes >= 30) {\\n    //         constellationCount = 30;\\n    //         starCount = 25;\\n    //     } else {\\n    //         while (starCount + constellationCount < gazes) {\\n    //             if (\\n    //                 Color.psuedorandom(\\n    //                     starSeed,\\n    //                     starCount + constellationCount\\n    //                 ) %\\n    //                     5 ==\\n    //                 2\\n    //             ) {\\n    //                 constellationCount++;\\n    //             } else {\\n    //                 starCount++;\\n    //             }\\n    //         }\\n    //     }\\n    //     (string memory const, uint8 remaining) = Constellations\\n    //         .getConstellation(\\n    //             constellationSeed,\\n    //             (constellationCount == 30),\\n    //             constellationCount\\n    //         );\\n\\n    //     stars = string.concat(stars, const, '<g fill=\\\"white\\\" opacity=\\\"0.7\\\">');\\n\\n    //     stars = string.concat(\\n    //         stars,\\n    //         getStars(starSeed, starCount + (remaining == 30 ? 0 : remaining)),\\n    //         \\\"</g>\\\"\\n    //     );\\n\\n    //     return stars;\\n    // }\\n\\n    function getStars(\\n        uint256 starSeed,\\n        uint256 gazes,\\n        bool daytime\\n    ) public pure returns (string memory) {\\n        if (daytime) {\\n            return \\\"\\\";\\n        }\\n        uint8 count;\\n\\n        if (gazes > 30) {\\n            count = 30;\\n        } else {\\n            count = (uint8)(gazes);\\n        }\\n\\n        string memory stars = '<g fill=\\\"white\\\">';\\n        string memory x = \\\"\\\";\\n        string memory y = \\\"\\\";\\n        uint8 seed = 0;\\n        for (uint8 i = 0; i < count; i++) {\\n            x = Color.toString(\\n                (uint16)(Color.psuedorandom(starSeed, i) % 462) + 25\\n            );\\n\\n            y = Color.toString(\\n                (uint16)(Color.psuedorandom(starSeed, i) % 255) + 25\\n            );\\n            seed = (uint8)(Color.psuedorandom(starSeed, i) % 3);\\n            if (seed == 0) {\\n                stars = string.concat(\\n                    stars,\\n                    '<circle r=\\\"1\\\" cx=\\\"',\\n                    x,\\n                    '\\\" cy=\\\"',\\n                    y,\\n                    '\\\" fill=\\\"white\\\"  opacity=\\\"1\\\">',\\n                    '<animate attributeName=\\\"r\\\" values=\\\"0;3;1\\\" dur=\\\"1s\\\"/></circle>'\\n                );\\n            } else if (seed == 1) {\\n                stars = string.concat(\\n                    stars,\\n                    '<path d=\\\"M ',\\n                    x,\\n                    \\\",\\\",\\n                    y,\\n                    'c 7,0 7,0 7,-7 c 0,7 0,7 7,7 c -7,0 -7,0 -7,7 c 0,-7 0,-7 -7,-7\\\">',\\n                    '<animateTransform attributeName=\\\"transform\\\" type=\\\"scale\\\" from=\\\"0 0\\\" to=\\\"1 1\\\" begin=\\\"0s\\\" dur=\\\"0.5s\\\" repeatCount=\\\"1\\\"/></path>'\\n                );\\n            } else if (seed == 2) {\\n                stars = string.concat(\\n                    stars,\\n                    '<circle r=\\\"3\\\" cx=\\\"',\\n                    x,\\n                    '\\\" cy=\\\"',\\n                    y,\\n                    '\\\" opacity=\\\"0.3\\\"><animate attributeName=\\\"r\\\" values=\\\"0;5;3\\\" dur=\\\"1s\\\"/></circle>',\\n                    '<circle r=\\\"1\\\" cx=\\\"',\\n                    x,\\n                    '\\\" cy=\\\"',\\n                    y,\\n                    '\\\"><animate attributeName=\\\"r\\\" values=\\\"0;3;1\\\" dur=\\\"1s\\\"/></circle>'\\n                );\\n            }\\n        }\\n        return string.concat(stars, \\\"</g>\\\");\\n    }\\n\\n    function psuedorandom(\\n        uint256 tokenId,\\n        uint256 nonce\\n    ) public pure returns (uint256) {\\n        return Color.psuedorandom(tokenId, nonce);\\n    }\\n\\n    function subZero(uint16 first, uint16 second) public pure returns (uint16) {\\n        return Color.subZero(first, second);\\n    }\\n\\n    function getDecos(\\n        address decorator,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) private view returns (string memory) {\\n        return\\n            string.concat(\\n                getFocus(decorator, dna, gazes, daytime),\\n                getSkyMath(decorator, dna, gazes, daytime),\\n                getDecorationOne(decorator, dna, gazes, daytime),\\n                getSilhouette(decorator, dna, gazes, daytime)\\n            );\\n    }\\n\\n    function getFocus(\\n        address decorator,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) private view returns (string memory) {\\n        if (decorator == address(0)) return \\\"\\\";\\n        IDecorations deco = IDecorations(decorator);\\n        return deco.getDecorationOne(dna, gazes, daytime);\\n    }\\n\\n    function getSilhouette(\\n        address decorator,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) private view returns (string memory) {\\n        if (decorator == address(0)) return \\\"\\\";\\n        IDecorations deco = IDecorations(decorator);\\n        return deco.getSilhouette(dna, gazes, daytime);\\n    }\\n\\n    function getSkyMath(\\n        address decorator,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) private view returns (string memory) {\\n        if (decorator == address(0)) return \\\"\\\";\\n        IDecorations deco = IDecorations(decorator);\\n        return deco.getSkyMath(dna, gazes, daytime);\\n    }\\n\\n    function getDecorationOne(\\n        address decorator,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) private view returns (string memory) {\\n        if (decorator == address(0)) return \\\"\\\";\\n        IDecorations deco = IDecorations(decorator);\\n        return deco.getDecorationOne(dna, gazes, daytime);\\n    }\\n}\\n\",\"keccak256\":\"0xcf86253920888a196909c072d2ef91277e61ec0a3e464723f9e188c4860ca804\",\"license\":\"MIT\"},\"contracts/interfaces/IDeco.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\nimport \\\"../Color.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\nabstract contract IDeco {\\n    mapping(uint256 => bool) public soulbound;\\n\\n    function soulbind(uint256 tokenId) external {\\n        if (ownerOf(tokenId) != tx.origin) revert NotOwner();\\n        soulbound[tokenId] = true;\\n    }\\n\\n    function getDeco(\\n        uint256 tokenId,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) public view virtual returns (string memory);\\n\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return tx.origin;\\n    }\\n\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        return 1;\\n    }\\n\\n    function packageAsSVG(\\n        uint256 tokenId,\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) public view returns (string memory) {\\n        return\\n            string.concat(\\n                '<svg viewBox=\\\"0 0 512 512\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">',\\n                getDeco(tokenId, dna, gazes, daytime),\\n                \\\"</svg>\\\"\\n            );\\n    }\\n\\n    function generateCharacter(\\n        uint256 tokenId\\n    ) public view returns (string memory) {\\n        Color.DNA memory dna = Color.genDNA(\\n            tokenId,\\n            Color.defaultColors(tokenId)\\n        );\\n        bytes memory svg = abi.encodePacked(\\n            packageAsSVG(tokenId, dna, 0, true)\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:image/svg+xml;base64,\\\",\\n                    Base64.encode(svg)\\n                )\\n            );\\n    }\\n\\n    function getMetadata(\\n        uint256 tokenId\\n    ) public view virtual returns (string memory);\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual returns (string memory) {\\n        bytes memory dataURI = abi.encodePacked(\\n            \\\"{\\\",\\n            getMetadata(tokenId),\\n            \\\",\\\",\\n            '\\\"image\\\": \\\"',\\n            generateCharacter(tokenId),\\n            '\\\"',\\n            \\\"}\\\"\\n        );\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(dataURI)\\n                )\\n            );\\n    }\\n\\n    error NotOwner();\\n    error SoulBound();\\n}\\n\",\"keccak256\":\"0x88fb44f9b96e08ee7071a287b0916cb4755a622e561a6bea26fbf4097071b7af\",\"license\":\"MIT\"},\"contracts/interfaces/IDecorations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./IDeco.sol\\\";\\n\\ninterface IDecorations {\\n    function getFocus(\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) external view returns (string memory);\\n\\n    function getSilhouette(\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) external view returns (string memory);\\n\\n    function getSkyMath(\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) external view returns (string memory);\\n\\n    function getDecorationOne(\\n        Color.DNA memory dna,\\n        uint256 gazes,\\n        bool daytime\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ae1e459d9ba4dad975a1f1d900e7fcce6a0faf79131f8e55ea5d8915bf07cdc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80633a20c8791161005b5780633a20c879146100e4578063428f5eb6146101055780636e6e0cf014610118578063a1759dfa1461012b57600080fd5b8063075d103714610082578063176a29a5146100ab5780633329f04f146100be575b600080fd5b61009561009036600461147f565b61013e565b6040516100a291906114f3565b60405180910390f35b6100956100b9366004611536565b610780565b6100d16100cc366004611551565b610968565b60405161ffff90911681526020016100a2565b6100f76100f236600461158a565b610a0c565b6040519081526020016100a2565b6100956101133660046115c3565b610a8a565b610095610126366004611693565b610b43565b6100956101393660046116ac565b610d9c565b604051633a20c87960e01b815260048101859052607b602482015260609060009073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90631b0d4b4d90602d908390633a20c87990604401602060405180830381865af41580156101a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ca91906116e1565b6101d491906116fa565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610213573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261023b919081019061171c565b905060008160405160200161025091906117e5565b60408051601f19818403018152908290526303f1727f60e21b82529150819073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90630fc5c9fc90610299908a90600401611877565b600060405180830381865af41580156102b6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102de919081019061171c565b6040516020016102ef9291906118a2565b60408051601f19818403018152908290526303f1727f60e21b82529150819073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90630fc5c9fc90610338908990600401611877565b600060405180830381865af4158015610355573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261037d919081019061171c565b60405160200161038e929190611920565b6040516020818303038152906040529050808273__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d8760ff166000146103cc57876103cf565b60015b6040516001600160e01b031960e084901b16815260ff9091166004820152602401600060405180830381865af415801561040d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610435919081019061171c565b73__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d60ff89161561045e5788610461565b60015b6040516001600160e01b031960e084901b16815260ff9091166004820152602401600060405180830381865af415801561049f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104c7919081019061171c565b6040516020016104da949392919061199f565b60408051601f1981840301815290829052631b21034b60e31b8252915060009073__$11e21e6c56ca563b85c74e3fd3a08242f9$__9063d9081a5890610527908a9060f090600401611b48565b606060405180830381865af4158015610544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105689190611b84565b605a60408083019190915251631b21034b60e31b8152909150829073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90630fc5c9fc90829063d9081a58906105b8908d9060b490600401611b48565b606060405180830381865af41580156105d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f99190611b84565b6040518263ffffffff1660e01b81526004016106159190611877565b600060405180830381865af4158015610632573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261065a919081019061171c565b73__$11e21e6c56ca563b85c74e3fd3a08242f9$__630fc5c9fc73__$11e21e6c56ca563b85c74e3fd3a08242f9$__63d9081a588b60b46040518363ffffffff1660e01b81526004016106ae929190611b48565b606060405180830381865af41580156106cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ef9190611b84565b6040518263ffffffff1660e01b815260040161070b9190611877565b600060405180830381865af4158015610728573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610750919081019061171c565b60405160200161076293929190611bd8565b60408051601f1981840301815291905293505050505b949350505050565b60408051602081019091526000815260609073__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d846107b85760016107bb565b60005b6040516001600160e01b031960e084901b16815260ff9091166004820152602401600060405180830381865af41580156107f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610821919081019061171c565b73__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d8561084757600061084a565b60015b6040516001600160e01b031960e084901b16815260ff9091166004820152602401600060405180830381865af4158015610888573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108b0919081019061171c565b73__$11e21e6c56ca563b85c74e3fd3a08242f9$__631b0d4b4d866108d65760076108d9565b60005b6040516001600160e01b031960e084901b16815260ff9091166004820152602401600060405180830381865af4158015610917573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261093f919081019061171c565b60405160200161095193929190611cf7565b60408051601f198184030181529190529392505050565b6040517f3329f04f00000000000000000000000000000000000000000000000000000000815261ffff80841660048301528216602482015260009073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90633329f04f90604401602060405180830381865af41580156109df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a039190611ece565b90505b92915050565b604051633a20c87960e01b8152600481018390526024810182905260009073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90633a20c87990604401602060405180830381865af4158015610a66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0391906116e1565b604080516060818101835260208089015161ffff90811684526064828501819052601e858701819052865180860188528c8801519093168352928201529384015287810151909290600090610ae19084848961013e565b610aee8a60800151610b43565b610af789610780565b610b068c606001518c8c610d9c565b610b12898e8e8e611196565b604051602001610b26959493929190611eeb565b60408051808303601f190181529190529998505050505050505050565b60408051602081018252600081529051633a20c87960e01b815260048101839052607b602482015260609190819073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90631b0d4b4d90612710908390633a20c87990604401602060405180830381865af4158015610bb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdd91906116e1565b610be791906116fa565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610c26573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c4e919081019061171c565b604051602001610c5f92919061205a565b60408051601f1981840301815290829052633a20c87960e01b825260048201859052607b60248301529150819073__$11e21e6c56ca563b85c74e3fd3a08242f9$__90631b0d4b4d90612710908390633a20c87990604401602060405180830381865af4158015610cd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf891906116e1565b610d0291906116fa565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610d41573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d69919081019061171c565b604051602001610d7a92919061215b565b604051602081830303815290604052905080604051602001610951919061234d565b60608115610db9575060408051602081019091526000815261118f565b6000601e841115610dcc5750601e610dcf565b50825b604080518082018252601081527f3c672066696c6c3d227768697465223e0000000000000000000000000000000060208083019190915282518082018452600080825284519283019094528382529192805b8560ff168160ff16101561116657604051633a20c87960e01b8152600481018b905260ff8216602482015273__$11e21e6c56ca563b85c74e3fd3a08242f9$__90631b0d4b4d906101ce908390633a20c87990604401602060405180830381865af4158015610e94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb891906116e1565b610ec291906116fa565b610ecd9060196124fc565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015610f0c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f34919081019061171c565b604051633a20c87960e01b8152600481018c905260ff838116602483015291955073__$11e21e6c56ca563b85c74e3fd3a08242f9$__91631b0d4b4d918390633a20c87990604401602060405180830381865af4158015610f99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbd91906116e1565b610fc791906116fa565b610fd29060196124fc565b6040516001600160e01b031960e084901b16815261ffff9091166004820152602401600060405180830381865af4158015611011573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611039919081019061171c565b604051633a20c87960e01b8152600481018c905260ff8316602482015290935060039073__$11e21e6c56ca563b85c74e3fd3a08242f9$",
  "libraries": {
    "Color": "0xbB158e58EE3b8fb58335E9E3B076240205333C72"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}